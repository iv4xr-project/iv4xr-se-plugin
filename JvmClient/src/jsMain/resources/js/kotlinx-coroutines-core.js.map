{"version":3,"file":"kotlinx-coroutines-core.js","sources":["kotlin/collections.kt","runtime/arrayUtils.kt","generated/_Arrays.kt","coroutines/Continuation.kt","util/Preconditions.kt","util/Result.kt","../../../../../common/src/Delay.kt","../../../../../common/src/EventLoop.common.kt","text/StringBuilder.kt","kotlin/math.kt","util/HashCode.kt","generated/_ArraysJs.kt","../../../../../common/src/flow/SharedFlow.kt","../../../../../common/src/internal/LockFreeTaskQueue.kt","../../../../../js/src/JSDispatcher.kt","../../../../../common/src/AbstractCoroutine.kt","../../../../../common/src/Annotations.kt","../../../../../common/src/CancellableContinuation.kt","../../../../../common/src/Await.kt","generated/_Collections.kt","util/Standard.kt","../../../../../common/src/Builders.common.kt","../../../../../atomicfu/src/commonMain/kotlin/kotlinx/atomicfu/AtomicFU.common.kt","../../../../../common/src/CancellableContinuationImpl.kt","../../../../../common/src/CompletableDeferred.kt","../../../../../common/src/CompletionHandler.common.kt","../../../../../common/src/CompletionState.kt","../../../../../common/src/CoroutineDispatcher.kt","../../../../../common/src/CoroutineExceptionHandler.kt","../../../../../common/src/CoroutineName.kt","../../../../../common/src/CoroutineScope.kt","../../../../../common/src/CoroutineStart.kt","../../../../../js/src/internal/Synchronized.kt","../../../../../common/src/internal/ThreadSafeHeap.kt","../../../../../common/src/Exceptions.common.kt","../../../../../common/src/Job.kt","generated/_Sequences.kt","../../../../../common/src/JobSupport.kt","../../../../../js/src/internal/LinkedList.kt","../../../../../js/src/internal/StackTraceRecovery.kt","../../../../../common/src/MainCoroutineDispatcher.kt","../../../../../common/src/NonCancellable.kt","../../../../../common/src/Supervisor.kt","../../../../../common/src/Timeout.kt","../../../../../common/src/Unconfined.kt","../../../../../common/src/Yield.kt","../../../../../common/src/channels/AbstractChannel.kt","../../../../../common/src/internal/InlineList.kt","../../../../../common/src/channels/ArrayBroadcastChannel.kt","../../../../../common/src/channels/ArrayChannel.kt","../../../../../common/src/channels/Broadcast.kt","../../../../../common/src/channels/BroadcastChannel.kt","../../../../../common/src/channels/BufferOverflow.kt","../../../../../common/src/channels/Channel.kt","../../../../../common/src/channels/ChannelCoroutine.kt","../../../../../common/src/channels/Channels.common.kt","../../../../../common/src/channels/ConflatedBroadcastChannel.kt","../../../../../common/src/internal/Symbol.kt","../../../../../atomicfu/src/jsMain/kotlin/kotlinx/atomicfu/AtomicFU.kt","../../../../../common/src/channels/ConflatedChannel.kt","../../../../../common/src/channels/Deprecated.kt","collections/Maps.kt","collections/MutableCollections.kt","../../../../../common/src/channels/LinkedListChannel.kt","../../../../../common/src/channels/Produce.kt","../../../../../common/src/channels/RendezvousChannel.kt","../../../../../common/src/flow/internal/SafeCollector.common.kt","../../../../../common/src/flow/Builders.kt","collections/Iterators.kt","../../../../../common/src/flow/terminal/Collect.kt","../../../../../common/src/flow/Channels.kt","../../../../../common/src/flow/Flow.kt","../../../../../common/src/flow/operators/Merge.kt","../../../../../common/src/flow/Migration.kt","generated/_ComparisonsJs.kt","../../../../../common/src/flow/SharingStarted.kt","../../../../../common/src/flow/StateFlow.kt","../../../../../common/src/flow/internal/AbstractSharedFlow.kt","../../../../../common/src/flow/internal/ChannelFlow.kt","kotlin/coroutines/intrinsics/IntrinsicsJs.kt","../../../../../common/src/flow/internal/Combine.kt","../../../../../common/src/flow/internal/FlowCoroutine.kt","../../../../../common/src/flow/internal/FlowExceptions.common.kt","../../../../../common/src/flow/internal/Merge.kt","../../../../../common/src/flow/internal/NopCollector.kt","../../../../../common/src/flow/internal/SendingCollector.kt","../../../../../common/src/flow/operators/Context.kt","../../../../../common/src/selects/Select.kt","../../../../../common/src/flow/operators/Delay.kt","../../../../../common/src/flow/operators/Distinct.kt","../../../../../common/src/flow/operators/Emitters.kt","../../../../../common/src/flow/operators/Errors.kt","../../../../../common/src/flow/operators/Limit.kt","../../../../../common/src/flow/operators/Lint.kt","../../../../../common/src/flow/operators/Transform.kt","../../../../../common/src/flow/operators/Share.kt","../../../../../common/src/flow/operators/Zip.kt","../../../../../common/src/flow/terminal/Collection.kt","../../../../../common/src/flow/terminal/Count.kt","../../../../../common/src/flow/terminal/Reduce.kt","../../../../../common/src/internal/ArrayQueue.kt","../../../../../common/src/internal/Atomic.kt","../../../../../common/src/internal/ConcurrentLinkedList.kt","../../../../../common/src/internal/DispatchedContinuation.kt","../../../../../common/src/internal/DispatchedTask.kt","../../../../../common/src/internal/LocalAtomics.common.kt","../../../../../common/src/internal/MainDispatcherFactory.kt","../../../../../common/src/internal/OnUndeliveredElement.kt","../../../../../common/src/internal/Scopes.kt","../../../../../common/src/internal/SystemProps.common.kt","../../../../../common/src/intrinsics/Cancellable.kt","../../../../../common/src/intrinsics/Undispatched.kt","../../../../../js/src/Runnable.kt","../../../../../common/src/selects/SelectUnbiased.kt","collections/Collections.kt","../../../../../common/src/selects/WhileSelect.kt","../../../../../common/src/sync/Mutex.kt","../../../../../common/src/sync/Semaphore.kt","../../../../../js/src/CompletionHandler.kt","kotlin/jsTypeOf.kt","../../../../../js/src/CoroutineContext.kt","../../../../../js/src/CoroutineExceptionHandlerImpl.kt","../../../../../js/src/Debug.kt","../../../../../js/src/Dispatchers.kt","../../../../../js/src/EventLoop.kt","../../../../../js/src/Exceptions.kt","../../../../../js/src/Promise.kt","../../../../../js/src/SchedulerTask.kt","../../../../../js/src/Window.kt","../../../../../js/src/flow/internal/FlowExceptions.kt","../../../../../js/src/flow/internal/SafeCollector.kt","../../../../../js/src/internal/Concurrent.kt","../../../../../js/src/internal/CopyOnWriteList.kt","kotlin/kotlin.kt","../../../../../js/src/internal/LocalAtomics.kt","../../../../../js/src/internal/ProbesSupport.kt","../../../../../js/src/internal/SystemProps.kt","../../../../../js/src/internal/ThreadContext.kt","../../../../../js/src/internal/ThreadLocal.kt","../../../../../common/src/flow/internal/NullSurrogate.kt","../../../../../common/src/internal/LockFreeLinkedList.common.kt"],"sourcesContent":["/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.collections\n\nimport kotlin.comparisons.naturalOrder\nimport kotlin.random.Random\n\n/** Returns the array if it's not `null`, or an empty array otherwise. */\n@kotlin.internal.InlineOnly\npublic actual inline fun <T> Array<out T>?.orEmpty(): Array<out T> = this ?: emptyArray<T>()\n\n@kotlin.internal.InlineOnly\npublic actual inline fun <T> Collection<T>.toTypedArray(): Array<T> = copyToArray(this)\n\n@JsName(\"copyToArray\")\n@PublishedApi\ninternal fun <T> copyToArray(collection: Collection<T>): Array<T> {\n    return if (collection.asDynamic().toArray !== undefined)\n        collection.asDynamic().toArray().unsafeCast<Array<T>>()\n    else\n        copyToArrayImpl(collection).unsafeCast<Array<T>>()\n}\n\n@JsName(\"copyToArrayImpl\")\ninternal actual fun copyToArrayImpl(collection: Collection<*>): Array<Any?> {\n    val array = emptyArray<Any?>()\n    val iterator = collection.iterator()\n    while (iterator.hasNext())\n        array.asDynamic().push(iterator.next())\n    return array\n}\n\n@JsName(\"copyToExistingArrayImpl\")\ninternal actual fun <T> copyToArrayImpl(collection: Collection<*>, array: Array<T>): Array<T> {\n    if (array.size < collection.size)\n        return copyToArrayImpl(collection).unsafeCast<Array<T>>()\n\n    val iterator = collection.iterator()\n    var index = 0\n    while (iterator.hasNext()) {\n        array[index++] = iterator.next().unsafeCast<T>()\n    }\n    if (index < array.size) {\n        array[index] = null.unsafeCast<T>()\n    }\n    return array\n}\n\n\n/**\n * Returns an immutable list containing only the specified object [element].\n */\npublic fun <T> listOf(element: T): List<T> = arrayListOf(element)\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\ninternal actual inline fun <E> buildListInternal(builderAction: MutableList<E>.() -> Unit): List<E> {\n    return ArrayList<E>().apply(builderAction).build()\n}\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\ninternal actual inline fun <E> buildListInternal(capacity: Int, builderAction: MutableList<E>.() -> Unit): List<E> {\n    checkBuilderCapacity(capacity)\n    return ArrayList<E>(capacity).apply(builderAction).build()\n}\n\n\n/**\n * Returns an immutable set containing only the specified object [element].\n */\npublic fun <T> setOf(element: T): Set<T> = hashSetOf(element)\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\ninternal actual inline fun <E> buildSetInternal(builderAction: MutableSet<E>.() -> Unit): Set<E> {\n    return LinkedHashSet<E>().apply(builderAction).build()\n}\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\ninternal actual inline fun <E> buildSetInternal(capacity: Int, builderAction: MutableSet<E>.() -> Unit): Set<E> {\n    return LinkedHashSet<E>(capacity).apply(builderAction).build()\n}\n\n\n/**\n * Returns an immutable map, mapping only the specified key to the\n * specified value.\n */\npublic fun <K, V> mapOf(pair: Pair<K, V>): Map<K, V> = hashMapOf(pair)\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\ninternal actual inline fun <K, V> buildMapInternal(builderAction: MutableMap<K, V>.() -> Unit): Map<K, V> {\n    return LinkedHashMap<K, V>().apply(builderAction).build()\n}\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\ninternal actual inline fun <K, V> buildMapInternal(capacity: Int, builderAction: MutableMap<K, V>.() -> Unit): Map<K, V> {\n    return LinkedHashMap<K, V>(capacity).apply(builderAction).build()\n}\n\n\n/**\n * Fills the list with the provided [value].\n *\n * Each element in the list gets replaced with the [value].\n */\n@SinceKotlin(\"1.2\")\npublic actual fun <T> MutableList<T>.fill(value: T): Unit {\n    for (index in 0..lastIndex) {\n        this[index] = value\n    }\n}\n\n/**\n * Randomly shuffles elements in this list.\n *\n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.2\")\npublic actual fun <T> MutableList<T>.shuffle(): Unit = shuffle(Random)\n\n/**\n * Returns a new list with the elements of this list randomly shuffled.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun <T> Iterable<T>.shuffled(): List<T> = toMutableList().apply { shuffle() }\n\n/**\n * Sorts elements in the list in-place according to their natural sort order.\n *\n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic actual fun <T : Comparable<T>> MutableList<T>.sort(): Unit {\n    collectionsSort(this, naturalOrder())\n}\n\n/**\n * Sorts elements in the list in-place according to the order specified with [comparator].\n *\n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic actual fun <T> MutableList<T>.sortWith(comparator: Comparator<in T>): Unit {\n    collectionsSort(this, comparator)\n}\n\nprivate fun <T> collectionsSort(list: MutableList<T>, comparator: Comparator<in T>) {\n    if (list.size <= 1) return\n\n    val array = copyToArray(list)\n    sortArrayWith(array, comparator)\n\n    for (i in 0 until array.size) {\n        list[i] = array[i]\n    }\n}\n\ninternal actual fun <T> arrayOfNulls(reference: Array<T>, size: Int): Array<T> {\n    return arrayOfNulls<Any>(size).unsafeCast<Array<T>>()\n}\n\n@SinceKotlin(\"1.3\")\n@PublishedApi\n@JsName(\"arrayCopy\")\ninternal fun <T> arrayCopy(source: Array<out T>, destination: Array<in T>, destinationOffset: Int, startIndex: Int, endIndex: Int) {\n    AbstractList.checkRangeIndexes(startIndex, endIndex, source.size)\n    val rangeSize = endIndex - startIndex\n    AbstractList.checkRangeIndexes(destinationOffset, destinationOffset + rangeSize, destination.size)\n\n    if (js(\"ArrayBuffer\").isView(destination) && js(\"ArrayBuffer\").isView(source)) {\n        val subrange = source.asDynamic().subarray(startIndex, endIndex)\n        destination.asDynamic().set(subrange, destinationOffset)\n    } else {\n        if (source !== destination || destinationOffset <= startIndex) {\n            for (index in 0 until rangeSize) {\n                destination[destinationOffset + index] = source[startIndex + index]\n            }\n        } else {\n            for (index in rangeSize - 1 downTo 0) {\n                destination[destinationOffset + index] = source[startIndex + index]\n            }\n        }\n    }\n}\n\n// no singleton map implementation in js, return map as is\n@Suppress(\"NOTHING_TO_INLINE\")\ninternal actual inline fun <K, V> Map<K, V>.toSingletonMapOrSelf(): Map<K, V> = this\n\n@Suppress(\"NOTHING_TO_INLINE\")\ninternal actual inline fun <K, V> Map<out K, V>.toSingletonMap(): Map<K, V> = this.toMutableMap()\n\n\n@Suppress(\"NOTHING_TO_INLINE\")\ninternal actual inline fun <T> Array<out T>.copyToArrayOfAny(isVarargs: Boolean): Array<out Any?> =\n    if (isVarargs)\n    // no need to copy vararg array in JS\n        this\n    else\n        this.copyOf()\n\n\n\n@PublishedApi\ninternal actual fun checkIndexOverflow(index: Int): Int {\n    if (index < 0) {\n        throwIndexOverflow()\n    }\n    return index\n}\n\n@PublishedApi\ninternal actual fun checkCountOverflow(count: Int): Int {\n    if (count < 0) {\n        throwCountOverflow()\n    }\n    return count\n}\n\n\n/**\n * JS map and set implementations do not make use of capacities or load factors.\n */\n@PublishedApi\ninternal actual fun mapCapacity(expectedSize: Int) = expectedSize\n\n/**\n * Checks a collection builder function capacity argument.\n * In JS no validation is made in Map/Set constructor yet.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@PublishedApi\ninternal fun checkBuilderCapacity(capacity: Int) {\n    require(capacity >= 0) { \"capacity must be non-negative.\" }\n}","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// a package is omitted to get declarations directly under the module\n\n@PublishedApi\nexternal internal fun <T> Array(size: Int): Array<T>\n\n@JsName(\"newArray\")\nfun <T> newArray(size: Int, initValue: T) = fillArrayVal(Array<T>(size), initValue)\n\n@JsName(\"newArrayF\")\ninline fun <T> arrayWithFun(size: Int, init: (Int) -> T) = fillArrayFun(Array<T>(size), init)\n\n@JsName(\"fillArray\")\ninline fun <T> fillArrayFun(array: Array<T>, init: (Int) -> T): Array<T> {\n    for (i in 0..array.size - 1) {\n        array[i] = init(i)\n    }\n    return array\n}\n\n@JsName(\"booleanArray\")\nfun booleanArray(size: Int, init: dynamic): Array<Boolean> {\n    val result: dynamic = Array<Boolean>(size)\n    result.`$type$` = \"BooleanArray\"\n    return when (init) {\n        null, true -> fillArrayVal(result, false)\n        false -> result\n        else -> fillArrayFun<Boolean>(result, init)\n    }\n}\n\n@JsName(\"booleanArrayF\")\ninline fun booleanArrayWithFun(size: Int, init: (Int) -> Boolean): Array<Boolean> = fillArrayFun(booleanArray(size, false), init)\n\n@JsName(\"charArray\")\n@Suppress(\"UNUSED_PARAMETER\")\nfun charArray(size: Int, init: dynamic): Array<Char> {\n    val result = js(\"new Uint16Array(size)\")\n    result.`$type$` = \"CharArray\"\n    return when (init) {\n        null, true, false -> result // For consistency\n        else -> fillArrayFun<Char>(result, init)\n    }\n}\n\n@JsName(\"charArrayF\")\ninline fun charArrayWithFun(size: Int, init: (Int) -> Char): Array<Char> {\n    val array = charArray(size, null)\n    for (i in 0..array.size - 1) {\n        @Suppress(\"UNUSED_VARIABLE\") // used in js block\n        val value = init(i)\n        js(\"array[i] = value;\")\n    }\n    return array\n}\n\n@JsName(\"untypedCharArrayF\")\ninline fun untypedCharArrayWithFun(size: Int, init: (Int) -> Char): Array<Char> {\n    val array = Array<Char>(size)\n    for (i in 0..array.size - 1) {\n        @Suppress(\"UNUSED_VARIABLE\") // used in js block\n        val value = init(i)\n        js(\"array[i] = value;\")\n    }\n    return array\n}\n\n@JsName(\"longArray\")\nfun longArray(size: Int, init: dynamic): Array<Long> {\n    val result: dynamic = Array<Long>(size)\n    result.`$type$` = \"LongArray\"\n    return when (init) {\n        null, true -> fillArrayVal(result, 0L)\n        false -> result\n        else -> fillArrayFun<Long>(result, init)\n    }\n}\n\n@JsName(\"longArrayF\")\ninline fun longArrayWithFun(size: Int, init: (Int) -> Long): Array<Long> = fillArrayFun(longArray(size, false), init)\n\nprivate fun <T> fillArrayVal(array: Array<T>, initValue: T): Array<T> {\n    for (i in 0..array.size - 1) {\n        array[i] = initValue\n    }\n    return array\n}","/*\n * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"ArraysKt\")\n\npackage kotlin.collections\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.random.*\nimport kotlin.ranges.contains\nimport kotlin.ranges.reversed\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component1(): T {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component1(): Byte {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component1(): Short {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component1(): Int {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component1(): Long {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component1(): Float {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component1(): Double {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component1(): Boolean {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component1(): Char {\n    return get(0)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component2(): T {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component2(): Byte {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component2(): Short {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component2(): Int {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component2(): Long {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component2(): Float {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component2(): Double {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component2(): Boolean {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component2(): Char {\n    return get(1)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component3(): T {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component3(): Byte {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component3(): Short {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component3(): Int {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component3(): Long {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component3(): Float {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component3(): Double {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component3(): Boolean {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component3(): Char {\n    return get(2)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component4(): T {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component4(): Byte {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component4(): Short {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component4(): Int {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component4(): Long {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component4(): Float {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component4(): Double {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component4(): Boolean {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component4(): Char {\n    return get(3)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component5(): T {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component5(): Byte {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component5(): Short {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component5(): Int {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component5(): Long {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component5(): Float {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component5(): Double {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component5(): Boolean {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component5(): Char {\n    return get(4)\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun <@kotlin.internal.OnlyInputTypes T> Array<out T>.contains(element: T): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun ByteArray.contains(element: Byte): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun ShortArray.contains(element: Short): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun IntArray.contains(element: Int): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun LongArray.contains(element: Long): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\n@Deprecated(\"The function has unclear behavior when searching for NaN or zero values and will be removed soon. Use 'any { it == element }' instead to continue using this behavior, or '.asList().contains(element: T)' to get the same search behavior as in a list.\", ReplaceWith(\"any { it == element }\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\n@Suppress(\"DEPRECATION\")\npublic operator fun FloatArray.contains(element: Float): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\n@Deprecated(\"The function has unclear behavior when searching for NaN or zero values and will be removed soon. Use 'any { it == element }' instead to continue using this behavior, or '.asList().contains(element: T)' to get the same search behavior as in a list.\", ReplaceWith(\"any { it == element }\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\n@Suppress(\"DEPRECATION\")\npublic operator fun DoubleArray.contains(element: Double): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun BooleanArray.contains(element: Boolean): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun CharArray.contains(element: Char): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun <T> Array<out T>.elementAt(index: Int): T\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun ByteArray.elementAt(index: Int): Byte\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun ShortArray.elementAt(index: Int): Short\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun IntArray.elementAt(index: Int): Int\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun LongArray.elementAt(index: Int): Long\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun FloatArray.elementAt(index: Int): Float\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun DoubleArray.elementAt(index: Int): Double\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun BooleanArray.elementAt(index: Int): Boolean\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun CharArray.elementAt(index: Int): Char\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.elementAtOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Byte): Byte {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Short): Short {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Int): Int {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Long): Long {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Float): Float {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Double): Double {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Boolean): Boolean {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Char): Char {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.elementAtOrNull(index: Int): T? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.elementAtOrNull(index: Int): Byte? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.elementAtOrNull(index: Int): Short? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.elementAtOrNull(index: Int): Int? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.elementAtOrNull(index: Int): Long? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.elementAtOrNull(index: Int): Float? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.elementAtOrNull(index: Int): Double? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.elementAtOrNull(index: Int): Boolean? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.elementAtOrNull(index: Int): Char? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.find(predicate: (T) -> Boolean): T? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.find(predicate: (Byte) -> Boolean): Byte? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.find(predicate: (Short) -> Boolean): Short? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.find(predicate: (Int) -> Boolean): Int? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.find(predicate: (Long) -> Boolean): Long? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.find(predicate: (Float) -> Boolean): Float? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.find(predicate: (Double) -> Boolean): Double? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.find(predicate: (Boolean) -> Boolean): Boolean? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.find(predicate: (Char) -> Boolean): Char? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.findLast(predicate: (T) -> Boolean): T? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.findLast(predicate: (Byte) -> Boolean): Byte? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.findLast(predicate: (Short) -> Boolean): Short? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.findLast(predicate: (Int) -> Boolean): Int? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.findLast(predicate: (Long) -> Boolean): Long? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.findLast(predicate: (Float) -> Boolean): Float? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.findLast(predicate: (Double) -> Boolean): Double? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.findLast(predicate: (Boolean) -> Boolean): Boolean? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.findLast(predicate: (Char) -> Boolean): Char? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun <T> Array<out T>.first(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun ByteArray.first(): Byte {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun ShortArray.first(): Short {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun IntArray.first(): Int {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun LongArray.first(): Long {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun FloatArray.first(): Float {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun DoubleArray.first(): Double {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun BooleanArray.first(): Boolean {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun CharArray.first(): Char {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> Array<out T>.first(predicate: (T) -> Boolean): T {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun ByteArray.first(predicate: (Byte) -> Boolean): Byte {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun ShortArray.first(predicate: (Short) -> Boolean): Short {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun IntArray.first(predicate: (Int) -> Boolean): Int {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun LongArray.first(predicate: (Long) -> Boolean): Long {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun FloatArray.first(predicate: (Float) -> Boolean): Float {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun DoubleArray.first(predicate: (Double) -> Boolean): Double {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun BooleanArray.first(predicate: (Boolean) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun CharArray.first(predicate: (Char) -> Boolean): Char {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first non-null value produced by [transform] function being applied to elements of this array in iteration order,\n * or throws [NoSuchElementException] if no non-null value was produced.\n * \n * @sample samples.collections.Collections.Transformations.firstNotNullOf\n */\n@SinceKotlin(\"1.5\")\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Any> Array<out T>.firstNotNullOf(transform: (T) -> R?): R {\n    return firstNotNullOfOrNull(transform) ?: throw NoSuchElementException(\"No element of the array was transformed to a non-null value.\")\n}\n\n/**\n * Returns the first non-null value produced by [transform] function being applied to elements of this array in iteration order,\n * or `null` if no non-null value was produced.\n * \n * @sample samples.collections.Collections.Transformations.firstNotNullOf\n */\n@SinceKotlin(\"1.5\")\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Any> Array<out T>.firstNotNullOfOrNull(transform: (T) -> R?): R? {\n    for (element in this) {\n        val result = transform(element)\n        if (result != null) {\n            return result\n        }\n    }\n    return null\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun <T> Array<out T>.firstOrNull(): T? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun ByteArray.firstOrNull(): Byte? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun ShortArray.firstOrNull(): Short? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun IntArray.firstOrNull(): Int? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun LongArray.firstOrNull(): Long? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun FloatArray.firstOrNull(): Float? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun DoubleArray.firstOrNull(): Double? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun BooleanArray.firstOrNull(): Boolean? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun CharArray.firstOrNull(): Char? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun <T> Array<out T>.firstOrNull(predicate: (T) -> Boolean): T? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun ByteArray.firstOrNull(predicate: (Byte) -> Boolean): Byte? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun ShortArray.firstOrNull(predicate: (Short) -> Boolean): Short? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun IntArray.firstOrNull(predicate: (Int) -> Boolean): Int? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun LongArray.firstOrNull(predicate: (Long) -> Boolean): Long? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun FloatArray.firstOrNull(predicate: (Float) -> Boolean): Float? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun DoubleArray.firstOrNull(predicate: (Double) -> Boolean): Double? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun BooleanArray.firstOrNull(predicate: (Boolean) -> Boolean): Boolean? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun CharArray.firstOrNull(predicate: (Char) -> Boolean): Char? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.getOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.getOrElse(index: Int, defaultValue: (Int) -> Byte): Byte {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.getOrElse(index: Int, defaultValue: (Int) -> Short): Short {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.getOrElse(index: Int, defaultValue: (Int) -> Int): Int {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.getOrElse(index: Int, defaultValue: (Int) -> Long): Long {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.getOrElse(index: Int, defaultValue: (Int) -> Float): Float {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.getOrElse(index: Int, defaultValue: (Int) -> Double): Double {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.getOrElse(index: Int, defaultValue: (Int) -> Boolean): Boolean {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.getOrElse(index: Int, defaultValue: (Int) -> Char): Char {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.getOrNull\n */\npublic fun <T> Array<out T>.getOrNull(index: Int): T? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.getOrNull\n */\npublic fun ByteArray.getOrNull(index: Int): Byte? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.getOrNull\n */\npublic fun ShortArray.getOrNull(index: Int): Short? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.getOrNull\n */\npublic fun IntArray.getOrNull(index: Int): Int? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.getOrNull\n */\npublic fun LongArray.getOrNull(index: Int): Long? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.getOrNull\n */\npublic fun FloatArray.getOrNull(index: Int): Float? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.getOrNull\n */\npublic fun DoubleArray.getOrNull(index: Int): Double? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.getOrNull\n */\npublic fun BooleanArray.getOrNull(index: Int): Boolean? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.getOrNull\n */\npublic fun CharArray.getOrNull(index: Int): Char? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Array<out T>.indexOf(element: T): Int {\n    if (element == null) {\n        for (index in indices) {\n            if (this[index] == null) {\n                return index\n            }\n        }\n    } else {\n        for (index in indices) {\n            if (element == this[index]) {\n                return index\n            }\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun ByteArray.indexOf(element: Byte): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun ShortArray.indexOf(element: Short): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun IntArray.indexOf(element: Int): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun LongArray.indexOf(element: Long): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\n@Deprecated(\"The function has unclear behavior when searching for NaN or zero values and will be removed soon. Use 'indexOfFirst { it == element }' instead to continue using this behavior, or '.asList().indexOf(element: T)' to get the same search behavior as in a list.\", ReplaceWith(\"indexOfFirst { it == element }\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun FloatArray.indexOf(element: Float): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\n@Deprecated(\"The function has unclear behavior when searching for NaN or zero values and will be removed soon. Use 'indexOfFirst { it == element }' instead to continue using this behavior, or '.asList().indexOf(element: T)' to get the same search behavior as in a list.\", ReplaceWith(\"indexOfFirst { it == element }\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun DoubleArray.indexOf(element: Double): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun BooleanArray.indexOf(element: Boolean): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun CharArray.indexOf(element: Char): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun <T> Array<out T>.indexOfFirst(predicate: (T) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun ByteArray.indexOfFirst(predicate: (Byte) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun ShortArray.indexOfFirst(predicate: (Short) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun IntArray.indexOfFirst(predicate: (Int) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun LongArray.indexOfFirst(predicate: (Long) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun FloatArray.indexOfFirst(predicate: (Float) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun DoubleArray.indexOfFirst(predicate: (Double) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun BooleanArray.indexOfFirst(predicate: (Boolean) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun CharArray.indexOfFirst(predicate: (Char) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun <T> Array<out T>.indexOfLast(predicate: (T) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun ByteArray.indexOfLast(predicate: (Byte) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun ShortArray.indexOfLast(predicate: (Short) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun IntArray.indexOfLast(predicate: (Int) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun LongArray.indexOfLast(predicate: (Long) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun FloatArray.indexOfLast(predicate: (Float) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun DoubleArray.indexOfLast(predicate: (Double) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun BooleanArray.indexOfLast(predicate: (Boolean) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun CharArray.indexOfLast(predicate: (Char) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns the last element.\n * \n * @throws NoSuchElementException if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun <T> Array<out T>.last(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * \n * @throws NoSuchElementException if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun ByteArray.last(): Byte {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * \n * @throws NoSuchElementException if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun ShortArray.last(): Short {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * \n * @throws NoSuchElementException if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun IntArray.last(): Int {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * \n * @throws NoSuchElementException if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun LongArray.last(): Long {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * \n * @throws NoSuchElementException if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun FloatArray.last(): Float {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * \n * @throws NoSuchElementException if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun DoubleArray.last(): Double {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * \n * @throws NoSuchElementException if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun BooleanArray.last(): Boolean {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * \n * @throws NoSuchElementException if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun CharArray.last(): Char {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * \n * @throws NoSuchElementException if no such element is found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun <T> Array<out T>.last(predicate: (T) -> Boolean): T {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * \n * @throws NoSuchElementException if no such element is found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun ByteArray.last(predicate: (Byte) -> Boolean): Byte {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * \n * @throws NoSuchElementException if no such element is found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun ShortArray.last(predicate: (Short) -> Boolean): Short {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * \n * @throws NoSuchElementException if no such element is found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun IntArray.last(predicate: (Int) -> Boolean): Int {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * \n * @throws NoSuchElementException if no such element is found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun LongArray.last(predicate: (Long) -> Boolean): Long {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * \n * @throws NoSuchElementException if no such element is found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun FloatArray.last(predicate: (Float) -> Boolean): Float {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * \n * @throws NoSuchElementException if no such element is found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun DoubleArray.last(predicate: (Double) -> Boolean): Double {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * \n * @throws NoSuchElementException if no such element is found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun BooleanArray.last(predicate: (Boolean) -> Boolean): Boolean {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * \n * @throws NoSuchElementException if no such element is found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun CharArray.last(predicate: (Char) -> Boolean): Char {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Array<out T>.lastIndexOf(element: T): Int {\n    if (element == null) {\n        for (index in indices.reversed()) {\n            if (this[index] == null) {\n                return index\n            }\n        }\n    } else {\n        for (index in indices.reversed()) {\n            if (element == this[index]) {\n                return index\n            }\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun ByteArray.lastIndexOf(element: Byte): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun ShortArray.lastIndexOf(element: Short): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun IntArray.lastIndexOf(element: Int): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun LongArray.lastIndexOf(element: Long): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\n@Deprecated(\"The function has unclear behavior when searching for NaN or zero values and will be removed soon. Use 'indexOfLast { it == element }' instead to continue using this behavior, or '.asList().lastIndexOf(element: T)' to get the same search behavior as in a list.\", ReplaceWith(\"indexOfLast { it == element }\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun FloatArray.lastIndexOf(element: Float): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\n@Deprecated(\"The function has unclear behavior when searching for NaN or zero values and will be removed soon. Use 'indexOfLast { it == element }' instead to continue using this behavior, or '.asList().lastIndexOf(element: T)' to get the same search behavior as in a list.\", ReplaceWith(\"indexOfLast { it == element }\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun DoubleArray.lastIndexOf(element: Double): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun BooleanArray.lastIndexOf(element: Boolean): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun CharArray.lastIndexOf(element: Char): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun <T> Array<out T>.lastOrNull(): T? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun ByteArray.lastOrNull(): Byte? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun ShortArray.lastOrNull(): Short? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun IntArray.lastOrNull(): Int? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun LongArray.lastOrNull(): Long? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun FloatArray.lastOrNull(): Float? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun DoubleArray.lastOrNull(): Double? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun BooleanArray.lastOrNull(): Boolean? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun CharArray.lastOrNull(): Char? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun <T> Array<out T>.lastOrNull(predicate: (T) -> Boolean): T? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun ByteArray.lastOrNull(predicate: (Byte) -> Boolean): Byte? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun ShortArray.lastOrNull(predicate: (Short) -> Boolean): Short? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun IntArray.lastOrNull(predicate: (Int) -> Boolean): Int? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun LongArray.lastOrNull(predicate: (Long) -> Boolean): Long? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun FloatArray.lastOrNull(predicate: (Float) -> Boolean): Float? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun DoubleArray.lastOrNull(predicate: (Double) -> Boolean): Double? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun BooleanArray.lastOrNull(predicate: (Boolean) -> Boolean): Boolean? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun CharArray.lastOrNull(predicate: (Char) -> Boolean): Char? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.random(): T {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.random(): Byte {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.random(): Short {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.random(): Int {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.random(): Long {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.random(): Float {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.random(): Double {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.random(): Boolean {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.random(): Char {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun <T> Array<out T>.random(random: Random): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun ByteArray.random(random: Random): Byte {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun ShortArray.random(random: Random): Short {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun IntArray.random(random: Random): Int {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun LongArray.random(random: Random): Long {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun FloatArray.random(random: Random): Float {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun DoubleArray.random(random: Random): Double {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun BooleanArray.random(random: Random): Boolean {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun CharArray.random(random: Random): Char {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.randomOrNull(): T? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.randomOrNull(): Byte? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.randomOrNull(): Short? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.randomOrNull(): Int? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.randomOrNull(): Long? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.randomOrNull(): Float? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.randomOrNull(): Double? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.randomOrNull(): Boolean? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.randomOrNull(): Char? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun <T> Array<out T>.randomOrNull(random: Random): T? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun ByteArray.randomOrNull(random: Random): Byte? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun ShortArray.randomOrNull(random: Random): Short? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun IntArray.randomOrNull(random: Random): Int? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun LongArray.randomOrNull(random: Random): Long? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun FloatArray.randomOrNull(random: Random): Float? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun DoubleArray.randomOrNull(random: Random): Double? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun BooleanArray.randomOrNull(random: Random): Boolean? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun CharArray.randomOrNull(random: Random): Char? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun <T> Array<out T>.single(): T {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun ByteArray.single(): Byte {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun ShortArray.single(): Short {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun IntArray.single(): Int {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun LongArray.single(): Long {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun FloatArray.single(): Float {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun DoubleArray.single(): Double {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun BooleanArray.single(): Boolean {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun CharArray.single(): Char {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun <T> Array<out T>.single(predicate: (T) -> Boolean): T {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as T\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun ByteArray.single(predicate: (Byte) -> Boolean): Byte {\n    var single: Byte? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Byte\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun ShortArray.single(predicate: (Short) -> Boolean): Short {\n    var single: Short? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Short\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun IntArray.single(predicate: (Int) -> Boolean): Int {\n    var single: Int? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Int\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun LongArray.single(predicate: (Long) -> Boolean): Long {\n    var single: Long? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Long\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun FloatArray.single(predicate: (Float) -> Boolean): Float {\n    var single: Float? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Float\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun DoubleArray.single(predicate: (Double) -> Boolean): Double {\n    var single: Double? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Double\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun BooleanArray.single(predicate: (Boolean) -> Boolean): Boolean {\n    var single: Boolean? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Boolean\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun CharArray.single(predicate: (Char) -> Boolean): Char {\n    var single: Char? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Char\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun <T> Array<out T>.singleOrNull(): T? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun ByteArray.singleOrNull(): Byte? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun ShortArray.singleOrNull(): Short? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun IntArray.singleOrNull(): Int? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun LongArray.singleOrNull(): Long? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun FloatArray.singleOrNull(): Float? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun DoubleArray.singleOrNull(): Double? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun BooleanArray.singleOrNull(): Boolean? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun CharArray.singleOrNull(): Char? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun <T> Array<out T>.singleOrNull(predicate: (T) -> Boolean): T? {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun ByteArray.singleOrNull(predicate: (Byte) -> Boolean): Byte? {\n    var single: Byte? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun ShortArray.singleOrNull(predicate: (Short) -> Boolean): Short? {\n    var single: Short? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun IntArray.singleOrNull(predicate: (Int) -> Boolean): Int? {\n    var single: Int? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun LongArray.singleOrNull(predicate: (Long) -> Boolean): Long? {\n    var single: Long? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun FloatArray.singleOrNull(predicate: (Float) -> Boolean): Float? {\n    var single: Float? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun DoubleArray.singleOrNull(predicate: (Double) -> Boolean): Double? {\n    var single: Double? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun BooleanArray.singleOrNull(predicate: (Boolean) -> Boolean): Boolean? {\n    var single: Boolean? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun CharArray.singleOrNull(predicate: (Char) -> Boolean): Char? {\n    var single: Char? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> Array<out T>.drop(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun ByteArray.drop(n: Int): List<Byte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun ShortArray.drop(n: Int): List<Short> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun IntArray.drop(n: Int): List<Int> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun LongArray.drop(n: Int): List<Long> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun FloatArray.drop(n: Int): List<Float> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun DoubleArray.drop(n: Int): List<Double> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun BooleanArray.drop(n: Int): List<Boolean> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun CharArray.drop(n: Int): List<Char> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> Array<out T>.dropLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun ByteArray.dropLast(n: Int): List<Byte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun ShortArray.dropLast(n: Int): List<Short> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun IntArray.dropLast(n: Int): List<Int> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun LongArray.dropLast(n: Int): List<Long> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun FloatArray.dropLast(n: Int): List<Float> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun DoubleArray.dropLast(n: Int): List<Double> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun BooleanArray.dropLast(n: Int): List<Boolean> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun CharArray.dropLast(n: Int): List<Char> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun <T> Array<out T>.dropLastWhile(predicate: (T) -> Boolean): List<T> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun ByteArray.dropLastWhile(predicate: (Byte) -> Boolean): List<Byte> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun ShortArray.dropLastWhile(predicate: (Short) -> Boolean): List<Short> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun IntArray.dropLastWhile(predicate: (Int) -> Boolean): List<Int> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun LongArray.dropLastWhile(predicate: (Long) -> Boolean): List<Long> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun FloatArray.dropLastWhile(predicate: (Float) -> Boolean): List<Float> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun DoubleArray.dropLastWhile(predicate: (Double) -> Boolean): List<Double> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun BooleanArray.dropLastWhile(predicate: (Boolean) -> Boolean): List<Boolean> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun CharArray.dropLastWhile(predicate: (Char) -> Boolean): List<Char> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun <T> Array<out T>.dropWhile(predicate: (T) -> Boolean): List<T> {\n    var yielding = false\n    val list = ArrayList<T>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun ByteArray.dropWhile(predicate: (Byte) -> Boolean): List<Byte> {\n    var yielding = false\n    val list = ArrayList<Byte>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun ShortArray.dropWhile(predicate: (Short) -> Boolean): List<Short> {\n    var yielding = false\n    val list = ArrayList<Short>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun IntArray.dropWhile(predicate: (Int) -> Boolean): List<Int> {\n    var yielding = false\n    val list = ArrayList<Int>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun LongArray.dropWhile(predicate: (Long) -> Boolean): List<Long> {\n    var yielding = false\n    val list = ArrayList<Long>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun FloatArray.dropWhile(predicate: (Float) -> Boolean): List<Float> {\n    var yielding = false\n    val list = ArrayList<Float>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun DoubleArray.dropWhile(predicate: (Double) -> Boolean): List<Double> {\n    var yielding = false\n    val list = ArrayList<Double>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun BooleanArray.dropWhile(predicate: (Boolean) -> Boolean): List<Boolean> {\n    var yielding = false\n    val list = ArrayList<Boolean>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun CharArray.dropWhile(predicate: (Char) -> Boolean): List<Char> {\n    var yielding = false\n    val list = ArrayList<Char>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun <T> Array<out T>.filter(predicate: (T) -> Boolean): List<T> {\n    return filterTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun ByteArray.filter(predicate: (Byte) -> Boolean): List<Byte> {\n    return filterTo(ArrayList<Byte>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun ShortArray.filter(predicate: (Short) -> Boolean): List<Short> {\n    return filterTo(ArrayList<Short>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun IntArray.filter(predicate: (Int) -> Boolean): List<Int> {\n    return filterTo(ArrayList<Int>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun LongArray.filter(predicate: (Long) -> Boolean): List<Long> {\n    return filterTo(ArrayList<Long>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun FloatArray.filter(predicate: (Float) -> Boolean): List<Float> {\n    return filterTo(ArrayList<Float>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun DoubleArray.filter(predicate: (Double) -> Boolean): List<Double> {\n    return filterTo(ArrayList<Double>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun BooleanArray.filter(predicate: (Boolean) -> Boolean): List<Boolean> {\n    return filterTo(ArrayList<Boolean>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun CharArray.filter(predicate: (Char) -> Boolean): List<Char> {\n    return filterTo(ArrayList<Char>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexed\n */\npublic inline fun <T> Array<out T>.filterIndexed(predicate: (index: Int, T) -> Boolean): List<T> {\n    return filterIndexedTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexed\n */\npublic inline fun ByteArray.filterIndexed(predicate: (index: Int, Byte) -> Boolean): List<Byte> {\n    return filterIndexedTo(ArrayList<Byte>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexed\n */\npublic inline fun ShortArray.filterIndexed(predicate: (index: Int, Short) -> Boolean): List<Short> {\n    return filterIndexedTo(ArrayList<Short>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexed\n */\npublic inline fun IntArray.filterIndexed(predicate: (index: Int, Int) -> Boolean): List<Int> {\n    return filterIndexedTo(ArrayList<Int>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexed\n */\npublic inline fun LongArray.filterIndexed(predicate: (index: Int, Long) -> Boolean): List<Long> {\n    return filterIndexedTo(ArrayList<Long>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexed\n */\npublic inline fun FloatArray.filterIndexed(predicate: (index: Int, Float) -> Boolean): List<Float> {\n    return filterIndexedTo(ArrayList<Float>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexed\n */\npublic inline fun DoubleArray.filterIndexed(predicate: (index: Int, Double) -> Boolean): List<Double> {\n    return filterIndexedTo(ArrayList<Double>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexed\n */\npublic inline fun BooleanArray.filterIndexed(predicate: (index: Int, Boolean) -> Boolean): List<Boolean> {\n    return filterIndexedTo(ArrayList<Boolean>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexed\n */\npublic inline fun CharArray.filterIndexed(predicate: (index: Int, Char) -> Boolean): List<Char> {\n    return filterIndexedTo(ArrayList<Char>(), predicate)\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexedTo\n */\npublic inline fun <T, C : MutableCollection<in T>> Array<out T>.filterIndexedTo(destination: C, predicate: (index: Int, T) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexedTo\n */\npublic inline fun <C : MutableCollection<in Byte>> ByteArray.filterIndexedTo(destination: C, predicate: (index: Int, Byte) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexedTo\n */\npublic inline fun <C : MutableCollection<in Short>> ShortArray.filterIndexedTo(destination: C, predicate: (index: Int, Short) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexedTo\n */\npublic inline fun <C : MutableCollection<in Int>> IntArray.filterIndexedTo(destination: C, predicate: (index: Int, Int) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexedTo\n */\npublic inline fun <C : MutableCollection<in Long>> LongArray.filterIndexedTo(destination: C, predicate: (index: Int, Long) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexedTo\n */\npublic inline fun <C : MutableCollection<in Float>> FloatArray.filterIndexedTo(destination: C, predicate: (index: Int, Float) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexedTo\n */\npublic inline fun <C : MutableCollection<in Double>> DoubleArray.filterIndexedTo(destination: C, predicate: (index: Int, Double) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexedTo\n */\npublic inline fun <C : MutableCollection<in Boolean>> BooleanArray.filterIndexedTo(destination: C, predicate: (index: Int, Boolean) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexedTo\n */\npublic inline fun <C : MutableCollection<in Char>> CharArray.filterIndexedTo(destination: C, predicate: (index: Int, Char) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Returns a list containing all elements that are instances of specified type parameter R.\n * \n * @sample samples.collections.Collections.Filtering.filterIsInstance\n */\npublic inline fun <reified R> Array<*>.filterIsInstance(): List<@kotlin.internal.NoInfer R> {\n    return filterIsInstanceTo(ArrayList<R>())\n}\n\n/**\n * Appends all elements that are instances of specified type parameter R to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterIsInstanceTo\n */\npublic inline fun <reified R, C : MutableCollection<in R>> Array<*>.filterIsInstanceTo(destination: C): C {\n    for (element in this) if (element is R) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun <T> Array<out T>.filterNot(predicate: (T) -> Boolean): List<T> {\n    return filterNotTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun ByteArray.filterNot(predicate: (Byte) -> Boolean): List<Byte> {\n    return filterNotTo(ArrayList<Byte>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun ShortArray.filterNot(predicate: (Short) -> Boolean): List<Short> {\n    return filterNotTo(ArrayList<Short>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun IntArray.filterNot(predicate: (Int) -> Boolean): List<Int> {\n    return filterNotTo(ArrayList<Int>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun LongArray.filterNot(predicate: (Long) -> Boolean): List<Long> {\n    return filterNotTo(ArrayList<Long>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun FloatArray.filterNot(predicate: (Float) -> Boolean): List<Float> {\n    return filterNotTo(ArrayList<Float>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun DoubleArray.filterNot(predicate: (Double) -> Boolean): List<Double> {\n    return filterNotTo(ArrayList<Double>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun BooleanArray.filterNot(predicate: (Boolean) -> Boolean): List<Boolean> {\n    return filterNotTo(ArrayList<Boolean>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun CharArray.filterNot(predicate: (Char) -> Boolean): List<Char> {\n    return filterNotTo(ArrayList<Char>(), predicate)\n}\n\n/**\n * Returns a list containing all elements that are not `null`.\n * \n * @sample samples.collections.Collections.Filtering.filterNotNull\n */\npublic fun <T : Any> Array<out T?>.filterNotNull(): List<T> {\n    return filterNotNullTo(ArrayList<T>())\n}\n\n/**\n * Appends all elements that are not `null` to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterNotNullTo\n */\npublic fun <C : MutableCollection<in T>, T : Any> Array<out T?>.filterNotNullTo(destination: C): C {\n    for (element in this) if (element != null) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <T, C : MutableCollection<in T>> Array<out T>.filterNotTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Byte>> ByteArray.filterNotTo(destination: C, predicate: (Byte) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Short>> ShortArray.filterNotTo(destination: C, predicate: (Short) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Int>> IntArray.filterNotTo(destination: C, predicate: (Int) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Long>> LongArray.filterNotTo(destination: C, predicate: (Long) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Float>> FloatArray.filterNotTo(destination: C, predicate: (Float) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Double>> DoubleArray.filterNotTo(destination: C, predicate: (Double) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Boolean>> BooleanArray.filterNotTo(destination: C, predicate: (Boolean) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Char>> CharArray.filterNotTo(destination: C, predicate: (Char) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <T, C : MutableCollection<in T>> Array<out T>.filterTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Byte>> ByteArray.filterTo(destination: C, predicate: (Byte) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Short>> ShortArray.filterTo(destination: C, predicate: (Short) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Int>> IntArray.filterTo(destination: C, predicate: (Int) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Long>> LongArray.filterTo(destination: C, predicate: (Long) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Float>> FloatArray.filterTo(destination: C, predicate: (Float) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Double>> DoubleArray.filterTo(destination: C, predicate: (Double) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Boolean>> BooleanArray.filterTo(destination: C, predicate: (Boolean) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Char>> CharArray.filterTo(destination: C, predicate: (Char) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun <T> Array<out T>.slice(indices: IntRange): List<T> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun ByteArray.slice(indices: IntRange): List<Byte> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun ShortArray.slice(indices: IntRange): List<Short> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun IntArray.slice(indices: IntRange): List<Int> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun LongArray.slice(indices: IntRange): List<Long> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun FloatArray.slice(indices: IntRange): List<Float> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun DoubleArray.slice(indices: IntRange): List<Double> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun BooleanArray.slice(indices: IntRange): List<Boolean> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun CharArray.slice(indices: IntRange): List<Char> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun <T> Array<out T>.slice(indices: Iterable<Int>): List<T> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<T>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun ByteArray.slice(indices: Iterable<Int>): List<Byte> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Byte>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun ShortArray.slice(indices: Iterable<Int>): List<Short> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Short>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun IntArray.slice(indices: Iterable<Int>): List<Int> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Int>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun LongArray.slice(indices: Iterable<Int>): List<Long> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Long>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun FloatArray.slice(indices: Iterable<Int>): List<Float> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Float>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun DoubleArray.slice(indices: Iterable<Int>): List<Double> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Double>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun BooleanArray.slice(indices: Iterable<Int>): List<Boolean> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Boolean>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun CharArray.slice(indices: Iterable<Int>): List<Char> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Char>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun <T> Array<T>.sliceArray(indices: Collection<Int>): Array<T> {\n    val result = arrayOfNulls(this, indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun ByteArray.sliceArray(indices: Collection<Int>): ByteArray {\n    val result = ByteArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun ShortArray.sliceArray(indices: Collection<Int>): ShortArray {\n    val result = ShortArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun IntArray.sliceArray(indices: Collection<Int>): IntArray {\n    val result = IntArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun LongArray.sliceArray(indices: Collection<Int>): LongArray {\n    val result = LongArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun FloatArray.sliceArray(indices: Collection<Int>): FloatArray {\n    val result = FloatArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun DoubleArray.sliceArray(indices: Collection<Int>): DoubleArray {\n    val result = DoubleArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun BooleanArray.sliceArray(indices: Collection<Int>): BooleanArray {\n    val result = BooleanArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun CharArray.sliceArray(indices: Collection<Int>): CharArray {\n    val result = CharArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun <T> Array<T>.sliceArray(indices: IntRange): Array<T> {\n    if (indices.isEmpty()) return copyOfRange(0, 0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun ByteArray.sliceArray(indices: IntRange): ByteArray {\n    if (indices.isEmpty()) return ByteArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun ShortArray.sliceArray(indices: IntRange): ShortArray {\n    if (indices.isEmpty()) return ShortArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun IntArray.sliceArray(indices: IntRange): IntArray {\n    if (indices.isEmpty()) return IntArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun LongArray.sliceArray(indices: IntRange): LongArray {\n    if (indices.isEmpty()) return LongArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun FloatArray.sliceArray(indices: IntRange): FloatArray {\n    if (indices.isEmpty()) return FloatArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun DoubleArray.sliceArray(indices: IntRange): DoubleArray {\n    if (indices.isEmpty()) return DoubleArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun BooleanArray.sliceArray(indices: IntRange): BooleanArray {\n    if (indices.isEmpty()) return BooleanArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun CharArray.sliceArray(indices: IntRange): CharArray {\n    if (indices.isEmpty()) return CharArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> Array<out T>.take(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<T>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun ByteArray.take(n: Int): List<Byte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Byte>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun ShortArray.take(n: Int): List<Short> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Short>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun IntArray.take(n: Int): List<Int> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Int>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun LongArray.take(n: Int): List<Long> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Long>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun FloatArray.take(n: Int): List<Float> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Float>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun DoubleArray.take(n: Int): List<Double> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Double>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun BooleanArray.take(n: Int): List<Boolean> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Boolean>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun CharArray.take(n: Int): List<Char> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Char>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> Array<out T>.takeLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<T>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun ByteArray.takeLast(n: Int): List<Byte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Byte>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun ShortArray.takeLast(n: Int): List<Short> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Short>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun IntArray.takeLast(n: Int): List<Int> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Int>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun LongArray.takeLast(n: Int): List<Long> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Long>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun FloatArray.takeLast(n: Int): List<Float> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Float>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun DoubleArray.takeLast(n: Int): List<Double> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Double>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun BooleanArray.takeLast(n: Int): List<Boolean> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Boolean>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun CharArray.takeLast(n: Int): List<Char> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Char>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun <T> Array<out T>.takeLastWhile(predicate: (T) -> Boolean): List<T> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun ByteArray.takeLastWhile(predicate: (Byte) -> Boolean): List<Byte> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun ShortArray.takeLastWhile(predicate: (Short) -> Boolean): List<Short> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun IntArray.takeLastWhile(predicate: (Int) -> Boolean): List<Int> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun LongArray.takeLastWhile(predicate: (Long) -> Boolean): List<Long> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun FloatArray.takeLastWhile(predicate: (Float) -> Boolean): List<Float> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun DoubleArray.takeLastWhile(predicate: (Double) -> Boolean): List<Double> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun BooleanArray.takeLastWhile(predicate: (Boolean) -> Boolean): List<Boolean> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun CharArray.takeLastWhile(predicate: (Char) -> Boolean): List<Char> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun <T> Array<out T>.takeWhile(predicate: (T) -> Boolean): List<T> {\n    val list = ArrayList<T>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun ByteArray.takeWhile(predicate: (Byte) -> Boolean): List<Byte> {\n    val list = ArrayList<Byte>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun ShortArray.takeWhile(predicate: (Short) -> Boolean): List<Short> {\n    val list = ArrayList<Short>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun IntArray.takeWhile(predicate: (Int) -> Boolean): List<Int> {\n    val list = ArrayList<Int>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun LongArray.takeWhile(predicate: (Long) -> Boolean): List<Long> {\n    val list = ArrayList<Long>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun FloatArray.takeWhile(predicate: (Float) -> Boolean): List<Float> {\n    val list = ArrayList<Float>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun DoubleArray.takeWhile(predicate: (Double) -> Boolean): List<Double> {\n    val list = ArrayList<Double>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun BooleanArray.takeWhile(predicate: (Boolean) -> Boolean): List<Boolean> {\n    val list = ArrayList<Boolean>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun CharArray.takeWhile(predicate: (Char) -> Boolean): List<Char> {\n    val list = ArrayList<Char>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun <T> Array<T>.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun ByteArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun ShortArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun IntArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun LongArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun FloatArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun DoubleArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun BooleanArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun CharArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements of the array in the specified range in-place.\n * \n * @param fromIndex the start of the range (inclusive) to reverse.\n * @param toIndex the end of the range (exclusive) to reverse.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun <T> Array<T>.reverse(fromIndex: Int, toIndex: Int): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val midPoint = (fromIndex + toIndex) / 2\n    if (fromIndex == midPoint) return\n    var reverseIndex = toIndex - 1\n    for (index in fromIndex until midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements of the array in the specified range in-place.\n * \n * @param fromIndex the start of the range (inclusive) to reverse.\n * @param toIndex the end of the range (exclusive) to reverse.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun ByteArray.reverse(fromIndex: Int, toIndex: Int): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val midPoint = (fromIndex + toIndex) / 2\n    if (fromIndex == midPoint) return\n    var reverseIndex = toIndex - 1\n    for (index in fromIndex until midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements of the array in the specified range in-place.\n * \n * @param fromIndex the start of the range (inclusive) to reverse.\n * @param toIndex the end of the range (exclusive) to reverse.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun ShortArray.reverse(fromIndex: Int, toIndex: Int): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val midPoint = (fromIndex + toIndex) / 2\n    if (fromIndex == midPoint) return\n    var reverseIndex = toIndex - 1\n    for (index in fromIndex until midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements of the array in the specified range in-place.\n * \n * @param fromIndex the start of the range (inclusive) to reverse.\n * @param toIndex the end of the range (exclusive) to reverse.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun IntArray.reverse(fromIndex: Int, toIndex: Int): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val midPoint = (fromIndex + toIndex) / 2\n    if (fromIndex == midPoint) return\n    var reverseIndex = toIndex - 1\n    for (index in fromIndex until midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements of the array in the specified range in-place.\n * \n * @param fromIndex the start of the range (inclusive) to reverse.\n * @param toIndex the end of the range (exclusive) to reverse.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun LongArray.reverse(fromIndex: Int, toIndex: Int): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val midPoint = (fromIndex + toIndex) / 2\n    if (fromIndex == midPoint) return\n    var reverseIndex = toIndex - 1\n    for (index in fromIndex until midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements of the array in the specified range in-place.\n * \n * @param fromIndex the start of the range (inclusive) to reverse.\n * @param toIndex the end of the range (exclusive) to reverse.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun FloatArray.reverse(fromIndex: Int, toIndex: Int): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val midPoint = (fromIndex + toIndex) / 2\n    if (fromIndex == midPoint) return\n    var reverseIndex = toIndex - 1\n    for (index in fromIndex until midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements of the array in the specified range in-place.\n * \n * @param fromIndex the start of the range (inclusive) to reverse.\n * @param toIndex the end of the range (exclusive) to reverse.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun DoubleArray.reverse(fromIndex: Int, toIndex: Int): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val midPoint = (fromIndex + toIndex) / 2\n    if (fromIndex == midPoint) return\n    var reverseIndex = toIndex - 1\n    for (index in fromIndex until midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements of the array in the specified range in-place.\n * \n * @param fromIndex the start of the range (inclusive) to reverse.\n * @param toIndex the end of the range (exclusive) to reverse.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun BooleanArray.reverse(fromIndex: Int, toIndex: Int): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val midPoint = (fromIndex + toIndex) / 2\n    if (fromIndex == midPoint) return\n    var reverseIndex = toIndex - 1\n    for (index in fromIndex until midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements of the array in the specified range in-place.\n * \n * @param fromIndex the start of the range (inclusive) to reverse.\n * @param toIndex the end of the range (exclusive) to reverse.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun CharArray.reverse(fromIndex: Int, toIndex: Int): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val midPoint = (fromIndex + toIndex) / 2\n    if (fromIndex == midPoint) return\n    var reverseIndex = toIndex - 1\n    for (index in fromIndex until midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun <T> Array<out T>.reversed(): List<T> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun ByteArray.reversed(): List<Byte> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun ShortArray.reversed(): List<Short> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun IntArray.reversed(): List<Int> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun LongArray.reversed(): List<Long> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun FloatArray.reversed(): List<Float> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun DoubleArray.reversed(): List<Double> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun BooleanArray.reversed(): List<Boolean> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun CharArray.reversed(): List<Char> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun <T> Array<T>.reversedArray(): Array<T> {\n    if (isEmpty()) return this\n    val result = arrayOfNulls(this, size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun ByteArray.reversedArray(): ByteArray {\n    if (isEmpty()) return this\n    val result = ByteArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun ShortArray.reversedArray(): ShortArray {\n    if (isEmpty()) return this\n    val result = ShortArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun IntArray.reversedArray(): IntArray {\n    if (isEmpty()) return this\n    val result = IntArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun LongArray.reversedArray(): LongArray {\n    if (isEmpty()) return this\n    val result = LongArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun FloatArray.reversedArray(): FloatArray {\n    if (isEmpty()) return this\n    val result = FloatArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun DoubleArray.reversedArray(): DoubleArray {\n    if (isEmpty()) return this\n    val result = DoubleArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun BooleanArray.reversedArray(): BooleanArray {\n    if (isEmpty()) return this\n    val result = BooleanArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun CharArray.reversedArray(): CharArray {\n    if (isEmpty()) return this\n    val result = CharArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Randomly shuffles elements in this array in-place.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T> Array<T>.shuffle(): Unit {\n    shuffle(Random)\n}\n\n/**\n * Randomly shuffles elements in this array in-place.\n */\n@SinceKotlin(\"1.4\")\npublic fun ByteArray.shuffle(): Unit {\n    shuffle(Random)\n}\n\n/**\n * Randomly shuffles elements in this array in-place.\n */\n@SinceKotlin(\"1.4\")\npublic fun ShortArray.shuffle(): Unit {\n    shuffle(Random)\n}\n\n/**\n * Randomly shuffles elements in this array in-place.\n */\n@SinceKotlin(\"1.4\")\npublic fun IntArray.shuffle(): Unit {\n    shuffle(Random)\n}\n\n/**\n * Randomly shuffles elements in this array in-place.\n */\n@SinceKotlin(\"1.4\")\npublic fun LongArray.shuffle(): Unit {\n    shuffle(Random)\n}\n\n/**\n * Randomly shuffles elements in this array in-place.\n */\n@SinceKotlin(\"1.4\")\npublic fun FloatArray.shuffle(): Unit {\n    shuffle(Random)\n}\n\n/**\n * Randomly shuffles elements in this array in-place.\n */\n@SinceKotlin(\"1.4\")\npublic fun DoubleArray.shuffle(): Unit {\n    shuffle(Random)\n}\n\n/**\n * Randomly shuffles elements in this array in-place.\n */\n@SinceKotlin(\"1.4\")\npublic fun BooleanArray.shuffle(): Unit {\n    shuffle(Random)\n}\n\n/**\n * Randomly shuffles elements in this array in-place.\n */\n@SinceKotlin(\"1.4\")\npublic fun CharArray.shuffle(): Unit {\n    shuffle(Random)\n}\n\n/**\n * Randomly shuffles elements in this array in-place using the specified [random] instance as the source of randomness.\n * \n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.4\")\npublic fun <T> Array<T>.shuffle(random: Random): Unit {\n    for (i in lastIndex downTo 1) {\n        val j = random.nextInt(i + 1)\n        val copy = this[i]\n        this[i] = this[j]\n        this[j] = copy\n    }\n}\n\n/**\n * Randomly shuffles elements in this array in-place using the specified [random] instance as the source of randomness.\n * \n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.4\")\npublic fun ByteArray.shuffle(random: Random): Unit {\n    for (i in lastIndex downTo 1) {\n        val j = random.nextInt(i + 1)\n        val copy = this[i]\n        this[i] = this[j]\n        this[j] = copy\n    }\n}\n\n/**\n * Randomly shuffles elements in this array in-place using the specified [random] instance as the source of randomness.\n * \n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.4\")\npublic fun ShortArray.shuffle(random: Random): Unit {\n    for (i in lastIndex downTo 1) {\n        val j = random.nextInt(i + 1)\n        val copy = this[i]\n        this[i] = this[j]\n        this[j] = copy\n    }\n}\n\n/**\n * Randomly shuffles elements in this array in-place using the specified [random] instance as the source of randomness.\n * \n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.4\")\npublic fun IntArray.shuffle(random: Random): Unit {\n    for (i in lastIndex downTo 1) {\n        val j = random.nextInt(i + 1)\n        val copy = this[i]\n        this[i] = this[j]\n        this[j] = copy\n    }\n}\n\n/**\n * Randomly shuffles elements in this array in-place using the specified [random] instance as the source of randomness.\n * \n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.4\")\npublic fun LongArray.shuffle(random: Random): Unit {\n    for (i in lastIndex downTo 1) {\n        val j = random.nextInt(i + 1)\n        val copy = this[i]\n        this[i] = this[j]\n        this[j] = copy\n    }\n}\n\n/**\n * Randomly shuffles elements in this array in-place using the specified [random] instance as the source of randomness.\n * \n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.4\")\npublic fun FloatArray.shuffle(random: Random): Unit {\n    for (i in lastIndex downTo 1) {\n        val j = random.nextInt(i + 1)\n        val copy = this[i]\n        this[i] = this[j]\n        this[j] = copy\n    }\n}\n\n/**\n * Randomly shuffles elements in this array in-place using the specified [random] instance as the source of randomness.\n * \n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.4\")\npublic fun DoubleArray.shuffle(random: Random): Unit {\n    for (i in lastIndex downTo 1) {\n        val j = random.nextInt(i + 1)\n        val copy = this[i]\n        this[i] = this[j]\n        this[j] = copy\n    }\n}\n\n/**\n * Randomly shuffles elements in this array in-place using the specified [random] instance as the source of randomness.\n * \n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.4\")\npublic fun BooleanArray.shuffle(random: Random): Unit {\n    for (i in lastIndex downTo 1) {\n        val j = random.nextInt(i + 1)\n        val copy = this[i]\n        this[i] = this[j]\n        this[j] = copy\n    }\n}\n\n/**\n * Randomly shuffles elements in this array in-place using the specified [random] instance as the source of randomness.\n * \n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.4\")\npublic fun CharArray.shuffle(random: Random): Unit {\n    for (i in lastIndex downTo 1) {\n        val j = random.nextInt(i + 1)\n        val copy = this[i]\n        this[i] = this[j]\n        this[j] = copy\n    }\n}\n\n/**\n * Sorts elements in the array in-place according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.sortBy(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareBy(selector))\n}\n\n/**\n * Sorts elements in the array in-place descending according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.sortByDescending(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareByDescending(selector))\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Array<out T>.sortDescending(): Unit {\n    sortWith(reverseOrder())\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun ByteArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun ShortArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun IntArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun LongArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun FloatArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun DoubleArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun CharArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Array<out T>.sorted(): List<T> {\n    return sortedArray().asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun ByteArray.sorted(): List<Byte> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun ShortArray.sorted(): List<Short> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun IntArray.sorted(): List<Int> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun LongArray.sorted(): List<Long> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun FloatArray.sorted(): List<Float> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun DoubleArray.sorted(): List<Double> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun CharArray.sorted(): List<Char> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Array<T>.sortedArray(): Array<T> {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun ByteArray.sortedArray(): ByteArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun ShortArray.sortedArray(): ShortArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun IntArray.sortedArray(): IntArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun LongArray.sortedArray(): LongArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun FloatArray.sortedArray(): FloatArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun DoubleArray.sortedArray(): DoubleArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun CharArray.sortedArray(): CharArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Array<T>.sortedArrayDescending(): Array<T> {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortWith(reverseOrder()) }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun ByteArray.sortedArrayDescending(): ByteArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun ShortArray.sortedArrayDescending(): ShortArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun IntArray.sortedArrayDescending(): IntArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun LongArray.sortedArrayDescending(): LongArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun FloatArray.sortedArrayDescending(): FloatArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun DoubleArray.sortedArrayDescending(): DoubleArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun CharArray.sortedArrayDescending(): CharArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according the specified [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T> Array<out T>.sortedArrayWith(comparator: Comparator<in T>): Array<out T> {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortWith(comparator) }\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n * \n * @sample samples.collections.Collections.Sorting.sortedBy\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.sortedBy(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * @sample samples.collections.Collections.Sorting.sortedBy\n */\npublic inline fun <R : Comparable<R>> ByteArray.sortedBy(crossinline selector: (Byte) -> R?): List<Byte> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * @sample samples.collections.Collections.Sorting.sortedBy\n */\npublic inline fun <R : Comparable<R>> ShortArray.sortedBy(crossinline selector: (Short) -> R?): List<Short> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * @sample samples.collections.Collections.Sorting.sortedBy\n */\npublic inline fun <R : Comparable<R>> IntArray.sortedBy(crossinline selector: (Int) -> R?): List<Int> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * @sample samples.collections.Collections.Sorting.sortedBy\n */\npublic inline fun <R : Comparable<R>> LongArray.sortedBy(crossinline selector: (Long) -> R?): List<Long> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * @sample samples.collections.Collections.Sorting.sortedBy\n */\npublic inline fun <R : Comparable<R>> FloatArray.sortedBy(crossinline selector: (Float) -> R?): List<Float> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * @sample samples.collections.Collections.Sorting.sortedBy\n */\npublic inline fun <R : Comparable<R>> DoubleArray.sortedBy(crossinline selector: (Double) -> R?): List<Double> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * @sample samples.collections.Collections.Sorting.sortedBy\n */\npublic inline fun <R : Comparable<R>> BooleanArray.sortedBy(crossinline selector: (Boolean) -> R?): List<Boolean> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * @sample samples.collections.Collections.Sorting.sortedBy\n */\npublic inline fun <R : Comparable<R>> CharArray.sortedBy(crossinline selector: (Char) -> R?): List<Char> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.sortedByDescending(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> ByteArray.sortedByDescending(crossinline selector: (Byte) -> R?): List<Byte> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> ShortArray.sortedByDescending(crossinline selector: (Short) -> R?): List<Short> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> IntArray.sortedByDescending(crossinline selector: (Int) -> R?): List<Int> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> LongArray.sortedByDescending(crossinline selector: (Long) -> R?): List<Long> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> FloatArray.sortedByDescending(crossinline selector: (Float) -> R?): List<Float> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> DoubleArray.sortedByDescending(crossinline selector: (Double) -> R?): List<Double> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> BooleanArray.sortedByDescending(crossinline selector: (Boolean) -> R?): List<Boolean> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> CharArray.sortedByDescending(crossinline selector: (Char) -> R?): List<Char> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Array<out T>.sortedDescending(): List<T> {\n    return sortedWith(reverseOrder())\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun ByteArray.sortedDescending(): List<Byte> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun ShortArray.sortedDescending(): List<Short> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun IntArray.sortedDescending(): List<Int> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun LongArray.sortedDescending(): List<Long> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun FloatArray.sortedDescending(): List<Float> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun DoubleArray.sortedDescending(): List<Double> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun CharArray.sortedDescending(): List<Char> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T> Array<out T>.sortedWith(comparator: Comparator<in T>): List<T> {\n    return sortedArrayWith(comparator).asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun ByteArray.sortedWith(comparator: Comparator<in Byte>): List<Byte> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun ShortArray.sortedWith(comparator: Comparator<in Short>): List<Short> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun IntArray.sortedWith(comparator: Comparator<in Int>): List<Int> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun LongArray.sortedWith(comparator: Comparator<in Long>): List<Long> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun FloatArray.sortedWith(comparator: Comparator<in Float>): List<Float> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun DoubleArray.sortedWith(comparator: Comparator<in Double>): List<Double> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun BooleanArray.sortedWith(comparator: Comparator<in Boolean>): List<Boolean> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun CharArray.sortedWith(comparator: Comparator<in Char>): List<Char> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun <T> Array<out T>.asList(): List<T>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun ByteArray.asList(): List<Byte>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun ShortArray.asList(): List<Short>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun IntArray.asList(): List<Int>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun LongArray.asList(): List<Long>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun FloatArray.asList(): List<Float>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun DoubleArray.asList(): List<Double>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun BooleanArray.asList(): List<Boolean>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun CharArray.asList(): List<Char>\n\n/**\n * Returns `true` if the two specified arrays are *deeply* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * If two corresponding elements are nested arrays, they are also compared deeply.\n * If any of arrays contains itself on any nesting level the behavior is undefined.\n * \n * The elements of other types are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.LowPriorityInOverloadResolution\npublic expect infix fun <T> Array<out T>.contentDeepEquals(other: Array<out T>): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *deeply* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The specified arrays are also considered deeply equal if both are `null`.\n * \n * If two corresponding elements are nested arrays, they are also compared deeply.\n * If any of arrays contains itself on any nesting level the behavior is undefined.\n * \n * The elements of other types are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\npublic expect infix fun <T> Array<out T>?.contentDeepEquals(other: Array<out T>?): Boolean\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level the behavior is undefined.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.LowPriorityInOverloadResolution\npublic expect fun <T> Array<out T>.contentDeepHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level the behavior is undefined.\n */\n@SinceKotlin(\"1.4\")\npublic expect fun <T> Array<out T>?.contentDeepHashCode(): Int\n\n/**\n * Returns a string representation of the contents of this array as if it is a [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level that reference\n * is rendered as `\"[...]\"` to prevent recursion.\n * \n * @sample samples.collections.Arrays.ContentOperations.contentDeepToString\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.LowPriorityInOverloadResolution\npublic expect fun <T> Array<out T>.contentDeepToString(): String\n\n/**\n * Returns a string representation of the contents of this array as if it is a [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level that reference\n * is rendered as `\"[...]\"` to prevent recursion.\n * \n * @sample samples.collections.Arrays.ContentOperations.contentDeepToString\n */\n@SinceKotlin(\"1.4\")\npublic expect fun <T> Array<out T>?.contentDeepToString(): String\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect infix fun <T> Array<out T>.contentEquals(other: Array<out T>): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect infix fun ByteArray.contentEquals(other: ByteArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect infix fun ShortArray.contentEquals(other: ShortArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect infix fun IntArray.contentEquals(other: IntArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect infix fun LongArray.contentEquals(other: LongArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect infix fun FloatArray.contentEquals(other: FloatArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect infix fun DoubleArray.contentEquals(other: DoubleArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect infix fun BooleanArray.contentEquals(other: BooleanArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect infix fun CharArray.contentEquals(other: CharArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\npublic expect infix fun <T> Array<out T>?.contentEquals(other: Array<out T>?): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\npublic expect infix fun ByteArray?.contentEquals(other: ByteArray?): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\npublic expect infix fun ShortArray?.contentEquals(other: ShortArray?): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\npublic expect infix fun IntArray?.contentEquals(other: IntArray?): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\npublic expect infix fun LongArray?.contentEquals(other: LongArray?): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\npublic expect infix fun FloatArray?.contentEquals(other: FloatArray?): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\npublic expect infix fun DoubleArray?.contentEquals(other: DoubleArray?): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\npublic expect infix fun BooleanArray?.contentEquals(other: BooleanArray?): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\npublic expect infix fun CharArray?.contentEquals(other: CharArray?): Boolean\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun <T> Array<out T>.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun ByteArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun ShortArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun IntArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun LongArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun FloatArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun DoubleArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun BooleanArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun CharArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\npublic expect fun <T> Array<out T>?.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\npublic expect fun ByteArray?.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\npublic expect fun ShortArray?.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\npublic expect fun IntArray?.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\npublic expect fun LongArray?.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\npublic expect fun FloatArray?.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\npublic expect fun DoubleArray?.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\npublic expect fun BooleanArray?.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\npublic expect fun CharArray?.contentHashCode(): Int\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun <T> Array<out T>.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun ByteArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun ShortArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun IntArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun LongArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun FloatArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun DoubleArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun BooleanArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun CharArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\npublic expect fun <T> Array<out T>?.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\npublic expect fun ByteArray?.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\npublic expect fun ShortArray?.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\npublic expect fun IntArray?.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\npublic expect fun LongArray?.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\npublic expect fun FloatArray?.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\npublic expect fun DoubleArray?.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\npublic expect fun BooleanArray?.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\npublic expect fun CharArray?.contentToString(): String\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun <T> Array<out T>.copyInto(destination: Array<T>, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): Array<T>\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun ByteArray.copyInto(destination: ByteArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): ByteArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun ShortArray.copyInto(destination: ShortArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): ShortArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun IntArray.copyInto(destination: IntArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): IntArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun LongArray.copyInto(destination: LongArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): LongArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun FloatArray.copyInto(destination: FloatArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): FloatArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun DoubleArray.copyInto(destination: DoubleArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): DoubleArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun BooleanArray.copyInto(destination: BooleanArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): BooleanArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun CharArray.copyInto(destination: CharArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): CharArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect fun <T> Array<T>.copyOf(): Array<T>\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun ByteArray.copyOf(): ByteArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun ShortArray.copyOf(): ShortArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun IntArray.copyOf(): IntArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun LongArray.copyOf(): LongArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun FloatArray.copyOf(): FloatArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun DoubleArray.copyOf(): DoubleArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun BooleanArray.copyOf(): BooleanArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun CharArray.copyOf(): CharArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun ByteArray.copyOf(newSize: Int): ByteArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun ShortArray.copyOf(newSize: Int): ShortArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun IntArray.copyOf(newSize: Int): IntArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun LongArray.copyOf(newSize: Int): LongArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun FloatArray.copyOf(newSize: Int): FloatArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun DoubleArray.copyOf(newSize: Int): DoubleArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with `false` values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with `false` values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun BooleanArray.copyOf(newSize: Int): BooleanArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with null char (`\\u0000`) values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with null char (`\\u0000`) values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun CharArray.copyOf(newSize: Int): CharArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with `null` values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with `null` values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizingCopyOf\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect fun <T> Array<T>.copyOf(newSize: Int): Array<T?>\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect fun <T> Array<T>.copyOfRange(fromIndex: Int, toIndex: Int): Array<T>\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic expect fun ByteArray.copyOfRange(fromIndex: Int, toIndex: Int): ByteArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic expect fun ShortArray.copyOfRange(fromIndex: Int, toIndex: Int): ShortArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic expect fun IntArray.copyOfRange(fromIndex: Int, toIndex: Int): IntArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic expect fun LongArray.copyOfRange(fromIndex: Int, toIndex: Int): LongArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic expect fun FloatArray.copyOfRange(fromIndex: Int, toIndex: Int): FloatArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic expect fun DoubleArray.copyOfRange(fromIndex: Int, toIndex: Int): DoubleArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic expect fun BooleanArray.copyOfRange(fromIndex: Int, toIndex: Int): BooleanArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic expect fun CharArray.copyOfRange(fromIndex: Int, toIndex: Int): CharArray\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun <T> Array<T>.fill(element: T, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun ByteArray.fill(element: Byte, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun ShortArray.fill(element: Short, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun IntArray.fill(element: Int, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun LongArray.fill(element: Long, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun FloatArray.fill(element: Float, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun DoubleArray.fill(element: Double, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun BooleanArray.fill(element: Boolean, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun CharArray.fill(element: Char, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val <T> Array<out T>.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val ByteArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val ShortArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val IntArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val LongArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val FloatArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val DoubleArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val BooleanArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val CharArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns the last valid index for the array.\n */\npublic val <T> Array<out T>.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val ByteArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val ShortArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val IntArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val LongArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val FloatArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val DoubleArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val BooleanArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val CharArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect operator fun <T> Array<T>.plus(element: T): Array<T>\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun ByteArray.plus(element: Byte): ByteArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun ShortArray.plus(element: Short): ShortArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun IntArray.plus(element: Int): IntArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun LongArray.plus(element: Long): LongArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun FloatArray.plus(element: Float): FloatArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun DoubleArray.plus(element: Double): DoubleArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun BooleanArray.plus(element: Boolean): BooleanArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun CharArray.plus(element: Char): CharArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect operator fun <T> Array<T>.plus(elements: Collection<T>): Array<T>\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun ByteArray.plus(elements: Collection<Byte>): ByteArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun ShortArray.plus(elements: Collection<Short>): ShortArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun IntArray.plus(elements: Collection<Int>): IntArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun LongArray.plus(elements: Collection<Long>): LongArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun FloatArray.plus(elements: Collection<Float>): FloatArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun DoubleArray.plus(elements: Collection<Double>): DoubleArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun BooleanArray.plus(elements: Collection<Boolean>): BooleanArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun CharArray.plus(elements: Collection<Char>): CharArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect operator fun <T> Array<T>.plus(elements: Array<out T>): Array<T>\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun ByteArray.plus(elements: ByteArray): ByteArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun ShortArray.plus(elements: ShortArray): ShortArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun IntArray.plus(elements: IntArray): IntArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun LongArray.plus(elements: LongArray): LongArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun FloatArray.plus(elements: FloatArray): FloatArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun DoubleArray.plus(elements: DoubleArray): DoubleArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun BooleanArray.plus(elements: BooleanArray): BooleanArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun CharArray.plus(elements: CharArray): CharArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect fun <T> Array<T>.plusElement(element: T): Array<T>\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun IntArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun LongArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun ByteArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun ShortArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun DoubleArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun FloatArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun CharArray.sort(): Unit\n\n/**\n * Sorts the array in-place according to the natural order of its elements.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n * \n * @sample samples.collections.Arrays.Sorting.sortArrayOfComparable\n */\npublic expect fun <T : Comparable<T>> Array<out T>.sort(): Unit\n\n/**\n * Sorts a range in the array in-place.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArrayOfComparable\n */\n@SinceKotlin(\"1.4\")\npublic expect fun <T : Comparable<T>> Array<out T>.sort(fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\npublic expect fun ByteArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\npublic expect fun ShortArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\npublic expect fun IntArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\npublic expect fun LongArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\npublic expect fun FloatArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\npublic expect fun DoubleArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\npublic expect fun CharArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Sorts elements of the array in the specified range in-place.\n * The elements are sorted descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n * \n * @param fromIndex the start of the range (inclusive) to sort.\n * @param toIndex the end of the range (exclusive) to sort.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun <T : Comparable<T>> Array<out T>.sortDescending(fromIndex: Int, toIndex: Int): Unit {\n    sortWith(reverseOrder(), fromIndex, toIndex)\n}\n\n/**\n * Sorts elements of the array in the specified range in-place.\n * The elements are sorted descending according to their natural sort order.\n * \n * @param fromIndex the start of the range (inclusive) to sort.\n * @param toIndex the end of the range (exclusive) to sort.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun ByteArray.sortDescending(fromIndex: Int, toIndex: Int): Unit {\n    sort(fromIndex, toIndex)\n    reverse(fromIndex, toIndex)\n}\n\n/**\n * Sorts elements of the array in the specified range in-place.\n * The elements are sorted descending according to their natural sort order.\n * \n * @param fromIndex the start of the range (inclusive) to sort.\n * @param toIndex the end of the range (exclusive) to sort.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun ShortArray.sortDescending(fromIndex: Int, toIndex: Int): Unit {\n    sort(fromIndex, toIndex)\n    reverse(fromIndex, toIndex)\n}\n\n/**\n * Sorts elements of the array in the specified range in-place.\n * The elements are sorted descending according to their natural sort order.\n * \n * @param fromIndex the start of the range (inclusive) to sort.\n * @param toIndex the end of the range (exclusive) to sort.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun IntArray.sortDescending(fromIndex: Int, toIndex: Int): Unit {\n    sort(fromIndex, toIndex)\n    reverse(fromIndex, toIndex)\n}\n\n/**\n * Sorts elements of the array in the specified range in-place.\n * The elements are sorted descending according to their natural sort order.\n * \n * @param fromIndex the start of the range (inclusive) to sort.\n * @param toIndex the end of the range (exclusive) to sort.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun LongArray.sortDescending(fromIndex: Int, toIndex: Int): Unit {\n    sort(fromIndex, toIndex)\n    reverse(fromIndex, toIndex)\n}\n\n/**\n * Sorts elements of the array in the specified range in-place.\n * The elements are sorted descending according to their natural sort order.\n * \n * @param fromIndex the start of the range (inclusive) to sort.\n * @param toIndex the end of the range (exclusive) to sort.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun FloatArray.sortDescending(fromIndex: Int, toIndex: Int): Unit {\n    sort(fromIndex, toIndex)\n    reverse(fromIndex, toIndex)\n}\n\n/**\n * Sorts elements of the array in the specified range in-place.\n * The elements are sorted descending according to their natural sort order.\n * \n * @param fromIndex the start of the range (inclusive) to sort.\n * @param toIndex the end of the range (exclusive) to sort.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun DoubleArray.sortDescending(fromIndex: Int, toIndex: Int): Unit {\n    sort(fromIndex, toIndex)\n    reverse(fromIndex, toIndex)\n}\n\n/**\n * Sorts elements of the array in the specified range in-place.\n * The elements are sorted descending according to their natural sort order.\n * \n * @param fromIndex the start of the range (inclusive) to sort.\n * @param toIndex the end of the range (exclusive) to sort.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun CharArray.sortDescending(fromIndex: Int, toIndex: Int): Unit {\n    sort(fromIndex, toIndex)\n    reverse(fromIndex, toIndex)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic expect fun <T> Array<out T>.sortWith(comparator: Comparator<in T>): Unit\n\n/**\n * Sorts a range in the array in-place with the given [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic expect fun <T> Array<out T>.sortWith(comparator: Comparator<in T>, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Returns an array of Boolean containing all of the elements of this generic array.\n */\npublic fun Array<out Boolean>.toBooleanArray(): BooleanArray {\n    return BooleanArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Byte containing all of the elements of this generic array.\n */\npublic fun Array<out Byte>.toByteArray(): ByteArray {\n    return ByteArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Char containing all of the elements of this generic array.\n */\npublic fun Array<out Char>.toCharArray(): CharArray {\n    return CharArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Double containing all of the elements of this generic array.\n */\npublic fun Array<out Double>.toDoubleArray(): DoubleArray {\n    return DoubleArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Float containing all of the elements of this generic array.\n */\npublic fun Array<out Float>.toFloatArray(): FloatArray {\n    return FloatArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Int containing all of the elements of this generic array.\n */\npublic fun Array<out Int>.toIntArray(): IntArray {\n    return IntArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Long containing all of the elements of this generic array.\n */\npublic fun Array<out Long>.toLongArray(): LongArray {\n    return LongArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Short containing all of the elements of this generic array.\n */\npublic fun Array<out Short>.toShortArray(): ShortArray {\n    return ShortArray(size) { index -> this[index] }\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun ByteArray.toTypedArray(): Array<Byte>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun ShortArray.toTypedArray(): Array<Short>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun IntArray.toTypedArray(): Array<Int>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun LongArray.toTypedArray(): Array<Long>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun FloatArray.toTypedArray(): Array<Float>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun DoubleArray.toTypedArray(): Array<Double>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun BooleanArray.toTypedArray(): Array<Boolean>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun CharArray.toTypedArray(): Array<Char>\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <T, K, V> Array<out T>.associate(transform: (T) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> ByteArray.associate(transform: (Byte) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> ShortArray.associate(transform: (Short) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> IntArray.associate(transform: (Int) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> LongArray.associate(transform: (Long) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> FloatArray.associate(transform: (Float) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> DoubleArray.associate(transform: (Double) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> BooleanArray.associate(transform: (Boolean) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> CharArray.associate(transform: (Char) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <T, K> Array<out T>.associateBy(keySelector: (T) -> K): Map<K, T> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, T>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> ByteArray.associateBy(keySelector: (Byte) -> K): Map<K, Byte> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Byte>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> ShortArray.associateBy(keySelector: (Short) -> K): Map<K, Short> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Short>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> IntArray.associateBy(keySelector: (Int) -> K): Map<K, Int> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Int>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> LongArray.associateBy(keySelector: (Long) -> K): Map<K, Long> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Long>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> FloatArray.associateBy(keySelector: (Float) -> K): Map<K, Float> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Float>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> DoubleArray.associateBy(keySelector: (Double) -> K): Map<K, Double> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Double>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> BooleanArray.associateBy(keySelector: (Boolean) -> K): Map<K, Boolean> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Boolean>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> CharArray.associateBy(keySelector: (Char) -> K): Map<K, Char> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Char>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <T, K, V> Array<out T>.associateBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> ByteArray.associateBy(keySelector: (Byte) -> K, valueTransform: (Byte) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> ShortArray.associateBy(keySelector: (Short) -> K, valueTransform: (Short) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> IntArray.associateBy(keySelector: (Int) -> K, valueTransform: (Int) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> LongArray.associateBy(keySelector: (Long) -> K, valueTransform: (Long) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> FloatArray.associateBy(keySelector: (Float) -> K, valueTransform: (Float) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> DoubleArray.associateBy(keySelector: (Double) -> K, valueTransform: (Double) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> BooleanArray.associateBy(keySelector: (Boolean) -> K, valueTransform: (Boolean) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> CharArray.associateBy(keySelector: (Char) -> K, valueTransform: (Char) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <T, K, M : MutableMap<in K, in T>> Array<out T>.associateByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Byte>> ByteArray.associateByTo(destination: M, keySelector: (Byte) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Short>> ShortArray.associateByTo(destination: M, keySelector: (Short) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Int>> IntArray.associateByTo(destination: M, keySelector: (Int) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Long>> LongArray.associateByTo(destination: M, keySelector: (Long) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Float>> FloatArray.associateByTo(destination: M, keySelector: (Float) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Double>> DoubleArray.associateByTo(destination: M, keySelector: (Double) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Boolean>> BooleanArray.associateByTo(destination: M, keySelector: (Boolean) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Char>> CharArray.associateByTo(destination: M, keySelector: (Char) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Array<out T>.associateByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> ByteArray.associateByTo(destination: M, keySelector: (Byte) -> K, valueTransform: (Byte) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> ShortArray.associateByTo(destination: M, keySelector: (Short) -> K, valueTransform: (Short) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> IntArray.associateByTo(destination: M, keySelector: (Int) -> K, valueTransform: (Int) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> LongArray.associateByTo(destination: M, keySelector: (Long) -> K, valueTransform: (Long) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> FloatArray.associateByTo(destination: M, keySelector: (Float) -> K, valueTransform: (Float) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> DoubleArray.associateByTo(destination: M, keySelector: (Double) -> K, valueTransform: (Double) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> BooleanArray.associateByTo(destination: M, keySelector: (Boolean) -> K, valueTransform: (Boolean) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> CharArray.associateByTo(destination: M, keySelector: (Char) -> K, valueTransform: (Char) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Array<out T>.associateTo(destination: M, transform: (T) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> ByteArray.associateTo(destination: M, transform: (Byte) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> ShortArray.associateTo(destination: M, transform: (Short) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> IntArray.associateTo(destination: M, transform: (Int) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> LongArray.associateTo(destination: M, transform: (Long) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> FloatArray.associateTo(destination: M, transform: (Float) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> DoubleArray.associateTo(destination: M, transform: (Double) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> BooleanArray.associateTo(destination: M, transform: (Boolean) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> CharArray.associateTo(destination: M, transform: (Char) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Returns a [Map] where keys are elements from the given array and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <K, V> Array<out K>.associateWith(valueSelector: (K) -> V): Map<K, V> {\n    val result = LinkedHashMap<K, V>(mapCapacity(size).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Returns a [Map] where keys are elements from the given array and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V> ByteArray.associateWith(valueSelector: (Byte) -> V): Map<Byte, V> {\n    val result = LinkedHashMap<Byte, V>(mapCapacity(size).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Returns a [Map] where keys are elements from the given array and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V> ShortArray.associateWith(valueSelector: (Short) -> V): Map<Short, V> {\n    val result = LinkedHashMap<Short, V>(mapCapacity(size).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Returns a [Map] where keys are elements from the given array and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V> IntArray.associateWith(valueSelector: (Int) -> V): Map<Int, V> {\n    val result = LinkedHashMap<Int, V>(mapCapacity(size).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Returns a [Map] where keys are elements from the given array and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V> LongArray.associateWith(valueSelector: (Long) -> V): Map<Long, V> {\n    val result = LinkedHashMap<Long, V>(mapCapacity(size).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Returns a [Map] where keys are elements from the given array and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V> FloatArray.associateWith(valueSelector: (Float) -> V): Map<Float, V> {\n    val result = LinkedHashMap<Float, V>(mapCapacity(size).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Returns a [Map] where keys are elements from the given array and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V> DoubleArray.associateWith(valueSelector: (Double) -> V): Map<Double, V> {\n    val result = LinkedHashMap<Double, V>(mapCapacity(size).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Returns a [Map] where keys are elements from the given array and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V> BooleanArray.associateWith(valueSelector: (Boolean) -> V): Map<Boolean, V> {\n    val result = LinkedHashMap<Boolean, V>(mapCapacity(size).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Returns a [Map] where keys are elements from the given array and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V> CharArray.associateWith(valueSelector: (Char) -> V): Map<Char, V> {\n    val result = LinkedHashMap<Char, V>(mapCapacity(size.coerceAtMost(128)).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given array,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n * \n * @sample samples.collections.Collections.Transformations.associateWithTo\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <K, V, M : MutableMap<in K, in V>> Array<out K>.associateWithTo(destination: M, valueSelector: (K) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given array,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n * \n * @sample samples.collections.Collections.Transformations.associateWithTo\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V, M : MutableMap<in Byte, in V>> ByteArray.associateWithTo(destination: M, valueSelector: (Byte) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given array,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n * \n * @sample samples.collections.Collections.Transformations.associateWithTo\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V, M : MutableMap<in Short, in V>> ShortArray.associateWithTo(destination: M, valueSelector: (Short) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given array,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n * \n * @sample samples.collections.Collections.Transformations.associateWithTo\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V, M : MutableMap<in Int, in V>> IntArray.associateWithTo(destination: M, valueSelector: (Int) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given array,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n * \n * @sample samples.collections.Collections.Transformations.associateWithTo\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V, M : MutableMap<in Long, in V>> LongArray.associateWithTo(destination: M, valueSelector: (Long) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given array,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n * \n * @sample samples.collections.Collections.Transformations.associateWithTo\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V, M : MutableMap<in Float, in V>> FloatArray.associateWithTo(destination: M, valueSelector: (Float) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given array,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n * \n * @sample samples.collections.Collections.Transformations.associateWithTo\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V, M : MutableMap<in Double, in V>> DoubleArray.associateWithTo(destination: M, valueSelector: (Double) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given array,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n * \n * @sample samples.collections.Collections.Transformations.associateWithTo\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V, M : MutableMap<in Boolean, in V>> BooleanArray.associateWithTo(destination: M, valueSelector: (Boolean) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given array,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n * \n * @sample samples.collections.Collections.Transformations.associateWithTo\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V, M : MutableMap<in Char, in V>> CharArray.associateWithTo(destination: M, valueSelector: (Char) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <T, C : MutableCollection<in T>> Array<out T>.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Byte>> ByteArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Short>> ShortArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Int>> IntArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Long>> LongArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Float>> FloatArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Double>> DoubleArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Boolean>> BooleanArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Char>> CharArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Returns a new [HashSet] of all elements.\n */\npublic fun <T> Array<out T>.toHashSet(): HashSet<T> {\n    return toCollection(HashSet<T>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [HashSet] of all elements.\n */\npublic fun ByteArray.toHashSet(): HashSet<Byte> {\n    return toCollection(HashSet<Byte>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [HashSet] of all elements.\n */\npublic fun ShortArray.toHashSet(): HashSet<Short> {\n    return toCollection(HashSet<Short>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [HashSet] of all elements.\n */\npublic fun IntArray.toHashSet(): HashSet<Int> {\n    return toCollection(HashSet<Int>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [HashSet] of all elements.\n */\npublic fun LongArray.toHashSet(): HashSet<Long> {\n    return toCollection(HashSet<Long>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [HashSet] of all elements.\n */\npublic fun FloatArray.toHashSet(): HashSet<Float> {\n    return toCollection(HashSet<Float>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [HashSet] of all elements.\n */\npublic fun DoubleArray.toHashSet(): HashSet<Double> {\n    return toCollection(HashSet<Double>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [HashSet] of all elements.\n */\npublic fun BooleanArray.toHashSet(): HashSet<Boolean> {\n    return toCollection(HashSet<Boolean>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [HashSet] of all elements.\n */\npublic fun CharArray.toHashSet(): HashSet<Char> {\n    return toCollection(HashSet<Char>(mapCapacity(size.coerceAtMost(128))))\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun <T> Array<out T>.toList(): List<T> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun ByteArray.toList(): List<Byte> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun ShortArray.toList(): List<Short> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun IntArray.toList(): List<Int> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun LongArray.toList(): List<Long> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun FloatArray.toList(): List<Float> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun DoubleArray.toList(): List<Double> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun BooleanArray.toList(): List<Boolean> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun CharArray.toList(): List<Char> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a new [MutableList] filled with all elements of this array.\n */\npublic fun <T> Array<out T>.toMutableList(): MutableList<T> {\n    return ArrayList(this.asCollection())\n}\n\n/**\n * Returns a new [MutableList] filled with all elements of this array.\n */\npublic fun ByteArray.toMutableList(): MutableList<Byte> {\n    val list = ArrayList<Byte>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a new [MutableList] filled with all elements of this array.\n */\npublic fun ShortArray.toMutableList(): MutableList<Short> {\n    val list = ArrayList<Short>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a new [MutableList] filled with all elements of this array.\n */\npublic fun IntArray.toMutableList(): MutableList<Int> {\n    val list = ArrayList<Int>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a new [MutableList] filled with all elements of this array.\n */\npublic fun LongArray.toMutableList(): MutableList<Long> {\n    val list = ArrayList<Long>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a new [MutableList] filled with all elements of this array.\n */\npublic fun FloatArray.toMutableList(): MutableList<Float> {\n    val list = ArrayList<Float>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a new [MutableList] filled with all elements of this array.\n */\npublic fun DoubleArray.toMutableList(): MutableList<Double> {\n    val list = ArrayList<Double>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a new [MutableList] filled with all elements of this array.\n */\npublic fun BooleanArray.toMutableList(): MutableList<Boolean> {\n    val list = ArrayList<Boolean>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a new [MutableList] filled with all elements of this array.\n */\npublic fun CharArray.toMutableList(): MutableList<Char> {\n    val list = ArrayList<Char>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun <T> Array<out T>.toSet(): Set<T> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<T>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun ByteArray.toSet(): Set<Byte> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Byte>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun ShortArray.toSet(): Set<Short> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Short>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun IntArray.toSet(): Set<Int> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Int>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun LongArray.toSet(): Set<Long> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Long>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun FloatArray.toSet(): Set<Float> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Float>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun DoubleArray.toSet(): Set<Double> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Double>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun BooleanArray.toSet(): Set<Boolean> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Boolean>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun CharArray.toSet(): Set<Char> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Char>(mapCapacity(size.coerceAtMost(128))))\n    }\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <T, R> Array<out T>.flatMap(transform: (T) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> ByteArray.flatMap(transform: (Byte) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> ShortArray.flatMap(transform: (Short) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> IntArray.flatMap(transform: (Int) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> LongArray.flatMap(transform: (Long) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> FloatArray.flatMap(transform: (Float) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> DoubleArray.flatMap(transform: (Double) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> BooleanArray.flatMap(transform: (Boolean) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> CharArray.flatMap(transform: (Char) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapSequence\")\npublic inline fun <T, R> Array<out T>.flatMap(transform: (T) -> Sequence<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterable\")\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Array<out T>.flatMapIndexed(transform: (index: Int, T) -> Iterable<R>): List<R> {\n    return flatMapIndexedTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterable\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> ByteArray.flatMapIndexed(transform: (index: Int, Byte) -> Iterable<R>): List<R> {\n    return flatMapIndexedTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterable\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> ShortArray.flatMapIndexed(transform: (index: Int, Short) -> Iterable<R>): List<R> {\n    return flatMapIndexedTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterable\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> IntArray.flatMapIndexed(transform: (index: Int, Int) -> Iterable<R>): List<R> {\n    return flatMapIndexedTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterable\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> LongArray.flatMapIndexed(transform: (index: Int, Long) -> Iterable<R>): List<R> {\n    return flatMapIndexedTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterable\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> FloatArray.flatMapIndexed(transform: (index: Int, Float) -> Iterable<R>): List<R> {\n    return flatMapIndexedTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterable\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> DoubleArray.flatMapIndexed(transform: (index: Int, Double) -> Iterable<R>): List<R> {\n    return flatMapIndexedTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterable\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> BooleanArray.flatMapIndexed(transform: (index: Int, Boolean) -> Iterable<R>): List<R> {\n    return flatMapIndexedTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterable\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> CharArray.flatMapIndexed(transform: (index: Int, Char) -> Iterable<R>): List<R> {\n    return flatMapIndexedTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedSequence\")\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Array<out T>.flatMapIndexed(transform: (index: Int, T) -> Sequence<R>): List<R> {\n    return flatMapIndexedTo(ArrayList<R>(), transform)\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterableTo\")\n@kotlin.internal.InlineOnly\npublic inline fun <T, R, C : MutableCollection<in R>> Array<out T>.flatMapIndexedTo(destination: C, transform: (index: Int, T) -> Iterable<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(index++, element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterableTo\")\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> ByteArray.flatMapIndexedTo(destination: C, transform: (index: Int, Byte) -> Iterable<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(index++, element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterableTo\")\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> ShortArray.flatMapIndexedTo(destination: C, transform: (index: Int, Short) -> Iterable<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(index++, element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterableTo\")\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> IntArray.flatMapIndexedTo(destination: C, transform: (index: Int, Int) -> Iterable<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(index++, element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterableTo\")\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> LongArray.flatMapIndexedTo(destination: C, transform: (index: Int, Long) -> Iterable<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(index++, element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterableTo\")\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> FloatArray.flatMapIndexedTo(destination: C, transform: (index: Int, Float) -> Iterable<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(index++, element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterableTo\")\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> DoubleArray.flatMapIndexedTo(destination: C, transform: (index: Int, Double) -> Iterable<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(index++, element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterableTo\")\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> BooleanArray.flatMapIndexedTo(destination: C, transform: (index: Int, Boolean) -> Iterable<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(index++, element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterableTo\")\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> CharArray.flatMapIndexedTo(destination: C, transform: (index: Int, Char) -> Iterable<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(index++, element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedSequenceTo\")\n@kotlin.internal.InlineOnly\npublic inline fun <T, R, C : MutableCollection<in R>> Array<out T>.flatMapIndexedTo(destination: C, transform: (index: Int, T) -> Sequence<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(index++, element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Array<out T>.flatMapTo(destination: C, transform: (T) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> ByteArray.flatMapTo(destination: C, transform: (Byte) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> ShortArray.flatMapTo(destination: C, transform: (Short) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> IntArray.flatMapTo(destination: C, transform: (Int) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> LongArray.flatMapTo(destination: C, transform: (Long) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> FloatArray.flatMapTo(destination: C, transform: (Float) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> DoubleArray.flatMapTo(destination: C, transform: (Double) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> BooleanArray.flatMapTo(destination: C, transform: (Boolean) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> CharArray.flatMapTo(destination: C, transform: (Char) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapSequenceTo\")\npublic inline fun <T, R, C : MutableCollection<in R>> Array<out T>.flatMapTo(destination: C, transform: (T) -> Sequence<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K> Array<out T>.groupBy(keySelector: (T) -> K): Map<K, List<T>> {\n    return groupByTo(LinkedHashMap<K, MutableList<T>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> ByteArray.groupBy(keySelector: (Byte) -> K): Map<K, List<Byte>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Byte>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> ShortArray.groupBy(keySelector: (Short) -> K): Map<K, List<Short>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Short>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> IntArray.groupBy(keySelector: (Int) -> K): Map<K, List<Int>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Int>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> LongArray.groupBy(keySelector: (Long) -> K): Map<K, List<Long>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Long>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> FloatArray.groupBy(keySelector: (Float) -> K): Map<K, List<Float>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Float>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> DoubleArray.groupBy(keySelector: (Double) -> K): Map<K, List<Double>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Double>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> BooleanArray.groupBy(keySelector: (Boolean) -> K): Map<K, List<Boolean>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Boolean>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> CharArray.groupBy(keySelector: (Char) -> K): Map<K, List<Char>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Char>>(), keySelector)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V> Array<out T>.groupBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> ByteArray.groupBy(keySelector: (Byte) -> K, valueTransform: (Byte) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> ShortArray.groupBy(keySelector: (Short) -> K, valueTransform: (Short) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> IntArray.groupBy(keySelector: (Int) -> K, valueTransform: (Int) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> LongArray.groupBy(keySelector: (Long) -> K, valueTransform: (Long) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> FloatArray.groupBy(keySelector: (Float) -> K, valueTransform: (Float) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> DoubleArray.groupBy(keySelector: (Double) -> K, valueTransform: (Double) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> BooleanArray.groupBy(keySelector: (Boolean) -> K, valueTransform: (Boolean) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> CharArray.groupBy(keySelector: (Char) -> K, valueTransform: (Char) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K, M : MutableMap<in K, MutableList<T>>> Array<out T>.groupByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<T>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Byte>>> ByteArray.groupByTo(destination: M, keySelector: (Byte) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Byte>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Short>>> ShortArray.groupByTo(destination: M, keySelector: (Short) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Short>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Int>>> IntArray.groupByTo(destination: M, keySelector: (Int) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Int>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Long>>> LongArray.groupByTo(destination: M, keySelector: (Long) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Long>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Float>>> FloatArray.groupByTo(destination: M, keySelector: (Float) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Float>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Double>>> DoubleArray.groupByTo(destination: M, keySelector: (Double) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Double>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Boolean>>> BooleanArray.groupByTo(destination: M, keySelector: (Boolean) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Boolean>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Char>>> CharArray.groupByTo(destination: M, keySelector: (Char) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Char>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V, M : MutableMap<in K, MutableList<V>>> Array<out T>.groupByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> ByteArray.groupByTo(destination: M, keySelector: (Byte) -> K, valueTransform: (Byte) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> ShortArray.groupByTo(destination: M, keySelector: (Short) -> K, valueTransform: (Short) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> IntArray.groupByTo(destination: M, keySelector: (Int) -> K, valueTransform: (Int) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> LongArray.groupByTo(destination: M, keySelector: (Long) -> K, valueTransform: (Long) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> FloatArray.groupByTo(destination: M, keySelector: (Float) -> K, valueTransform: (Float) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> DoubleArray.groupByTo(destination: M, keySelector: (Double) -> K, valueTransform: (Double) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> BooleanArray.groupByTo(destination: M, keySelector: (Boolean) -> K, valueTransform: (Boolean) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> CharArray.groupByTo(destination: M, keySelector: (Char) -> K, valueTransform: (Char) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Creates a [Grouping] source from an array to be used later with one of group-and-fold operations\n * using the specified [keySelector] function to extract a key from each element.\n * \n * @sample samples.collections.Grouping.groupingByEachCount\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, K> Array<out T>.groupingBy(crossinline keySelector: (T) -> K): Grouping<T, K> {\n    return object : Grouping<T, K> {\n        override fun sourceIterator(): Iterator<T> = this@groupingBy.iterator()\n        override fun keyOf(element: T): K = keySelector(element)\n    }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <T, R> Array<out T>.map(transform: (T) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> ByteArray.map(transform: (Byte) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> ShortArray.map(transform: (Short) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> IntArray.map(transform: (Int) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> LongArray.map(transform: (Long) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> FloatArray.map(transform: (Float) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> DoubleArray.map(transform: (Double) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> BooleanArray.map(transform: (Boolean) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> CharArray.map(transform: (Char) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R> Array<out T>.mapIndexed(transform: (index: Int, T) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> ByteArray.mapIndexed(transform: (index: Int, Byte) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> ShortArray.mapIndexed(transform: (index: Int, Short) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> IntArray.mapIndexed(transform: (index: Int, Int) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> LongArray.mapIndexed(transform: (index: Int, Long) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> FloatArray.mapIndexed(transform: (index: Int, Float) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> DoubleArray.mapIndexed(transform: (index: Int, Double) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> BooleanArray.mapIndexed(transform: (index: Int, Boolean) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> CharArray.mapIndexed(transform: (index: Int, Char) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any> Array<out T>.mapIndexedNotNull(transform: (index: Int, T) -> R?): List<R> {\n    return mapIndexedNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends only the non-null results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Array<out T>.mapIndexedNotNullTo(destination: C, transform: (index: Int, T) -> R?): C {\n    forEachIndexed { index, element -> transform(index, element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Array<out T>.mapIndexedTo(destination: C, transform: (index: Int, T) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> ByteArray.mapIndexedTo(destination: C, transform: (index: Int, Byte) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> ShortArray.mapIndexedTo(destination: C, transform: (index: Int, Short) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> IntArray.mapIndexedTo(destination: C, transform: (index: Int, Int) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> LongArray.mapIndexedTo(destination: C, transform: (index: Int, Long) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> FloatArray.mapIndexedTo(destination: C, transform: (index: Int, Float) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> DoubleArray.mapIndexedTo(destination: C, transform: (index: Int, Double) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> BooleanArray.mapIndexedTo(destination: C, transform: (index: Int, Boolean) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> CharArray.mapIndexedTo(destination: C, transform: (index: Int, Char) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.mapNotNull\n */\npublic inline fun <T, R : Any> Array<out T>.mapNotNull(transform: (T) -> R?): List<R> {\n    return mapNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element in the original array\n * and appends only the non-null results to the given [destination].\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Array<out T>.mapNotNullTo(destination: C, transform: (T) -> R?): C {\n    forEach { element -> transform(element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Array<out T>.mapTo(destination: C, transform: (T) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> ByteArray.mapTo(destination: C, transform: (Byte) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> ShortArray.mapTo(destination: C, transform: (Short) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> IntArray.mapTo(destination: C, transform: (Int) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> LongArray.mapTo(destination: C, transform: (Long) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> FloatArray.mapTo(destination: C, transform: (Float) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> DoubleArray.mapTo(destination: C, transform: (Double) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> BooleanArray.mapTo(destination: C, transform: (Boolean) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> CharArray.mapTo(destination: C, transform: (Char) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun <T> Array<out T>.withIndex(): Iterable<IndexedValue<T>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun ByteArray.withIndex(): Iterable<IndexedValue<Byte>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun ShortArray.withIndex(): Iterable<IndexedValue<Short>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun IntArray.withIndex(): Iterable<IndexedValue<Int>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun LongArray.withIndex(): Iterable<IndexedValue<Long>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun FloatArray.withIndex(): Iterable<IndexedValue<Float>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun DoubleArray.withIndex(): Iterable<IndexedValue<Double>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun BooleanArray.withIndex(): Iterable<IndexedValue<Boolean>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun CharArray.withIndex(): Iterable<IndexedValue<Char>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * Among equal elements of the given array, only the first one will be present in the resulting list.\n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun <T> Array<out T>.distinct(): List<T> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun ByteArray.distinct(): List<Byte> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun ShortArray.distinct(): List<Short> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun IntArray.distinct(): List<Int> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun LongArray.distinct(): List<Long> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun FloatArray.distinct(): List<Float> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun DoubleArray.distinct(): List<Double> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun BooleanArray.distinct(): List<Boolean> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun CharArray.distinct(): List<Char> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * Among elements of the given array with equal keys, only the first one will be present in the resulting list.\n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <T, K> Array<out T>.distinctBy(selector: (T) -> K): List<T> {\n    val set = HashSet<K>()\n    val list = ArrayList<T>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> ByteArray.distinctBy(selector: (Byte) -> K): List<Byte> {\n    val set = HashSet<K>()\n    val list = ArrayList<Byte>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> ShortArray.distinctBy(selector: (Short) -> K): List<Short> {\n    val set = HashSet<K>()\n    val list = ArrayList<Short>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> IntArray.distinctBy(selector: (Int) -> K): List<Int> {\n    val set = HashSet<K>()\n    val list = ArrayList<Int>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> LongArray.distinctBy(selector: (Long) -> K): List<Long> {\n    val set = HashSet<K>()\n    val list = ArrayList<Long>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> FloatArray.distinctBy(selector: (Float) -> K): List<Float> {\n    val set = HashSet<K>()\n    val list = ArrayList<Float>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> DoubleArray.distinctBy(selector: (Double) -> K): List<Double> {\n    val set = HashSet<K>()\n    val list = ArrayList<Double>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> BooleanArray.distinctBy(selector: (Boolean) -> K): List<Boolean> {\n    val set = HashSet<K>()\n    val list = ArrayList<Boolean>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> CharArray.distinctBy(selector: (Char) -> K): List<Char> {\n    val set = HashSet<K>()\n    val list = ArrayList<Char>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun <T> Array<out T>.intersect(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun ByteArray.intersect(other: Iterable<Byte>): Set<Byte> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun ShortArray.intersect(other: Iterable<Short>): Set<Short> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun IntArray.intersect(other: Iterable<Int>): Set<Int> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun LongArray.intersect(other: Iterable<Long>): Set<Long> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun FloatArray.intersect(other: Iterable<Float>): Set<Float> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun DoubleArray.intersect(other: Iterable<Double>): Set<Double> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun BooleanArray.intersect(other: Iterable<Boolean>): Set<Boolean> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun CharArray.intersect(other: Iterable<Char>): Set<Char> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun <T> Array<out T>.subtract(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun ByteArray.subtract(other: Iterable<Byte>): Set<Byte> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun ShortArray.subtract(other: Iterable<Short>): Set<Short> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun IntArray.subtract(other: Iterable<Int>): Set<Int> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun LongArray.subtract(other: Iterable<Long>): Set<Long> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun FloatArray.subtract(other: Iterable<Float>): Set<Float> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun DoubleArray.subtract(other: Iterable<Double>): Set<Double> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun BooleanArray.subtract(other: Iterable<Boolean>): Set<Boolean> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun CharArray.subtract(other: Iterable<Char>): Set<Char> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a new [MutableSet] containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun <T> Array<out T>.toMutableSet(): MutableSet<T> {\n    return toCollection(LinkedHashSet<T>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [MutableSet] containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun ByteArray.toMutableSet(): MutableSet<Byte> {\n    return toCollection(LinkedHashSet<Byte>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [MutableSet] containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun ShortArray.toMutableSet(): MutableSet<Short> {\n    return toCollection(LinkedHashSet<Short>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [MutableSet] containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun IntArray.toMutableSet(): MutableSet<Int> {\n    return toCollection(LinkedHashSet<Int>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [MutableSet] containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun LongArray.toMutableSet(): MutableSet<Long> {\n    return toCollection(LinkedHashSet<Long>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [MutableSet] containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun FloatArray.toMutableSet(): MutableSet<Float> {\n    return toCollection(LinkedHashSet<Float>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [MutableSet] containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun DoubleArray.toMutableSet(): MutableSet<Double> {\n    return toCollection(LinkedHashSet<Double>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [MutableSet] containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun BooleanArray.toMutableSet(): MutableSet<Boolean> {\n    return toCollection(LinkedHashSet<Boolean>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [MutableSet] containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun CharArray.toMutableSet(): MutableSet<Char> {\n    return toCollection(LinkedHashSet<Char>(mapCapacity(size.coerceAtMost(128))))\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun <T> Array<out T>.union(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun ByteArray.union(other: Iterable<Byte>): Set<Byte> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun ShortArray.union(other: Iterable<Short>): Set<Short> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun IntArray.union(other: Iterable<Int>): Set<Int> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun LongArray.union(other: Iterable<Long>): Set<Long> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun FloatArray.union(other: Iterable<Float>): Set<Float> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun DoubleArray.union(other: Iterable<Double>): Set<Double> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun BooleanArray.union(other: Iterable<Boolean>): Set<Boolean> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun CharArray.union(other: Iterable<Char>): Set<Char> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun <T> Array<out T>.all(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun ByteArray.all(predicate: (Byte) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun ShortArray.all(predicate: (Short) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun IntArray.all(predicate: (Int) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun LongArray.all(predicate: (Long) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun FloatArray.all(predicate: (Float) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun DoubleArray.all(predicate: (Double) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun BooleanArray.all(predicate: (Boolean) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun CharArray.all(predicate: (Char) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun <T> Array<out T>.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun ByteArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun ShortArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun IntArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun LongArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun FloatArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun DoubleArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun BooleanArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun CharArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun <T> Array<out T>.any(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun ByteArray.any(predicate: (Byte) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun ShortArray.any(predicate: (Short) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun IntArray.any(predicate: (Int) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun LongArray.any(predicate: (Long) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun FloatArray.any(predicate: (Float) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun DoubleArray.any(predicate: (Double) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun BooleanArray.any(predicate: (Boolean) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun CharArray.any(predicate: (Char) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun <T> Array<out T>.count(predicate: (T) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun ByteArray.count(predicate: (Byte) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun ShortArray.count(predicate: (Short) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun IntArray.count(predicate: (Int) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun LongArray.count(predicate: (Long) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun FloatArray.count(predicate: (Float) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun DoubleArray.count(predicate: (Double) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun BooleanArray.count(predicate: (Boolean) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun CharArray.count(predicate: (Char) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n */\npublic inline fun <T, R> Array<out T>.fold(initial: R, operation: (acc: R, T) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n */\npublic inline fun <R> ByteArray.fold(initial: R, operation: (acc: R, Byte) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n */\npublic inline fun <R> ShortArray.fold(initial: R, operation: (acc: R, Short) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n */\npublic inline fun <R> IntArray.fold(initial: R, operation: (acc: R, Int) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n */\npublic inline fun <R> LongArray.fold(initial: R, operation: (acc: R, Long) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n */\npublic inline fun <R> FloatArray.fold(initial: R, operation: (acc: R, Float) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n */\npublic inline fun <R> DoubleArray.fold(initial: R, operation: (acc: R, Double) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n */\npublic inline fun <R> BooleanArray.fold(initial: R, operation: (acc: R, Boolean) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n */\npublic inline fun <R> CharArray.fold(initial: R, operation: (acc: R, Char) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <T, R> Array<out T>.foldIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> ByteArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Byte) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> ShortArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Short) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> IntArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Int) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> LongArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Long) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> FloatArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Float) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> DoubleArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Double) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> BooleanArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Boolean) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> CharArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Char) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <T, R> Array<out T>.foldRight(initial: R, operation: (T, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> ByteArray.foldRight(initial: R, operation: (Byte, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> ShortArray.foldRight(initial: R, operation: (Short, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> IntArray.foldRight(initial: R, operation: (Int, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> LongArray.foldRight(initial: R, operation: (Long, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> FloatArray.foldRight(initial: R, operation: (Float, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> DoubleArray.foldRight(initial: R, operation: (Double, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> BooleanArray.foldRight(initial: R, operation: (Boolean, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> CharArray.foldRight(initial: R, operation: (Char, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <T, R> Array<out T>.foldRightIndexed(initial: R, operation: (index: Int, T, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> ByteArray.foldRightIndexed(initial: R, operation: (index: Int, Byte, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> ShortArray.foldRightIndexed(initial: R, operation: (index: Int, Short, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> IntArray.foldRightIndexed(initial: R, operation: (index: Int, Int, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> LongArray.foldRightIndexed(initial: R, operation: (index: Int, Long, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> FloatArray.foldRightIndexed(initial: R, operation: (index: Int, Float, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> DoubleArray.foldRightIndexed(initial: R, operation: (index: Int, Double, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> BooleanArray.foldRightIndexed(initial: R, operation: (index: Int, Boolean, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> CharArray.foldRightIndexed(initial: R, operation: (index: Int, Char, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun <T> Array<out T>.forEach(action: (T) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun ByteArray.forEach(action: (Byte) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun ShortArray.forEach(action: (Short) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun IntArray.forEach(action: (Int) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun LongArray.forEach(action: (Long) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun FloatArray.forEach(action: (Float) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun DoubleArray.forEach(action: (Double) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun BooleanArray.forEach(action: (Boolean) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun CharArray.forEach(action: (Char) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\npublic inline fun <T> Array<out T>.forEachIndexed(action: (index: Int, T) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\npublic inline fun ByteArray.forEachIndexed(action: (index: Int, Byte) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\npublic inline fun ShortArray.forEachIndexed(action: (index: Int, Short) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\npublic inline fun IntArray.forEachIndexed(action: (index: Int, Int) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\npublic inline fun LongArray.forEachIndexed(action: (index: Int, Long) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\npublic inline fun FloatArray.forEachIndexed(action: (index: Int, Float) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\npublic inline fun DoubleArray.forEachIndexed(action: (index: Int, Double) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\npublic inline fun BooleanArray.forEachIndexed(action: (index: Int, Boolean) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\npublic inline fun CharArray.forEachIndexed(action: (index: Int, Char) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n@Deprecated(\"Use maxOrNull instead.\", ReplaceWith(\"this.maxOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\n@SinceKotlin(\"1.1\")\npublic fun Array<out Double>.max(): Double? {\n    return maxOrNull()\n}\n\n@Deprecated(\"Use maxOrNull instead.\", ReplaceWith(\"this.maxOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\n@SinceKotlin(\"1.1\")\npublic fun Array<out Float>.max(): Float? {\n    return maxOrNull()\n}\n\n@Deprecated(\"Use maxOrNull instead.\", ReplaceWith(\"this.maxOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun <T : Comparable<T>> Array<out T>.max(): T? {\n    return maxOrNull()\n}\n\n@Deprecated(\"Use maxOrNull instead.\", ReplaceWith(\"this.maxOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun ByteArray.max(): Byte? {\n    return maxOrNull()\n}\n\n@Deprecated(\"Use maxOrNull instead.\", ReplaceWith(\"this.maxOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun ShortArray.max(): Short? {\n    return maxOrNull()\n}\n\n@Deprecated(\"Use maxOrNull instead.\", ReplaceWith(\"this.maxOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun IntArray.max(): Int? {\n    return maxOrNull()\n}\n\n@Deprecated(\"Use maxOrNull instead.\", ReplaceWith(\"this.maxOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun LongArray.max(): Long? {\n    return maxOrNull()\n}\n\n@Deprecated(\"Use maxOrNull instead.\", ReplaceWith(\"this.maxOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun FloatArray.max(): Float? {\n    return maxOrNull()\n}\n\n@Deprecated(\"Use maxOrNull instead.\", ReplaceWith(\"this.maxOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun DoubleArray.max(): Double? {\n    return maxOrNull()\n}\n\n@Deprecated(\"Use maxOrNull instead.\", ReplaceWith(\"this.maxOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun CharArray.max(): Char? {\n    return maxOrNull()\n}\n\n@Deprecated(\"Use maxByOrNull instead.\", ReplaceWith(\"this.maxByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic inline fun <T, R : Comparable<R>> Array<out T>.maxBy(selector: (T) -> R): T? {\n    return maxByOrNull(selector)\n}\n\n@Deprecated(\"Use maxByOrNull instead.\", ReplaceWith(\"this.maxByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic inline fun <R : Comparable<R>> ByteArray.maxBy(selector: (Byte) -> R): Byte? {\n    return maxByOrNull(selector)\n}\n\n@Deprecated(\"Use maxByOrNull instead.\", ReplaceWith(\"this.maxByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic inline fun <R : Comparable<R>> ShortArray.maxBy(selector: (Short) -> R): Short? {\n    return maxByOrNull(selector)\n}\n\n@Deprecated(\"Use maxByOrNull instead.\", ReplaceWith(\"this.maxByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic inline fun <R : Comparable<R>> IntArray.maxBy(selector: (Int) -> R): Int? {\n    return maxByOrNull(selector)\n}\n\n@Deprecated(\"Use maxByOrNull instead.\", ReplaceWith(\"this.maxByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic inline fun <R : Comparable<R>> LongArray.maxBy(selector: (Long) -> R): Long? {\n    return maxByOrNull(selector)\n}\n\n@Deprecated(\"Use maxByOrNull instead.\", ReplaceWith(\"this.maxByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic inline fun <R : Comparable<R>> FloatArray.maxBy(selector: (Float) -> R): Float? {\n    return maxByOrNull(selector)\n}\n\n@Deprecated(\"Use maxByOrNull instead.\", ReplaceWith(\"this.maxByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic inline fun <R : Comparable<R>> DoubleArray.maxBy(selector: (Double) -> R): Double? {\n    return maxByOrNull(selector)\n}\n\n@Deprecated(\"Use maxByOrNull instead.\", ReplaceWith(\"this.maxByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic inline fun <R : Comparable<R>> BooleanArray.maxBy(selector: (Boolean) -> R): Boolean? {\n    return maxByOrNull(selector)\n}\n\n@Deprecated(\"Use maxByOrNull instead.\", ReplaceWith(\"this.maxByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic inline fun <R : Comparable<R>> CharArray.maxBy(selector: (Char) -> R): Char? {\n    return maxByOrNull(selector)\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <T, R : Comparable<R>> Array<out T>.maxByOrNull(selector: (T) -> R): T? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> ByteArray.maxByOrNull(selector: (Byte) -> R): Byte? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> ShortArray.maxByOrNull(selector: (Short) -> R): Short? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> IntArray.maxByOrNull(selector: (Int) -> R): Int? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> LongArray.maxByOrNull(selector: (Long) -> R): Long? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> FloatArray.maxByOrNull(selector: (Float) -> R): Float? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> DoubleArray.maxByOrNull(selector: (Double) -> R): Double? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> BooleanArray.maxByOrNull(selector: (Boolean) -> R): Boolean? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> CharArray.maxByOrNull(selector: (Char) -> R): Char? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.maxOf(selector: (T) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.maxOf(selector: (Byte) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.maxOf(selector: (Short) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.maxOf(selector: (Int) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.maxOf(selector: (Long) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.maxOf(selector: (Float) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.maxOf(selector: (Double) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.maxOf(selector: (Boolean) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.maxOf(selector: (Char) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.maxOf(selector: (T) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.maxOf(selector: (Byte) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.maxOf(selector: (Short) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.maxOf(selector: (Int) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.maxOf(selector: (Long) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.maxOf(selector: (Float) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.maxOf(selector: (Double) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.maxOf(selector: (Boolean) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.maxOf(selector: (Char) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Comparable<R>> Array<out T>.maxOf(selector: (T) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> ByteArray.maxOf(selector: (Byte) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> ShortArray.maxOf(selector: (Short) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> IntArray.maxOf(selector: (Int) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> LongArray.maxOf(selector: (Long) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> FloatArray.maxOf(selector: (Float) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> DoubleArray.maxOf(selector: (Double) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> BooleanArray.maxOf(selector: (Boolean) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> CharArray.maxOf(selector: (Char) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.maxOfOrNull(selector: (T) -> Double): Double? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.maxOfOrNull(selector: (Byte) -> Double): Double? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.maxOfOrNull(selector: (Short) -> Double): Double? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.maxOfOrNull(selector: (Int) -> Double): Double? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.maxOfOrNull(selector: (Long) -> Double): Double? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.maxOfOrNull(selector: (Float) -> Double): Double? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.maxOfOrNull(selector: (Double) -> Double): Double? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.maxOfOrNull(selector: (Boolean) -> Double): Double? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.maxOfOrNull(selector: (Char) -> Double): Double? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.maxOfOrNull(selector: (T) -> Float): Float? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.maxOfOrNull(selector: (Byte) -> Float): Float? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.maxOfOrNull(selector: (Short) -> Float): Float? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.maxOfOrNull(selector: (Int) -> Float): Float? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.maxOfOrNull(selector: (Long) -> Float): Float? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.maxOfOrNull(selector: (Float) -> Float): Float? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.maxOfOrNull(selector: (Double) -> Float): Float? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.maxOfOrNull(selector: (Boolean) -> Float): Float? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.maxOfOrNull(selector: (Char) -> Float): Float? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Comparable<R>> Array<out T>.maxOfOrNull(selector: (T) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> ByteArray.maxOfOrNull(selector: (Byte) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> ShortArray.maxOfOrNull(selector: (Short) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> IntArray.maxOfOrNull(selector: (Int) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> LongArray.maxOfOrNull(selector: (Long) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> FloatArray.maxOfOrNull(selector: (Float) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> DoubleArray.maxOfOrNull(selector: (Double) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> BooleanArray.maxOfOrNull(selector: (Boolean) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> CharArray.maxOfOrNull(selector: (Char) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Array<out T>.maxOfWith(comparator: Comparator<in R>, selector: (T) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> ByteArray.maxOfWith(comparator: Comparator<in R>, selector: (Byte) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> ShortArray.maxOfWith(comparator: Comparator<in R>, selector: (Short) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> IntArray.maxOfWith(comparator: Comparator<in R>, selector: (Int) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> LongArray.maxOfWith(comparator: Comparator<in R>, selector: (Long) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> FloatArray.maxOfWith(comparator: Comparator<in R>, selector: (Float) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> DoubleArray.maxOfWith(comparator: Comparator<in R>, selector: (Double) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> BooleanArray.maxOfWith(comparator: Comparator<in R>, selector: (Boolean) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> CharArray.maxOfWith(comparator: Comparator<in R>, selector: (Char) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Array<out T>.maxOfWithOrNull(comparator: Comparator<in R>, selector: (T) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> ByteArray.maxOfWithOrNull(comparator: Comparator<in R>, selector: (Byte) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> ShortArray.maxOfWithOrNull(comparator: Comparator<in R>, selector: (Short) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> IntArray.maxOfWithOrNull(comparator: Comparator<in R>, selector: (Int) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> LongArray.maxOfWithOrNull(comparator: Comparator<in R>, selector: (Long) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> FloatArray.maxOfWithOrNull(comparator: Comparator<in R>, selector: (Float) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> DoubleArray.maxOfWithOrNull(comparator: Comparator<in R>, selector: (Double) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> BooleanArray.maxOfWithOrNull(comparator: Comparator<in R>, selector: (Boolean) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> CharArray.maxOfWithOrNull(comparator: Comparator<in R>, selector: (Char) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic fun Array<out Double>.maxOrNull(): Double? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        max = maxOf(max, e)\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic fun Array<out Float>.maxOrNull(): Float? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        max = maxOf(max, e)\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T : Comparable<T>> Array<out T>.maxOrNull(): T? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun ByteArray.maxOrNull(): Byte? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun ShortArray.maxOrNull(): Short? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun IntArray.maxOrNull(): Int? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun LongArray.maxOrNull(): Long? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic fun FloatArray.maxOrNull(): Float? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        max = maxOf(max, e)\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic fun DoubleArray.maxOrNull(): Double? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        max = maxOf(max, e)\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun CharArray.maxOrNull(): Char? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n@Deprecated(\"Use maxWithOrNull instead.\", ReplaceWith(\"this.maxWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun <T> Array<out T>.maxWith(comparator: Comparator<in T>): T? {\n    return maxWithOrNull(comparator)\n}\n\n@Deprecated(\"Use maxWithOrNull instead.\", ReplaceWith(\"this.maxWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun ByteArray.maxWith(comparator: Comparator<in Byte>): Byte? {\n    return maxWithOrNull(comparator)\n}\n\n@Deprecated(\"Use maxWithOrNull instead.\", ReplaceWith(\"this.maxWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun ShortArray.maxWith(comparator: Comparator<in Short>): Short? {\n    return maxWithOrNull(comparator)\n}\n\n@Deprecated(\"Use maxWithOrNull instead.\", ReplaceWith(\"this.maxWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun IntArray.maxWith(comparator: Comparator<in Int>): Int? {\n    return maxWithOrNull(comparator)\n}\n\n@Deprecated(\"Use maxWithOrNull instead.\", ReplaceWith(\"this.maxWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun LongArray.maxWith(comparator: Comparator<in Long>): Long? {\n    return maxWithOrNull(comparator)\n}\n\n@Deprecated(\"Use maxWithOrNull instead.\", ReplaceWith(\"this.maxWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun FloatArray.maxWith(comparator: Comparator<in Float>): Float? {\n    return maxWithOrNull(comparator)\n}\n\n@Deprecated(\"Use maxWithOrNull instead.\", ReplaceWith(\"this.maxWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun DoubleArray.maxWith(comparator: Comparator<in Double>): Double? {\n    return maxWithOrNull(comparator)\n}\n\n@Deprecated(\"Use maxWithOrNull instead.\", ReplaceWith(\"this.maxWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun BooleanArray.maxWith(comparator: Comparator<in Boolean>): Boolean? {\n    return maxWithOrNull(comparator)\n}\n\n@Deprecated(\"Use maxWithOrNull instead.\", ReplaceWith(\"this.maxWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun CharArray.maxWith(comparator: Comparator<in Char>): Char? {\n    return maxWithOrNull(comparator)\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T> Array<out T>.maxWithOrNull(comparator: Comparator<in T>): T? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun ByteArray.maxWithOrNull(comparator: Comparator<in Byte>): Byte? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun ShortArray.maxWithOrNull(comparator: Comparator<in Short>): Short? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun IntArray.maxWithOrNull(comparator: Comparator<in Int>): Int? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun LongArray.maxWithOrNull(comparator: Comparator<in Long>): Long? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun FloatArray.maxWithOrNull(comparator: Comparator<in Float>): Float? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun DoubleArray.maxWithOrNull(comparator: Comparator<in Double>): Double? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun BooleanArray.maxWithOrNull(comparator: Comparator<in Boolean>): Boolean? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun CharArray.maxWithOrNull(comparator: Comparator<in Char>): Char? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n@Deprecated(\"Use minOrNull instead.\", ReplaceWith(\"this.minOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\n@SinceKotlin(\"1.1\")\npublic fun Array<out Double>.min(): Double? {\n    return minOrNull()\n}\n\n@Deprecated(\"Use minOrNull instead.\", ReplaceWith(\"this.minOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\n@SinceKotlin(\"1.1\")\npublic fun Array<out Float>.min(): Float? {\n    return minOrNull()\n}\n\n@Deprecated(\"Use minOrNull instead.\", ReplaceWith(\"this.minOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun <T : Comparable<T>> Array<out T>.min(): T? {\n    return minOrNull()\n}\n\n@Deprecated(\"Use minOrNull instead.\", ReplaceWith(\"this.minOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun ByteArray.min(): Byte? {\n    return minOrNull()\n}\n\n@Deprecated(\"Use minOrNull instead.\", ReplaceWith(\"this.minOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun ShortArray.min(): Short? {\n    return minOrNull()\n}\n\n@Deprecated(\"Use minOrNull instead.\", ReplaceWith(\"this.minOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun IntArray.min(): Int? {\n    return minOrNull()\n}\n\n@Deprecated(\"Use minOrNull instead.\", ReplaceWith(\"this.minOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun LongArray.min(): Long? {\n    return minOrNull()\n}\n\n@Deprecated(\"Use minOrNull instead.\", ReplaceWith(\"this.minOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun FloatArray.min(): Float? {\n    return minOrNull()\n}\n\n@Deprecated(\"Use minOrNull instead.\", ReplaceWith(\"this.minOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun DoubleArray.min(): Double? {\n    return minOrNull()\n}\n\n@Deprecated(\"Use minOrNull instead.\", ReplaceWith(\"this.minOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun CharArray.min(): Char? {\n    return minOrNull()\n}\n\n@Deprecated(\"Use minByOrNull instead.\", ReplaceWith(\"this.minByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic inline fun <T, R : Comparable<R>> Array<out T>.minBy(selector: (T) -> R): T? {\n    return minByOrNull(selector)\n}\n\n@Deprecated(\"Use minByOrNull instead.\", ReplaceWith(\"this.minByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic inline fun <R : Comparable<R>> ByteArray.minBy(selector: (Byte) -> R): Byte? {\n    return minByOrNull(selector)\n}\n\n@Deprecated(\"Use minByOrNull instead.\", ReplaceWith(\"this.minByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic inline fun <R : Comparable<R>> ShortArray.minBy(selector: (Short) -> R): Short? {\n    return minByOrNull(selector)\n}\n\n@Deprecated(\"Use minByOrNull instead.\", ReplaceWith(\"this.minByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic inline fun <R : Comparable<R>> IntArray.minBy(selector: (Int) -> R): Int? {\n    return minByOrNull(selector)\n}\n\n@Deprecated(\"Use minByOrNull instead.\", ReplaceWith(\"this.minByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic inline fun <R : Comparable<R>> LongArray.minBy(selector: (Long) -> R): Long? {\n    return minByOrNull(selector)\n}\n\n@Deprecated(\"Use minByOrNull instead.\", ReplaceWith(\"this.minByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic inline fun <R : Comparable<R>> FloatArray.minBy(selector: (Float) -> R): Float? {\n    return minByOrNull(selector)\n}\n\n@Deprecated(\"Use minByOrNull instead.\", ReplaceWith(\"this.minByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic inline fun <R : Comparable<R>> DoubleArray.minBy(selector: (Double) -> R): Double? {\n    return minByOrNull(selector)\n}\n\n@Deprecated(\"Use minByOrNull instead.\", ReplaceWith(\"this.minByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic inline fun <R : Comparable<R>> BooleanArray.minBy(selector: (Boolean) -> R): Boolean? {\n    return minByOrNull(selector)\n}\n\n@Deprecated(\"Use minByOrNull instead.\", ReplaceWith(\"this.minByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic inline fun <R : Comparable<R>> CharArray.minBy(selector: (Char) -> R): Char? {\n    return minByOrNull(selector)\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <T, R : Comparable<R>> Array<out T>.minByOrNull(selector: (T) -> R): T? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> ByteArray.minByOrNull(selector: (Byte) -> R): Byte? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> ShortArray.minByOrNull(selector: (Short) -> R): Short? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> IntArray.minByOrNull(selector: (Int) -> R): Int? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> LongArray.minByOrNull(selector: (Long) -> R): Long? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> FloatArray.minByOrNull(selector: (Float) -> R): Float? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> DoubleArray.minByOrNull(selector: (Double) -> R): Double? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> BooleanArray.minByOrNull(selector: (Boolean) -> R): Boolean? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> CharArray.minByOrNull(selector: (Char) -> R): Char? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.minOf(selector: (T) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.minOf(selector: (Byte) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.minOf(selector: (Short) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.minOf(selector: (Int) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.minOf(selector: (Long) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.minOf(selector: (Float) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.minOf(selector: (Double) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.minOf(selector: (Boolean) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.minOf(selector: (Char) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.minOf(selector: (T) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.minOf(selector: (Byte) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.minOf(selector: (Short) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.minOf(selector: (Int) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.minOf(selector: (Long) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.minOf(selector: (Float) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.minOf(selector: (Double) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.minOf(selector: (Boolean) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.minOf(selector: (Char) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Comparable<R>> Array<out T>.minOf(selector: (T) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> ByteArray.minOf(selector: (Byte) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> ShortArray.minOf(selector: (Short) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> IntArray.minOf(selector: (Int) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> LongArray.minOf(selector: (Long) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> FloatArray.minOf(selector: (Float) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> DoubleArray.minOf(selector: (Double) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> BooleanArray.minOf(selector: (Boolean) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> CharArray.minOf(selector: (Char) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.minOfOrNull(selector: (T) -> Double): Double? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.minOfOrNull(selector: (Byte) -> Double): Double? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.minOfOrNull(selector: (Short) -> Double): Double? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.minOfOrNull(selector: (Int) -> Double): Double? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.minOfOrNull(selector: (Long) -> Double): Double? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.minOfOrNull(selector: (Float) -> Double): Double? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.minOfOrNull(selector: (Double) -> Double): Double? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.minOfOrNull(selector: (Boolean) -> Double): Double? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.minOfOrNull(selector: (Char) -> Double): Double? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.minOfOrNull(selector: (T) -> Float): Float? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.minOfOrNull(selector: (Byte) -> Float): Float? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.minOfOrNull(selector: (Short) -> Float): Float? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.minOfOrNull(selector: (Int) -> Float): Float? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.minOfOrNull(selector: (Long) -> Float): Float? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.minOfOrNull(selector: (Float) -> Float): Float? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.minOfOrNull(selector: (Double) -> Float): Float? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.minOfOrNull(selector: (Boolean) -> Float): Float? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.minOfOrNull(selector: (Char) -> Float): Float? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Comparable<R>> Array<out T>.minOfOrNull(selector: (T) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> ByteArray.minOfOrNull(selector: (Byte) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> ShortArray.minOfOrNull(selector: (Short) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> IntArray.minOfOrNull(selector: (Int) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> LongArray.minOfOrNull(selector: (Long) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> FloatArray.minOfOrNull(selector: (Float) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> DoubleArray.minOfOrNull(selector: (Double) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> BooleanArray.minOfOrNull(selector: (Boolean) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> CharArray.minOfOrNull(selector: (Char) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Array<out T>.minOfWith(comparator: Comparator<in R>, selector: (T) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> ByteArray.minOfWith(comparator: Comparator<in R>, selector: (Byte) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> ShortArray.minOfWith(comparator: Comparator<in R>, selector: (Short) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> IntArray.minOfWith(comparator: Comparator<in R>, selector: (Int) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> LongArray.minOfWith(comparator: Comparator<in R>, selector: (Long) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> FloatArray.minOfWith(comparator: Comparator<in R>, selector: (Float) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> DoubleArray.minOfWith(comparator: Comparator<in R>, selector: (Double) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> BooleanArray.minOfWith(comparator: Comparator<in R>, selector: (Boolean) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> CharArray.minOfWith(comparator: Comparator<in R>, selector: (Char) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Array<out T>.minOfWithOrNull(comparator: Comparator<in R>, selector: (T) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> ByteArray.minOfWithOrNull(comparator: Comparator<in R>, selector: (Byte) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> ShortArray.minOfWithOrNull(comparator: Comparator<in R>, selector: (Short) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> IntArray.minOfWithOrNull(comparator: Comparator<in R>, selector: (Int) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> LongArray.minOfWithOrNull(comparator: Comparator<in R>, selector: (Long) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> FloatArray.minOfWithOrNull(comparator: Comparator<in R>, selector: (Float) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> DoubleArray.minOfWithOrNull(comparator: Comparator<in R>, selector: (Double) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> BooleanArray.minOfWithOrNull(comparator: Comparator<in R>, selector: (Boolean) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> CharArray.minOfWithOrNull(comparator: Comparator<in R>, selector: (Char) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic fun Array<out Double>.minOrNull(): Double? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        min = minOf(min, e)\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic fun Array<out Float>.minOrNull(): Float? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        min = minOf(min, e)\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T : Comparable<T>> Array<out T>.minOrNull(): T? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun ByteArray.minOrNull(): Byte? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun ShortArray.minOrNull(): Short? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun IntArray.minOrNull(): Int? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun LongArray.minOrNull(): Long? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic fun FloatArray.minOrNull(): Float? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        min = minOf(min, e)\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic fun DoubleArray.minOrNull(): Double? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        min = minOf(min, e)\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun CharArray.minOrNull(): Char? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n@Deprecated(\"Use minWithOrNull instead.\", ReplaceWith(\"this.minWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun <T> Array<out T>.minWith(comparator: Comparator<in T>): T? {\n    return minWithOrNull(comparator)\n}\n\n@Deprecated(\"Use minWithOrNull instead.\", ReplaceWith(\"this.minWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun ByteArray.minWith(comparator: Comparator<in Byte>): Byte? {\n    return minWithOrNull(comparator)\n}\n\n@Deprecated(\"Use minWithOrNull instead.\", ReplaceWith(\"this.minWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun ShortArray.minWith(comparator: Comparator<in Short>): Short? {\n    return minWithOrNull(comparator)\n}\n\n@Deprecated(\"Use minWithOrNull instead.\", ReplaceWith(\"this.minWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun IntArray.minWith(comparator: Comparator<in Int>): Int? {\n    return minWithOrNull(comparator)\n}\n\n@Deprecated(\"Use minWithOrNull instead.\", ReplaceWith(\"this.minWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun LongArray.minWith(comparator: Comparator<in Long>): Long? {\n    return minWithOrNull(comparator)\n}\n\n@Deprecated(\"Use minWithOrNull instead.\", ReplaceWith(\"this.minWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun FloatArray.minWith(comparator: Comparator<in Float>): Float? {\n    return minWithOrNull(comparator)\n}\n\n@Deprecated(\"Use minWithOrNull instead.\", ReplaceWith(\"this.minWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun DoubleArray.minWith(comparator: Comparator<in Double>): Double? {\n    return minWithOrNull(comparator)\n}\n\n@Deprecated(\"Use minWithOrNull instead.\", ReplaceWith(\"this.minWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun BooleanArray.minWith(comparator: Comparator<in Boolean>): Boolean? {\n    return minWithOrNull(comparator)\n}\n\n@Deprecated(\"Use minWithOrNull instead.\", ReplaceWith(\"this.minWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun CharArray.minWith(comparator: Comparator<in Char>): Char? {\n    return minWithOrNull(comparator)\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T> Array<out T>.minWithOrNull(comparator: Comparator<in T>): T? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun ByteArray.minWithOrNull(comparator: Comparator<in Byte>): Byte? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun ShortArray.minWithOrNull(comparator: Comparator<in Short>): Short? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun IntArray.minWithOrNull(comparator: Comparator<in Int>): Int? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun LongArray.minWithOrNull(comparator: Comparator<in Long>): Long? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun FloatArray.minWithOrNull(comparator: Comparator<in Float>): Float? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun DoubleArray.minWithOrNull(comparator: Comparator<in Double>): Double? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun BooleanArray.minWithOrNull(comparator: Comparator<in Boolean>): Boolean? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun CharArray.minWithOrNull(comparator: Comparator<in Char>): Char? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun <T> Array<out T>.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun ByteArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun ShortArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun IntArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun LongArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun FloatArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun DoubleArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun BooleanArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun CharArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun <T> Array<out T>.none(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun ByteArray.none(predicate: (Byte) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun ShortArray.none(predicate: (Short) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun IntArray.none(predicate: (Int) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun LongArray.none(predicate: (Long) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun FloatArray.none(predicate: (Float) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun DoubleArray.none(predicate: (Double) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun BooleanArray.none(predicate: (Boolean) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun CharArray.none(predicate: (Char) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Performs the given [action] on each element and returns the array itself afterwards.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.onEach(action: (T) -> Unit): Array<out T> {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Performs the given [action] on each element and returns the array itself afterwards.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.onEach(action: (Byte) -> Unit): ByteArray {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Performs the given [action] on each element and returns the array itself afterwards.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.onEach(action: (Short) -> Unit): ShortArray {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Performs the given [action] on each element and returns the array itself afterwards.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.onEach(action: (Int) -> Unit): IntArray {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Performs the given [action] on each element and returns the array itself afterwards.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.onEach(action: (Long) -> Unit): LongArray {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Performs the given [action] on each element and returns the array itself afterwards.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.onEach(action: (Float) -> Unit): FloatArray {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Performs the given [action] on each element and returns the array itself afterwards.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.onEach(action: (Double) -> Unit): DoubleArray {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Performs the given [action] on each element and returns the array itself afterwards.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.onEach(action: (Boolean) -> Unit): BooleanArray {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Performs the given [action] on each element and returns the array itself afterwards.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.onEach(action: (Char) -> Unit): CharArray {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element,\n * and returns the array itself afterwards.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.onEachIndexed(action: (index: Int, T) -> Unit): Array<out T> {\n    return apply { forEachIndexed(action) }\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element,\n * and returns the array itself afterwards.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.onEachIndexed(action: (index: Int, Byte) -> Unit): ByteArray {\n    return apply { forEachIndexed(action) }\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element,\n * and returns the array itself afterwards.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.onEachIndexed(action: (index: Int, Short) -> Unit): ShortArray {\n    return apply { forEachIndexed(action) }\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element,\n * and returns the array itself afterwards.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.onEachIndexed(action: (index: Int, Int) -> Unit): IntArray {\n    return apply { forEachIndexed(action) }\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element,\n * and returns the array itself afterwards.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.onEachIndexed(action: (index: Int, Long) -> Unit): LongArray {\n    return apply { forEachIndexed(action) }\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element,\n * and returns the array itself afterwards.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.onEachIndexed(action: (index: Int, Float) -> Unit): FloatArray {\n    return apply { forEachIndexed(action) }\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element,\n * and returns the array itself afterwards.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.onEachIndexed(action: (index: Int, Double) -> Unit): DoubleArray {\n    return apply { forEachIndexed(action) }\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element,\n * and returns the array itself afterwards.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.onEachIndexed(action: (index: Int, Boolean) -> Unit): BooleanArray {\n    return apply { forEachIndexed(action) }\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element,\n * and returns the array itself afterwards.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.onEachIndexed(action: (index: Int, Char) -> Unit): CharArray {\n    return apply { forEachIndexed(action) }\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun <S, T : S> Array<out T>.reduce(operation: (acc: S, T) -> S): S {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator: S = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun ByteArray.reduce(operation: (acc: Byte, Byte) -> Byte): Byte {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun ShortArray.reduce(operation: (acc: Short, Short) -> Short): Short {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun IntArray.reduce(operation: (acc: Int, Int) -> Int): Int {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun LongArray.reduce(operation: (acc: Long, Long) -> Long): Long {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun FloatArray.reduce(operation: (acc: Float, Float) -> Float): Float {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun DoubleArray.reduce(operation: (acc: Double, Double) -> Double): Double {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun BooleanArray.reduce(operation: (acc: Boolean, Boolean) -> Boolean): Boolean {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun CharArray.reduce(operation: (acc: Char, Char) -> Char): Char {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun <S, T : S> Array<out T>.reduceIndexed(operation: (index: Int, acc: S, T) -> S): S {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator: S = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun ByteArray.reduceIndexed(operation: (index: Int, acc: Byte, Byte) -> Byte): Byte {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun ShortArray.reduceIndexed(operation: (index: Int, acc: Short, Short) -> Short): Short {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun IntArray.reduceIndexed(operation: (index: Int, acc: Int, Int) -> Int): Int {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun LongArray.reduceIndexed(operation: (index: Int, acc: Long, Long) -> Long): Long {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun FloatArray.reduceIndexed(operation: (index: Int, acc: Float, Float) -> Float): Float {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun DoubleArray.reduceIndexed(operation: (index: Int, acc: Double, Double) -> Double): Double {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun BooleanArray.reduceIndexed(operation: (index: Int, acc: Boolean, Boolean) -> Boolean): Boolean {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun CharArray.reduceIndexed(operation: (index: Int, acc: Char, Char) -> Char): Char {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <S, T : S> Array<out T>.reduceIndexedOrNull(operation: (index: Int, acc: S, T) -> S): S? {\n    if (isEmpty())\n        return null\n    var accumulator: S = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun ByteArray.reduceIndexedOrNull(operation: (index: Int, acc: Byte, Byte) -> Byte): Byte? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun ShortArray.reduceIndexedOrNull(operation: (index: Int, acc: Short, Short) -> Short): Short? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun IntArray.reduceIndexedOrNull(operation: (index: Int, acc: Int, Int) -> Int): Int? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun LongArray.reduceIndexedOrNull(operation: (index: Int, acc: Long, Long) -> Long): Long? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun FloatArray.reduceIndexedOrNull(operation: (index: Int, acc: Float, Float) -> Float): Float? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun DoubleArray.reduceIndexedOrNull(operation: (index: Int, acc: Double, Double) -> Double): Double? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun BooleanArray.reduceIndexedOrNull(operation: (index: Int, acc: Boolean, Boolean) -> Boolean): Boolean? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun CharArray.reduceIndexedOrNull(operation: (index: Int, acc: Char, Char) -> Char): Char? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun <S, T : S> Array<out T>.reduceOrNull(operation: (acc: S, T) -> S): S? {\n    if (isEmpty())\n        return null\n    var accumulator: S = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun ByteArray.reduceOrNull(operation: (acc: Byte, Byte) -> Byte): Byte? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun ShortArray.reduceOrNull(operation: (acc: Short, Short) -> Short): Short? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun IntArray.reduceOrNull(operation: (acc: Int, Int) -> Int): Int? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun LongArray.reduceOrNull(operation: (acc: Long, Long) -> Long): Long? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun FloatArray.reduceOrNull(operation: (acc: Float, Float) -> Float): Float? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun DoubleArray.reduceOrNull(operation: (acc: Double, Double) -> Double): Double? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun BooleanArray.reduceOrNull(operation: (acc: Boolean, Boolean) -> Boolean): Boolean? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun CharArray.reduceOrNull(operation: (acc: Char, Char) -> Char): Char? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun <S, T : S> Array<out T>.reduceRight(operation: (T, acc: S) -> S): S {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator: S = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun ByteArray.reduceRight(operation: (Byte, acc: Byte) -> Byte): Byte {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun ShortArray.reduceRight(operation: (Short, acc: Short) -> Short): Short {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun IntArray.reduceRight(operation: (Int, acc: Int) -> Int): Int {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun LongArray.reduceRight(operation: (Long, acc: Long) -> Long): Long {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun FloatArray.reduceRight(operation: (Float, acc: Float) -> Float): Float {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun DoubleArray.reduceRight(operation: (Double, acc: Double) -> Double): Double {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun BooleanArray.reduceRight(operation: (Boolean, acc: Boolean) -> Boolean): Boolean {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun CharArray.reduceRight(operation: (Char, acc: Char) -> Char): Char {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun <S, T : S> Array<out T>.reduceRightIndexed(operation: (index: Int, T, acc: S) -> S): S {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator: S = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun ByteArray.reduceRightIndexed(operation: (index: Int, Byte, acc: Byte) -> Byte): Byte {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun ShortArray.reduceRightIndexed(operation: (index: Int, Short, acc: Short) -> Short): Short {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun IntArray.reduceRightIndexed(operation: (index: Int, Int, acc: Int) -> Int): Int {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun LongArray.reduceRightIndexed(operation: (index: Int, Long, acc: Long) -> Long): Long {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun FloatArray.reduceRightIndexed(operation: (index: Int, Float, acc: Float) -> Float): Float {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun DoubleArray.reduceRightIndexed(operation: (index: Int, Double, acc: Double) -> Double): Double {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun BooleanArray.reduceRightIndexed(operation: (index: Int, Boolean, acc: Boolean) -> Boolean): Boolean {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun CharArray.reduceRightIndexed(operation: (index: Int, Char, acc: Char) -> Char): Char {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <S, T : S> Array<out T>.reduceRightIndexedOrNull(operation: (index: Int, T, acc: S) -> S): S? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator: S = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun ByteArray.reduceRightIndexedOrNull(operation: (index: Int, Byte, acc: Byte) -> Byte): Byte? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun ShortArray.reduceRightIndexedOrNull(operation: (index: Int, Short, acc: Short) -> Short): Short? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun IntArray.reduceRightIndexedOrNull(operation: (index: Int, Int, acc: Int) -> Int): Int? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun LongArray.reduceRightIndexedOrNull(operation: (index: Int, Long, acc: Long) -> Long): Long? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun FloatArray.reduceRightIndexedOrNull(operation: (index: Int, Float, acc: Float) -> Float): Float? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun DoubleArray.reduceRightIndexedOrNull(operation: (index: Int, Double, acc: Double) -> Double): Double? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun BooleanArray.reduceRightIndexedOrNull(operation: (index: Int, Boolean, acc: Boolean) -> Boolean): Boolean? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun CharArray.reduceRightIndexedOrNull(operation: (index: Int, Char, acc: Char) -> Char): Char? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun <S, T : S> Array<out T>.reduceRightOrNull(operation: (T, acc: S) -> S): S? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator: S = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun ByteArray.reduceRightOrNull(operation: (Byte, acc: Byte) -> Byte): Byte? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun ShortArray.reduceRightOrNull(operation: (Short, acc: Short) -> Short): Short? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun IntArray.reduceRightOrNull(operation: (Int, acc: Int) -> Int): Int? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun LongArray.reduceRightOrNull(operation: (Long, acc: Long) -> Long): Long? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun FloatArray.reduceRightOrNull(operation: (Float, acc: Float) -> Float): Float? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun DoubleArray.reduceRightOrNull(operation: (Double, acc: Double) -> Double): Double? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun BooleanArray.reduceRightOrNull(operation: (Boolean, acc: Boolean) -> Boolean): Boolean? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun CharArray.reduceRightOrNull(operation: (Char, acc: Char) -> Char): Char? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <T, R> Array<out T>.runningFold(initial: R, operation: (acc: R, T) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> ByteArray.runningFold(initial: R, operation: (acc: R, Byte) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> ShortArray.runningFold(initial: R, operation: (acc: R, Short) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> IntArray.runningFold(initial: R, operation: (acc: R, Int) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> LongArray.runningFold(initial: R, operation: (acc: R, Long) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> FloatArray.runningFold(initial: R, operation: (acc: R, Float) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> DoubleArray.runningFold(initial: R, operation: (acc: R, Double) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> BooleanArray.runningFold(initial: R, operation: (acc: R, Boolean) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> CharArray.runningFold(initial: R, operation: (acc: R, Char) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <T, R> Array<out T>.runningFoldIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> ByteArray.runningFoldIndexed(initial: R, operation: (index: Int, acc: R, Byte) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> ShortArray.runningFoldIndexed(initial: R, operation: (index: Int, acc: R, Short) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> IntArray.runningFoldIndexed(initial: R, operation: (index: Int, acc: R, Int) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> LongArray.runningFoldIndexed(initial: R, operation: (index: Int, acc: R, Long) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> FloatArray.runningFoldIndexed(initial: R, operation: (index: Int, acc: R, Float) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> DoubleArray.runningFoldIndexed(initial: R, operation: (index: Int, acc: R, Double) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> BooleanArray.runningFoldIndexed(initial: R, operation: (index: Int, acc: R, Boolean) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> CharArray.runningFoldIndexed(initial: R, operation: (index: Int, acc: R, Char) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and the element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun <S, T : S> Array<out T>.runningReduce(operation: (acc: S, T) -> S): List<S> {\n    if (isEmpty()) return emptyList()\n    var accumulator: S = this[0]\n    val result = ArrayList<S>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.runningReduce(operation: (acc: Byte, Byte) -> Byte): List<Byte> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Byte>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.runningReduce(operation: (acc: Short, Short) -> Short): List<Short> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Short>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.runningReduce(operation: (acc: Int, Int) -> Int): List<Int> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Int>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.runningReduce(operation: (acc: Long, Long) -> Long): List<Long> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Long>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.runningReduce(operation: (acc: Float, Float) -> Float): List<Float> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Float>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.runningReduce(operation: (acc: Double, Double) -> Double): List<Double> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Double>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.runningReduce(operation: (acc: Boolean, Boolean) -> Boolean): List<Boolean> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Boolean>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.runningReduce(operation: (acc: Char, Char) -> Char): List<Char> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Char>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <S, T : S> Array<out T>.runningReduceIndexed(operation: (index: Int, acc: S, T) -> S): List<S> {\n    if (isEmpty()) return emptyList()\n    var accumulator: S = this[0]\n    val result = ArrayList<S>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.runningReduceIndexed(operation: (index: Int, acc: Byte, Byte) -> Byte): List<Byte> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Byte>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.runningReduceIndexed(operation: (index: Int, acc: Short, Short) -> Short): List<Short> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Short>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.runningReduceIndexed(operation: (index: Int, acc: Int, Int) -> Int): List<Int> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Int>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.runningReduceIndexed(operation: (index: Int, acc: Long, Long) -> Long): List<Long> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Long>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.runningReduceIndexed(operation: (index: Int, acc: Float, Float) -> Float): List<Float> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Float>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.runningReduceIndexed(operation: (index: Int, acc: Double, Double) -> Double): List<Double> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Double>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.runningReduceIndexed(operation: (index: Int, acc: Boolean, Boolean) -> Boolean): List<Boolean> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Boolean>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.runningReduceIndexed(operation: (index: Int, acc: Char, Char) -> Char): List<Char> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Char>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun <T, R> Array<out T>.scan(initial: R, operation: (acc: R, T) -> R): List<R> {\n    return runningFold(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> ByteArray.scan(initial: R, operation: (acc: R, Byte) -> R): List<R> {\n    return runningFold(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> ShortArray.scan(initial: R, operation: (acc: R, Short) -> R): List<R> {\n    return runningFold(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> IntArray.scan(initial: R, operation: (acc: R, Int) -> R): List<R> {\n    return runningFold(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> LongArray.scan(initial: R, operation: (acc: R, Long) -> R): List<R> {\n    return runningFold(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> FloatArray.scan(initial: R, operation: (acc: R, Float) -> R): List<R> {\n    return runningFold(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> DoubleArray.scan(initial: R, operation: (acc: R, Double) -> R): List<R> {\n    return runningFold(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> BooleanArray.scan(initial: R, operation: (acc: R, Boolean) -> R): List<R> {\n    return runningFold(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> CharArray.scan(initial: R, operation: (acc: R, Char) -> R): List<R> {\n    return runningFold(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun <T, R> Array<out T>.scanIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): List<R> {\n    return runningFoldIndexed(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> ByteArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Byte) -> R): List<R> {\n    return runningFoldIndexed(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> ShortArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Short) -> R): List<R> {\n    return runningFoldIndexed(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> IntArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Int) -> R): List<R> {\n    return runningFoldIndexed(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> LongArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Long) -> R): List<R> {\n    return runningFoldIndexed(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> FloatArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Float) -> R): List<R> {\n    return runningFoldIndexed(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> DoubleArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Double) -> R): List<R> {\n    return runningFoldIndexed(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> BooleanArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Boolean) -> R): List<R> {\n    return runningFoldIndexed(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> CharArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Char) -> R): List<R> {\n    return runningFoldIndexed(initial, operation)\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@Deprecated(\"Use sumOf instead.\", ReplaceWith(\"this.sumOf(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic inline fun <T> Array<out T>.sumBy(selector: (T) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@Deprecated(\"Use sumOf instead.\", ReplaceWith(\"this.sumOf(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic inline fun ByteArray.sumBy(selector: (Byte) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@Deprecated(\"Use sumOf instead.\", ReplaceWith(\"this.sumOf(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic inline fun ShortArray.sumBy(selector: (Short) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@Deprecated(\"Use sumOf instead.\", ReplaceWith(\"this.sumOf(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic inline fun IntArray.sumBy(selector: (Int) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@Deprecated(\"Use sumOf instead.\", ReplaceWith(\"this.sumOf(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic inline fun LongArray.sumBy(selector: (Long) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@Deprecated(\"Use sumOf instead.\", ReplaceWith(\"this.sumOf(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic inline fun FloatArray.sumBy(selector: (Float) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@Deprecated(\"Use sumOf instead.\", ReplaceWith(\"this.sumOf(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic inline fun DoubleArray.sumBy(selector: (Double) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@Deprecated(\"Use sumOf instead.\", ReplaceWith(\"this.sumOf(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic inline fun BooleanArray.sumBy(selector: (Boolean) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@Deprecated(\"Use sumOf instead.\", ReplaceWith(\"this.sumOf(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic inline fun CharArray.sumBy(selector: (Char) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@Deprecated(\"Use sumOf instead.\", ReplaceWith(\"this.sumOf(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic inline fun <T> Array<out T>.sumByDouble(selector: (T) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@Deprecated(\"Use sumOf instead.\", ReplaceWith(\"this.sumOf(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic inline fun ByteArray.sumByDouble(selector: (Byte) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@Deprecated(\"Use sumOf instead.\", ReplaceWith(\"this.sumOf(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic inline fun ShortArray.sumByDouble(selector: (Short) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@Deprecated(\"Use sumOf instead.\", ReplaceWith(\"this.sumOf(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic inline fun IntArray.sumByDouble(selector: (Int) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@Deprecated(\"Use sumOf instead.\", ReplaceWith(\"this.sumOf(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic inline fun LongArray.sumByDouble(selector: (Long) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@Deprecated(\"Use sumOf instead.\", ReplaceWith(\"this.sumOf(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic inline fun FloatArray.sumByDouble(selector: (Float) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@Deprecated(\"Use sumOf instead.\", ReplaceWith(\"this.sumOf(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic inline fun DoubleArray.sumByDouble(selector: (Double) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@Deprecated(\"Use sumOf instead.\", ReplaceWith(\"this.sumOf(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic inline fun BooleanArray.sumByDouble(selector: (Boolean) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@Deprecated(\"Use sumOf instead.\", ReplaceWith(\"this.sumOf(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic inline fun CharArray.sumByDouble(selector: (Char) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfDouble\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.sumOf(selector: (T) -> Double): Double {\n    var sum: Double = 0.toDouble()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfDouble\")\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.sumOf(selector: (Byte) -> Double): Double {\n    var sum: Double = 0.toDouble()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfDouble\")\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.sumOf(selector: (Short) -> Double): Double {\n    var sum: Double = 0.toDouble()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfDouble\")\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.sumOf(selector: (Int) -> Double): Double {\n    var sum: Double = 0.toDouble()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfDouble\")\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.sumOf(selector: (Long) -> Double): Double {\n    var sum: Double = 0.toDouble()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfDouble\")\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.sumOf(selector: (Float) -> Double): Double {\n    var sum: Double = 0.toDouble()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfDouble\")\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.sumOf(selector: (Double) -> Double): Double {\n    var sum: Double = 0.toDouble()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfDouble\")\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.sumOf(selector: (Boolean) -> Double): Double {\n    var sum: Double = 0.toDouble()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfDouble\")\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.sumOf(selector: (Char) -> Double): Double {\n    var sum: Double = 0.toDouble()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfInt\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.sumOf(selector: (T) -> Int): Int {\n    var sum: Int = 0.toInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfInt\")\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.sumOf(selector: (Byte) -> Int): Int {\n    var sum: Int = 0.toInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfInt\")\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.sumOf(selector: (Short) -> Int): Int {\n    var sum: Int = 0.toInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfInt\")\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.sumOf(selector: (Int) -> Int): Int {\n    var sum: Int = 0.toInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfInt\")\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.sumOf(selector: (Long) -> Int): Int {\n    var sum: Int = 0.toInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfInt\")\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.sumOf(selector: (Float) -> Int): Int {\n    var sum: Int = 0.toInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfInt\")\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.sumOf(selector: (Double) -> Int): Int {\n    var sum: Int = 0.toInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfInt\")\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.sumOf(selector: (Boolean) -> Int): Int {\n    var sum: Int = 0.toInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfInt\")\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.sumOf(selector: (Char) -> Int): Int {\n    var sum: Int = 0.toInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfLong\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.sumOf(selector: (T) -> Long): Long {\n    var sum: Long = 0.toLong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfLong\")\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.sumOf(selector: (Byte) -> Long): Long {\n    var sum: Long = 0.toLong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfLong\")\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.sumOf(selector: (Short) -> Long): Long {\n    var sum: Long = 0.toLong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfLong\")\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.sumOf(selector: (Int) -> Long): Long {\n    var sum: Long = 0.toLong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfLong\")\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.sumOf(selector: (Long) -> Long): Long {\n    var sum: Long = 0.toLong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfLong\")\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.sumOf(selector: (Float) -> Long): Long {\n    var sum: Long = 0.toLong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfLong\")\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.sumOf(selector: (Double) -> Long): Long {\n    var sum: Long = 0.toLong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfLong\")\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.sumOf(selector: (Boolean) -> Long): Long {\n    var sum: Long = 0.toLong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfLong\")\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.sumOf(selector: (Char) -> Long): Long {\n    var sum: Long = 0.toLong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.5\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfUInt\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.sumOf(selector: (T) -> UInt): UInt {\n    var sum: UInt = 0.toUInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.5\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfUInt\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.sumOf(selector: (Byte) -> UInt): UInt {\n    var sum: UInt = 0.toUInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.5\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfUInt\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.sumOf(selector: (Short) -> UInt): UInt {\n    var sum: UInt = 0.toUInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.5\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfUInt\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.sumOf(selector: (Int) -> UInt): UInt {\n    var sum: UInt = 0.toUInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.5\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfUInt\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.sumOf(selector: (Long) -> UInt): UInt {\n    var sum: UInt = 0.toUInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.5\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfUInt\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.sumOf(selector: (Float) -> UInt): UInt {\n    var sum: UInt = 0.toUInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.5\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfUInt\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.sumOf(selector: (Double) -> UInt): UInt {\n    var sum: UInt = 0.toUInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.5\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfUInt\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.sumOf(selector: (Boolean) -> UInt): UInt {\n    var sum: UInt = 0.toUInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.5\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfUInt\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.sumOf(selector: (Char) -> UInt): UInt {\n    var sum: UInt = 0.toUInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.5\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfULong\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.sumOf(selector: (T) -> ULong): ULong {\n    var sum: ULong = 0.toULong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.5\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfULong\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.sumOf(selector: (Byte) -> ULong): ULong {\n    var sum: ULong = 0.toULong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.5\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfULong\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.sumOf(selector: (Short) -> ULong): ULong {\n    var sum: ULong = 0.toULong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.5\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfULong\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.sumOf(selector: (Int) -> ULong): ULong {\n    var sum: ULong = 0.toULong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.5\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfULong\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.sumOf(selector: (Long) -> ULong): ULong {\n    var sum: ULong = 0.toULong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.5\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfULong\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.sumOf(selector: (Float) -> ULong): ULong {\n    var sum: ULong = 0.toULong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.5\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfULong\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.sumOf(selector: (Double) -> ULong): ULong {\n    var sum: ULong = 0.toULong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.5\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfULong\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.sumOf(selector: (Boolean) -> ULong): ULong {\n    var sum: ULong = 0.toULong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.5\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfULong\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.sumOf(selector: (Char) -> ULong): ULong {\n    var sum: ULong = 0.toULong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns an original collection containing all the non-`null` elements, throwing an [IllegalArgumentException] if there are any `null` elements.\n */\npublic fun <T : Any> Array<T?>.requireNoNulls(): Array<T> {\n    for (element in this) {\n        if (element == null) {\n            throw IllegalArgumentException(\"null element found in $this.\")\n        }\n    }\n    @Suppress(\"UNCHECKED_CAST\")\n    return this as Array<T>\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Arrays.Transformations.partitionArrayOfPrimitives\n */\npublic inline fun <T> Array<out T>.partition(predicate: (T) -> Boolean): Pair<List<T>, List<T>> {\n    val first = ArrayList<T>()\n    val second = ArrayList<T>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Arrays.Transformations.partitionArrayOfPrimitives\n */\npublic inline fun ByteArray.partition(predicate: (Byte) -> Boolean): Pair<List<Byte>, List<Byte>> {\n    val first = ArrayList<Byte>()\n    val second = ArrayList<Byte>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Arrays.Transformations.partitionArrayOfPrimitives\n */\npublic inline fun ShortArray.partition(predicate: (Short) -> Boolean): Pair<List<Short>, List<Short>> {\n    val first = ArrayList<Short>()\n    val second = ArrayList<Short>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Arrays.Transformations.partitionArrayOfPrimitives\n */\npublic inline fun IntArray.partition(predicate: (Int) -> Boolean): Pair<List<Int>, List<Int>> {\n    val first = ArrayList<Int>()\n    val second = ArrayList<Int>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Arrays.Transformations.partitionArrayOfPrimitives\n */\npublic inline fun LongArray.partition(predicate: (Long) -> Boolean): Pair<List<Long>, List<Long>> {\n    val first = ArrayList<Long>()\n    val second = ArrayList<Long>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Arrays.Transformations.partitionArrayOfPrimitives\n */\npublic inline fun FloatArray.partition(predicate: (Float) -> Boolean): Pair<List<Float>, List<Float>> {\n    val first = ArrayList<Float>()\n    val second = ArrayList<Float>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Arrays.Transformations.partitionArrayOfPrimitives\n */\npublic inline fun DoubleArray.partition(predicate: (Double) -> Boolean): Pair<List<Double>, List<Double>> {\n    val first = ArrayList<Double>()\n    val second = ArrayList<Double>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Arrays.Transformations.partitionArrayOfPrimitives\n */\npublic inline fun BooleanArray.partition(predicate: (Boolean) -> Boolean): Pair<List<Boolean>, List<Boolean>> {\n    val first = ArrayList<Boolean>()\n    val second = ArrayList<Boolean>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Arrays.Transformations.partitionArrayOfPrimitives\n */\npublic inline fun CharArray.partition(predicate: (Char) -> Boolean): Pair<List<Char>, List<Char>> {\n    val first = ArrayList<Char>()\n    val second = ArrayList<Char>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <T, R> Array<out T>.zip(other: Array<out R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> ByteArray.zip(other: Array<out R>): List<Pair<Byte, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> ShortArray.zip(other: Array<out R>): List<Pair<Short, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> IntArray.zip(other: Array<out R>): List<Pair<Int, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> LongArray.zip(other: Array<out R>): List<Pair<Long, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> FloatArray.zip(other: Array<out R>): List<Pair<Float, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> DoubleArray.zip(other: Array<out R>): List<Pair<Double, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> BooleanArray.zip(other: Array<out R>): List<Pair<Boolean, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> CharArray.zip(other: Array<out R>): List<Pair<Char, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <T, R, V> Array<out T>.zip(other: Array<out R>, transform: (a: T, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> ByteArray.zip(other: Array<out R>, transform: (a: Byte, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> ShortArray.zip(other: Array<out R>, transform: (a: Short, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> IntArray.zip(other: Array<out R>, transform: (a: Int, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> LongArray.zip(other: Array<out R>, transform: (a: Long, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> FloatArray.zip(other: Array<out R>, transform: (a: Float, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> DoubleArray.zip(other: Array<out R>, transform: (a: Double, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> BooleanArray.zip(other: Array<out R>, transform: (a: Boolean, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> CharArray.zip(other: Array<out R>, transform: (a: Char, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <T, R> Array<out T>.zip(other: Iterable<R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> ByteArray.zip(other: Iterable<R>): List<Pair<Byte, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> ShortArray.zip(other: Iterable<R>): List<Pair<Short, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> IntArray.zip(other: Iterable<R>): List<Pair<Int, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> LongArray.zip(other: Iterable<R>): List<Pair<Long, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> FloatArray.zip(other: Iterable<R>): List<Pair<Float, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> DoubleArray.zip(other: Iterable<R>): List<Pair<Double, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> BooleanArray.zip(other: Iterable<R>): List<Pair<Boolean, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> CharArray.zip(other: Iterable<R>): List<Pair<Char, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <T, R, V> Array<out T>.zip(other: Iterable<R>, transform: (a: T, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> ByteArray.zip(other: Iterable<R>, transform: (a: Byte, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> ShortArray.zip(other: Iterable<R>, transform: (a: Short, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> IntArray.zip(other: Iterable<R>, transform: (a: Int, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> LongArray.zip(other: Iterable<R>, transform: (a: Long, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> FloatArray.zip(other: Iterable<R>, transform: (a: Float, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> DoubleArray.zip(other: Iterable<R>, transform: (a: Double, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> BooleanArray.zip(other: Iterable<R>, transform: (a: Boolean, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> CharArray.zip(other: Iterable<R>, transform: (a: Char, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun ByteArray.zip(other: ByteArray): List<Pair<Byte, Byte>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun ShortArray.zip(other: ShortArray): List<Pair<Short, Short>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun IntArray.zip(other: IntArray): List<Pair<Int, Int>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun LongArray.zip(other: LongArray): List<Pair<Long, Long>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun FloatArray.zip(other: FloatArray): List<Pair<Float, Float>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun DoubleArray.zip(other: DoubleArray): List<Pair<Double, Double>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun BooleanArray.zip(other: BooleanArray): List<Pair<Boolean, Boolean>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun CharArray.zip(other: CharArray): List<Pair<Char, Char>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> ByteArray.zip(other: ByteArray, transform: (a: Byte, b: Byte) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> ShortArray.zip(other: ShortArray, transform: (a: Short, b: Short) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> IntArray.zip(other: IntArray, transform: (a: Int, b: Int) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> LongArray.zip(other: LongArray, transform: (a: Long, b: Long) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> FloatArray.zip(other: FloatArray, transform: (a: Float, b: Float) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> DoubleArray.zip(other: DoubleArray, transform: (a: Double, b: Double) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> BooleanArray.zip(other: BooleanArray, transform: (a: Boolean, b: Boolean) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> CharArray.zip(other: CharArray, transform: (a: Char, b: Char) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <T, A : Appendable> Array<out T>.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            buffer.appendElement(element, transform)\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> ByteArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Byte) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> ShortArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Short) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> IntArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Int) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> LongArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Long) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> FloatArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Float) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> DoubleArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Double) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> BooleanArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Boolean) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> CharArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Char) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element)\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun <T> Array<out T>.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun ByteArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Byte) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun ShortArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Short) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun IntArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Int) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun LongArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Long) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun FloatArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Float) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun DoubleArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Double) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun BooleanArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Boolean) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun CharArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Char) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun <T> Array<out T>.asIterable(): Iterable<T> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun ByteArray.asIterable(): Iterable<Byte> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun ShortArray.asIterable(): Iterable<Short> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun IntArray.asIterable(): Iterable<Int> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun LongArray.asIterable(): Iterable<Long> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun FloatArray.asIterable(): Iterable<Float> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun DoubleArray.asIterable(): Iterable<Double> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun BooleanArray.asIterable(): Iterable<Boolean> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun CharArray.asIterable(): Iterable<Char> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun <T> Array<out T>.asSequence(): Sequence<T> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun ByteArray.asSequence(): Sequence<Byte> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun ShortArray.asSequence(): Sequence<Short> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun IntArray.asSequence(): Sequence<Int> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun LongArray.asSequence(): Sequence<Long> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun FloatArray.asSequence(): Sequence<Float> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun DoubleArray.asSequence(): Sequence<Double> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun BooleanArray.asSequence(): Sequence<Boolean> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun CharArray.asSequence(): Sequence<Char> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfByte\")\npublic fun Array<out Byte>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfShort\")\npublic fun Array<out Short>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfInt\")\npublic fun Array<out Int>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfLong\")\npublic fun Array<out Long>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfFloat\")\npublic fun Array<out Float>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfDouble\")\npublic fun Array<out Double>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun ByteArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun ShortArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun IntArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun LongArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun FloatArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun DoubleArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfByte\")\npublic fun Array<out Byte>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfShort\")\npublic fun Array<out Short>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfInt\")\npublic fun Array<out Int>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfLong\")\npublic fun Array<out Long>.sum(): Long {\n    var sum: Long = 0L\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfFloat\")\npublic fun Array<out Float>.sum(): Float {\n    var sum: Float = 0.0f\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfDouble\")\npublic fun Array<out Double>.sum(): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun ByteArray.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun ShortArray.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun IntArray.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun LongArray.sum(): Long {\n    var sum: Long = 0L\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun FloatArray.sum(): Float {\n    var sum: Float = 0.0f\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun DoubleArray.sum(): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.coroutines\n\nimport kotlin.contracts.*\nimport kotlin.coroutines.intrinsics.*\nimport kotlin.internal.InlineOnly\n\n/**\n * Interface representing a continuation after a suspension point that returns a value of type `T`.\n */\n@SinceKotlin(\"1.3\")\npublic interface Continuation<in T> {\n    /**\n     * The context of the coroutine that corresponds to this continuation.\n     */\n    public val context: CoroutineContext\n\n    /**\n     * Resumes the execution of the corresponding coroutine passing a successful or failed [result] as the\n     * return value of the last suspension point.\n     */\n    public fun resumeWith(result: Result<T>)\n}\n\n/**\n * Classes and interfaces marked with this annotation are restricted when used as receivers for extension\n * `suspend` functions. These `suspend` extensions can only invoke other member or extension `suspend` functions on this particular\n * receiver and are restricted from calling arbitrary suspension functions.\n */\n@SinceKotlin(\"1.3\")\n@Target(AnnotationTarget.CLASS)\n@Retention(AnnotationRetention.BINARY)\npublic annotation class RestrictsSuspension\n\n/**\n * Resumes the execution of the corresponding coroutine passing [value] as the return value of the last suspension point.\n */\n@SinceKotlin(\"1.3\")\n@InlineOnly\npublic inline fun <T> Continuation<T>.resume(value: T): Unit =\n    resumeWith(Result.success(value))\n\n/**\n * Resumes the execution of the corresponding coroutine so that the [exception] is re-thrown right after the\n * last suspension point.\n */\n@SinceKotlin(\"1.3\")\n@InlineOnly\npublic inline fun <T> Continuation<T>.resumeWithException(exception: Throwable): Unit =\n    resumeWith(Result.failure(exception))\n\n\n/**\n * Creates a [Continuation] instance with the given [context] and implementation of [resumeWith] method.\n */\n@SinceKotlin(\"1.3\")\n@InlineOnly\npublic inline fun <T> Continuation(\n    context: CoroutineContext,\n    crossinline resumeWith: (Result<T>) -> Unit\n): Continuation<T> =\n    object : Continuation<T> {\n        override val context: CoroutineContext\n            get() = context\n\n        override fun resumeWith(result: Result<T>) =\n            resumeWith(result)\n    }\n\n/**\n * Creates a coroutine without a receiver and with result type [T].\n * This function creates a new, fresh instance of suspendable computation every time it is invoked.\n *\n * To start executing the created coroutine, invoke `resume(Unit)` on the returned [Continuation] instance.\n * The [completion] continuation is invoked when the coroutine completes with a result or an exception.\n * Subsequent invocation of any resume function on the resulting continuation will produce an [IllegalStateException].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"UNCHECKED_CAST\")\npublic fun <T> (suspend () -> T).createCoroutine(\n    completion: Continuation<T>\n): Continuation<Unit> =\n    SafeContinuation(createCoroutineUnintercepted(completion).intercepted(), COROUTINE_SUSPENDED)\n\n/**\n * Creates a coroutine with receiver type [R] and result type [T].\n * This function creates a new, fresh instance of suspendable computation every time it is invoked.\n *\n * To start executing the created coroutine, invoke `resume(Unit)` on the returned [Continuation] instance.\n * The [completion] continuation is invoked when the coroutine completes with a result or an exception.\n * Subsequent invocation of any resume function on the resulting continuation will produce an [IllegalStateException].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"UNCHECKED_CAST\")\npublic fun <R, T> (suspend R.() -> T).createCoroutine(\n    receiver: R,\n    completion: Continuation<T>\n): Continuation<Unit> =\n    SafeContinuation(createCoroutineUnintercepted(receiver, completion).intercepted(), COROUTINE_SUSPENDED)\n\n/**\n * Starts a coroutine without a receiver and with result type [T].\n * This function creates and starts a new, fresh instance of suspendable computation every time it is invoked.\n * The [completion] continuation is invoked when the coroutine completes with a result or an exception.\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"UNCHECKED_CAST\")\npublic fun <T> (suspend () -> T).startCoroutine(\n    completion: Continuation<T>\n) {\n    createCoroutineUnintercepted(completion).intercepted().resume(Unit)\n}\n\n/**\n * Starts a coroutine with receiver type [R] and result type [T].\n * This function creates and starts a new, fresh instance of suspendable computation every time it is invoked.\n * The [completion] continuation is invoked when the coroutine completes with a result or an exception.\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"UNCHECKED_CAST\")\npublic fun <R, T> (suspend R.() -> T).startCoroutine(\n    receiver: R,\n    completion: Continuation<T>\n) {\n    createCoroutineUnintercepted(receiver, completion).intercepted().resume(Unit)\n}\n\n/**\n * Obtains the current continuation instance inside suspend functions and suspends\n * the currently running coroutine.\n *\n * In this function both [Continuation.resume] and [Continuation.resumeWithException] can be used either synchronously in\n * the same stack-frame where the suspension function is run or asynchronously later in the same thread or\n * from a different thread of execution. Subsequent invocation of any resume function will produce an [IllegalStateException].\n */\n@SinceKotlin(\"1.3\")\n@InlineOnly\npublic suspend inline fun <T> suspendCoroutine(crossinline block: (Continuation<T>) -> Unit): T {\n    contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) }\n    return suspendCoroutineUninterceptedOrReturn { c: Continuation<T> ->\n        val safe = SafeContinuation(c.intercepted())\n        block(safe)\n        safe.getOrThrow()\n    }\n}\n\n/**\n * Returns the context of the current coroutine.\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"WRONG_MODIFIER_TARGET\")\n@InlineOnly\npublic suspend inline val coroutineContext: CoroutineContext\n    get() {\n        throw NotImplementedError(\"Implemented as intrinsic\")\n    }\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"PreconditionsKt\")\n\npackage kotlin\n\nimport kotlin.contracts.contract\n\n/**\n * Throws an [IllegalArgumentException] if the [value] is false.\n *\n * @sample samples.misc.Preconditions.failRequireWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun require(value: Boolean): Unit {\n    contract {\n        returns() implies value\n    }\n    require(value) { \"Failed requirement.\" }\n}\n\n/**\n * Throws an [IllegalArgumentException] with the result of calling [lazyMessage] if the [value] is false.\n *\n * @sample samples.misc.Preconditions.failRequireWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun require(value: Boolean, lazyMessage: () -> Any): Unit {\n    contract {\n        returns() implies value\n    }\n    if (!value) {\n        val message = lazyMessage()\n        throw IllegalArgumentException(message.toString())\n    }\n}\n\n/**\n * Throws an [IllegalArgumentException] if the [value] is null. Otherwise returns the not null value.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T : Any> requireNotNull(value: T?): T {\n    contract {\n        returns() implies (value != null)\n    }\n    return requireNotNull(value) { \"Required value was null.\" }\n}\n\n/**\n * Throws an [IllegalArgumentException] with the result of calling [lazyMessage] if the [value] is null. Otherwise\n * returns the not null value.\n *\n * @sample samples.misc.Preconditions.failRequireNotNullWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T : Any> requireNotNull(value: T?, lazyMessage: () -> Any): T {\n    contract {\n        returns() implies (value != null)\n    }\n\n    if (value == null) {\n        val message = lazyMessage()\n        throw IllegalArgumentException(message.toString())\n    } else {\n        return value\n    }\n}\n\n/**\n * Throws an [IllegalStateException] if the [value] is false.\n *\n * @sample samples.misc.Preconditions.failCheckWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun check(value: Boolean): Unit {\n    contract {\n        returns() implies value\n    }\n    check(value) { \"Check failed.\" }\n}\n\n/**\n * Throws an [IllegalStateException] with the result of calling [lazyMessage] if the [value] is false.\n *\n * @sample samples.misc.Preconditions.failCheckWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun check(value: Boolean, lazyMessage: () -> Any): Unit {\n    contract {\n        returns() implies value\n    }\n    if (!value) {\n        val message = lazyMessage()\n        throw IllegalStateException(message.toString())\n    }\n}\n\n/**\n * Throws an [IllegalStateException] if the [value] is null. Otherwise\n * returns the not null value.\n *\n * @sample samples.misc.Preconditions.failCheckWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T : Any> checkNotNull(value: T?): T {\n    contract {\n        returns() implies (value != null)\n    }\n    return checkNotNull(value) { \"Required value was null.\" }\n}\n\n/**\n * Throws an [IllegalStateException] with the result of calling [lazyMessage]  if the [value] is null. Otherwise\n * returns the not null value.\n *\n * @sample samples.misc.Preconditions.failCheckWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T : Any> checkNotNull(value: T?, lazyMessage: () -> Any): T {\n    contract {\n        returns() implies (value != null)\n    }\n\n    if (value == null) {\n        val message = lazyMessage()\n        throw IllegalStateException(message.toString())\n    } else {\n        return value\n    }\n}\n\n\n/**\n * Throws an [IllegalStateException] with the given [message].\n *\n * @sample samples.misc.Preconditions.failWithError\n */\n@kotlin.internal.InlineOnly\npublic inline fun error(message: Any): Nothing = throw IllegalStateException(message.toString())\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:Suppress(\"UNCHECKED_CAST\", \"RedundantVisibilityModifier\")\n\npackage kotlin\n\nimport kotlin.contracts.*\nimport kotlin.internal.InlineOnly\nimport kotlin.jvm.JvmField\nimport kotlin.jvm.JvmInline\nimport kotlin.jvm.JvmName\n\n/**\n * A discriminated union that encapsulates a successful outcome with a value of type [T]\n * or a failure with an arbitrary [Throwable] exception.\n */\n@SinceKotlin(\"1.3\")\n@JvmInline\npublic value class Result<out T> @PublishedApi internal constructor(\n    @PublishedApi\n    internal val value: Any?\n) : Serializable {\n    // discovery\n\n    /**\n     * Returns `true` if this instance represents a successful outcome.\n     * In this case [isFailure] returns `false`.\n     */\n    public val isSuccess: Boolean get() = value !is Failure\n\n    /**\n     * Returns `true` if this instance represents a failed outcome.\n     * In this case [isSuccess] returns `false`.\n     */\n    public val isFailure: Boolean get() = value is Failure\n\n    // value & exception retrieval\n\n    /**\n     * Returns the encapsulated value if this instance represents [success][Result.isSuccess] or `null`\n     * if it is [failure][Result.isFailure].\n     *\n     * This function is a shorthand for `getOrElse { null }` (see [getOrElse]) or\n     * `fold(onSuccess = { it }, onFailure = { null })` (see [fold]).\n     */\n    @InlineOnly\n    public inline fun getOrNull(): T? =\n        when {\n            isFailure -> null\n            else -> value as T\n        }\n\n    /**\n     * Returns the encapsulated [Throwable] exception if this instance represents [failure][isFailure] or `null`\n     * if it is [success][isSuccess].\n     *\n     * This function is a shorthand for `fold(onSuccess = { null }, onFailure = { it })` (see [fold]).\n     */\n    public fun exceptionOrNull(): Throwable? =\n        when (value) {\n            is Failure -> value.exception\n            else -> null\n        }\n\n    /**\n     * Returns a string `Success(v)` if this instance represents [success][Result.isSuccess]\n     * where `v` is a string representation of the value or a string `Failure(x)` if\n     * it is [failure][isFailure] where `x` is a string representation of the exception.\n     */\n    public override fun toString(): String =\n        when (value) {\n            is Failure -> value.toString() // \"Failure($exception)\"\n            else -> \"Success($value)\"\n        }\n\n    // companion with constructors\n\n    /**\n     * Companion object for [Result] class that contains its constructor functions\n     * [success] and [failure].\n     */\n    public companion object {\n        /**\n         * Returns an instance that encapsulates the given [value] as successful value.\n         */\n        @Suppress(\"INAPPLICABLE_JVM_NAME\")\n        @InlineOnly\n        @JvmName(\"success\")\n        public inline fun <T> success(value: T): Result<T> =\n            Result(value)\n\n        /**\n         * Returns an instance that encapsulates the given [Throwable] [exception] as failure.\n         */\n        @Suppress(\"INAPPLICABLE_JVM_NAME\")\n        @InlineOnly\n        @JvmName(\"failure\")\n        public inline fun <T> failure(exception: Throwable): Result<T> =\n            Result(createFailure(exception))\n    }\n\n    internal class Failure(\n        @JvmField\n        val exception: Throwable\n    ) : Serializable {\n        override fun equals(other: Any?): Boolean = other is Failure && exception == other.exception\n        override fun hashCode(): Int = exception.hashCode()\n        override fun toString(): String = \"Failure($exception)\"\n    }\n}\n\n/**\n * Creates an instance of internal marker [Result.Failure] class to\n * make sure that this class is not exposed in ABI.\n */\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal fun createFailure(exception: Throwable): Any =\n    Result.Failure(exception)\n\n/**\n * Throws exception if the result is failure. This internal function minimizes\n * inlined bytecode for [getOrThrow] and makes sure that in the future we can\n * add some exception-augmenting logic here (if needed).\n */\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal fun Result<*>.throwOnFailure() {\n    if (value is Result.Failure) throw value.exception\n}\n\n/**\n * Calls the specified function [block] and returns its encapsulated result if invocation was successful,\n * catching any [Throwable] exception that was thrown from the [block] function execution and encapsulating it as a failure.\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <R> runCatching(block: () -> R): Result<R> {\n    return try {\n        Result.success(block())\n    } catch (e: Throwable) {\n        Result.failure(e)\n    }\n}\n\n/**\n * Calls the specified function [block] with `this` value as its receiver and returns its encapsulated result if invocation was successful,\n * catching any [Throwable] exception that was thrown from the [block] function execution and encapsulating it as a failure.\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <T, R> T.runCatching(block: T.() -> R): Result<R> {\n    return try {\n        Result.success(block())\n    } catch (e: Throwable) {\n        Result.failure(e)\n    }\n}\n\n// -- extensions ---\n\n/**\n * Returns the encapsulated value if this instance represents [success][Result.isSuccess] or throws the encapsulated [Throwable] exception\n * if it is [failure][Result.isFailure].\n *\n * This function is a shorthand for `getOrElse { throw it }` (see [getOrElse]).\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <T> Result<T>.getOrThrow(): T {\n    throwOnFailure()\n    return value as T\n}\n\n/**\n * Returns the encapsulated value if this instance represents [success][Result.isSuccess] or the\n * result of [onFailure] function for the encapsulated [Throwable] exception if it is [failure][Result.isFailure].\n *\n * Note, that this function rethrows any [Throwable] exception thrown by [onFailure] function.\n *\n * This function is a shorthand for `fold(onSuccess = { it }, onFailure = onFailure)` (see [fold]).\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <R, T : R> Result<T>.getOrElse(onFailure: (exception: Throwable) -> R): R {\n    contract {\n        callsInPlace(onFailure, InvocationKind.AT_MOST_ONCE)\n    }\n    return when (val exception = exceptionOrNull()) {\n        null -> value as T\n        else -> onFailure(exception)\n    }\n}\n\n/**\n * Returns the encapsulated value if this instance represents [success][Result.isSuccess] or the\n * [defaultValue] if it is [failure][Result.isFailure].\n *\n * This function is a shorthand for `getOrElse { defaultValue }` (see [getOrElse]).\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <R, T : R> Result<T>.getOrDefault(defaultValue: R): R {\n    if (isFailure) return defaultValue\n    return value as T\n}\n\n/**\n * Returns the result of [onSuccess] for the encapsulated value if this instance represents [success][Result.isSuccess]\n * or the result of [onFailure] function for the encapsulated [Throwable] exception if it is [failure][Result.isFailure].\n *\n * Note, that this function rethrows any [Throwable] exception thrown by [onSuccess] or by [onFailure] function.\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <R, T> Result<T>.fold(\n    onSuccess: (value: T) -> R,\n    onFailure: (exception: Throwable) -> R\n): R {\n    contract {\n        callsInPlace(onSuccess, InvocationKind.AT_MOST_ONCE)\n        callsInPlace(onFailure, InvocationKind.AT_MOST_ONCE)\n    }\n    return when (val exception = exceptionOrNull()) {\n        null -> onSuccess(value as T)\n        else -> onFailure(exception)\n    }\n}\n\n// transformation\n\n/**\n * Returns the encapsulated result of the given [transform] function applied to the encapsulated value\n * if this instance represents [success][Result.isSuccess] or the\n * original encapsulated [Throwable] exception if it is [failure][Result.isFailure].\n *\n * Note, that this function rethrows any [Throwable] exception thrown by [transform] function.\n * See [mapCatching] for an alternative that encapsulates exceptions.\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <R, T> Result<T>.map(transform: (value: T) -> R): Result<R> {\n    contract {\n        callsInPlace(transform, InvocationKind.AT_MOST_ONCE)\n    }\n    return when {\n        isSuccess -> Result.success(transform(value as T))\n        else -> Result(value)\n    }\n}\n\n/**\n * Returns the encapsulated result of the given [transform] function applied to the encapsulated value\n * if this instance represents [success][Result.isSuccess] or the\n * original encapsulated [Throwable] exception if it is [failure][Result.isFailure].\n *\n * This function catches any [Throwable] exception thrown by [transform] function and encapsulates it as a failure.\n * See [map] for an alternative that rethrows exceptions from `transform` function.\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <R, T> Result<T>.mapCatching(transform: (value: T) -> R): Result<R> {\n    return when {\n        isSuccess -> runCatching { transform(value as T) }\n        else -> Result(value)\n    }\n}\n\n/**\n * Returns the encapsulated result of the given [transform] function applied to the encapsulated [Throwable] exception\n * if this instance represents [failure][Result.isFailure] or the\n * original encapsulated value if it is [success][Result.isSuccess].\n *\n * Note, that this function rethrows any [Throwable] exception thrown by [transform] function.\n * See [recoverCatching] for an alternative that encapsulates exceptions.\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <R, T : R> Result<T>.recover(transform: (exception: Throwable) -> R): Result<R> {\n    contract {\n        callsInPlace(transform, InvocationKind.AT_MOST_ONCE)\n    }\n    return when (val exception = exceptionOrNull()) {\n        null -> this\n        else -> Result.success(transform(exception))\n    }\n}\n\n/**\n * Returns the encapsulated result of the given [transform] function applied to the encapsulated [Throwable] exception\n * if this instance represents [failure][Result.isFailure] or the\n * original encapsulated value if it is [success][Result.isSuccess].\n *\n * This function catches any [Throwable] exception thrown by [transform] function and encapsulates it as a failure.\n * See [recover] for an alternative that rethrows exceptions.\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <R, T : R> Result<T>.recoverCatching(transform: (exception: Throwable) -> R): Result<R> {\n    return when (val exception = exceptionOrNull()) {\n        null -> this\n        else -> runCatching { transform(exception) }\n    }\n}\n\n// \"peek\" onto value/exception and pipe\n\n/**\n * Performs the given [action] on the encapsulated [Throwable] exception if this instance represents [failure][Result.isFailure].\n * Returns the original `Result` unchanged.\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <T> Result<T>.onFailure(action: (exception: Throwable) -> Unit): Result<T> {\n    contract {\n        callsInPlace(action, InvocationKind.AT_MOST_ONCE)\n    }\n    exceptionOrNull()?.let { action(it) }\n    return this\n}\n\n/**\n * Performs the given [action] on the encapsulated value if this instance represents [success][Result.isSuccess].\n * Returns the original `Result` unchanged.\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <T> Result<T>.onSuccess(action: (value: T) -> Unit): Result<T> {\n    contract {\n        callsInPlace(action, InvocationKind.AT_MOST_ONCE)\n    }\n    if (isSuccess) action(value as T)\n    return this\n}\n\n// -------------------\n",null,null,"/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StringsKt\")\n@file:Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\")\n\npackage kotlin.text\n\nimport kotlin.contracts.*\n\n/**\n * A mutable sequence of characters.\n *\n * String builder can be used to efficiently perform multiple string manipulation operations.\n */\nexpect class StringBuilder : Appendable, CharSequence {\n    /** Constructs an empty string builder. */\n    constructor()\n\n    /** Constructs an empty string builder with the specified initial [capacity]. */\n    constructor(capacity: Int)\n\n    /** Constructs a string builder that contains the same characters as the specified [content] char sequence. */\n    constructor(content: CharSequence)\n\n    /** Constructs a string builder that contains the same characters as the specified [content] string. */\n    @SinceKotlin(\"1.3\")\n//    @ExperimentalStdlibApi\n    constructor(content: String)\n\n    override val length: Int\n\n    override operator fun get(index: Int): Char\n\n    override fun subSequence(startIndex: Int, endIndex: Int): CharSequence\n\n    override fun append(value: Char): StringBuilder\n    override fun append(value: CharSequence?): StringBuilder\n    override fun append(value: CharSequence?, startIndex: Int, endIndex: Int): StringBuilder\n\n    /**\n     * Reverses the contents of this string builder and returns this instance.\n     *\n     * Surrogate pairs included in this string builder are treated as single characters.\n     * Therefore, the order of the high-low surrogates is never reversed.\n     *\n     * Note that the reverse operation may produce new surrogate pairs that were unpaired low-surrogates and high-surrogates before the operation.\n     * For example, reversing `\"\\uDC00\\uD800\"` produces `\"\\uD800\\uDC00\"` which is a valid surrogate pair.\n     */\n    fun reverse(): StringBuilder\n\n    /**\n     * Appends the string representation of the specified object [value] to this string builder and returns this instance.\n     *\n     * The overall effect is exactly as if the [value] were converted to a string by the `value.toString()` method,\n     * and then that string was appended to this string builder.\n     */\n    fun append(value: Any?): StringBuilder\n\n    /**\n     * Appends the string representation of the specified boolean [value] to this string builder and returns this instance.\n     *\n     * The overall effect is exactly as if the [value] were converted to a string by the `value.toString()` method,\n     * and then that string was appended to this string builder.\n     */\n    @SinceKotlin(\"1.3\")\n    fun append(value: Boolean): StringBuilder\n\n    /**\n     * Appends characters in the specified character array [value] to this string builder and returns this instance.\n     *\n     * Characters are appended in order, starting at the index 0.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    fun append(value: CharArray): StringBuilder\n\n    /**\n     * Appends the specified string [value] to this string builder and returns this instance.\n     *\n     * If [value] is `null`, then the four characters `\"null\"` are appended.\n     */\n    @SinceKotlin(\"1.3\")\n    fun append(value: String?): StringBuilder\n\n    /**\n     * Returns the current capacity of this string builder.\n     *\n     * The capacity is the maximum length this string builder can have before an allocation occurs.\n     */\n    @SinceKotlin(\"1.3\")\n//    @ExperimentalStdlibApi\n    @Deprecated(\"Obtaining StringBuilder capacity is not supported in JS and common code.\", level = DeprecationLevel.ERROR)\n    fun capacity(): Int\n\n    /**\n     * Ensures that the capacity of this string builder is at least equal to the specified [minimumCapacity].\n     *\n     * If the current capacity is less than the [minimumCapacity], a new backing storage is allocated with greater capacity.\n     * Otherwise, this method takes no action and simply returns.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    fun ensureCapacity(minimumCapacity: Int)\n\n    /**\n     * Returns the index within this string builder of the first occurrence of the specified [string].\n     *\n     * Returns `-1` if the specified [string] does not occur in this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    fun indexOf(string: String): Int\n\n    /**\n     * Returns the index within this string builder of the first occurrence of the specified [string],\n     * starting at the specified [startIndex].\n     *\n     * Returns `-1` if the specified [string] does not occur in this string builder starting at the specified [startIndex].\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    fun indexOf(string: String, startIndex: Int): Int\n\n    /**\n     * Returns the index within this string builder of the last occurrence of the specified [string].\n     * The last occurrence of empty string `\"\"` is considered to be at the index equal to `this.length`.\n     *\n     * Returns `-1` if the specified [string] does not occur in this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    fun lastIndexOf(string: String): Int\n\n    /**\n     * Returns the index within this string builder of the last occurrence of the specified [string],\n     * starting from the specified [startIndex] toward the beginning.\n     *\n     * Returns `-1` if the specified [string] does not occur in this string builder starting at the specified [startIndex].\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    fun lastIndexOf(string: String, startIndex: Int): Int\n\n    /**\n     * Inserts the string representation of the specified boolean [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * The overall effect is exactly as if the [value] were converted to a string by the `value.toString()` method,\n     * and then that string was inserted into this string builder at the specified [index].\n     *\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    fun insert(index: Int, value: Boolean): StringBuilder\n\n    /**\n     * Inserts the specified character [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    fun insert(index: Int, value: Char): StringBuilder\n\n    /**\n     * Inserts characters in the specified character array [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * The inserted characters go in same order as in the [value] character array, starting at [index].\n     *\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    fun insert(index: Int, value: CharArray): StringBuilder\n\n    /**\n     * Inserts characters in the specified character sequence [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * The inserted characters go in the same order as in the [value] character sequence, starting at [index].\n     *\n     * @param index the position in this string builder to insert at.\n     * @param value the character sequence from which characters are inserted. If [value] is `null`, then the four characters `\"null\"` are inserted.\n     *\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    fun insert(index: Int, value: CharSequence?): StringBuilder\n\n    /**\n     * Inserts the string representation of the specified object [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * The overall effect is exactly as if the [value] were converted to a string by the `value.toString()` method,\n     * and then that string was inserted into this string builder at the specified [index].\n     *\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    fun insert(index: Int, value: Any?): StringBuilder\n\n    /**\n     * Inserts the string [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * If [value] is `null`, then the four characters `\"null\"` are inserted.\n     *\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    fun insert(index: Int, value: String?): StringBuilder\n\n    /**\n     *  Sets the length of this string builder to the specified [newLength].\n     *\n     *  If the [newLength] is less than the current length, it is changed to the specified [newLength].\n     *  Otherwise, null characters '\\u0000' are appended to this string builder until its length is less than the [newLength].\n     *\n     *  Note that in Kotlin/JS [set] operator function has non-constant execution time complexity.\n     *  Therefore, increasing length of this string builder and then updating each character by index may slow down your program.\n     *\n     *  @throws IndexOutOfBoundsException or [IllegalArgumentException] if [newLength] is less than zero.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    fun setLength(newLength: Int)\n\n    /**\n     * Returns a new [String] that contains characters in this string builder at [startIndex] (inclusive) and up to the [length] (exclusive).\n     *\n     * @throws IndexOutOfBoundsException if [startIndex] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    fun substring(startIndex: Int): String\n\n    /**\n     * Returns a new [String] that contains characters in this string builder at [startIndex] (inclusive) and up to the [endIndex] (exclusive).\n     *\n     * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this string builder indices or when `startIndex > endIndex`.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    fun substring(startIndex: Int, endIndex: Int): String\n\n    /**\n     * Attempts to reduce storage used for this string builder.\n     *\n     * If the backing storage of this string builder is larger than necessary to hold its current contents,\n     * then it may be resized to become more space efficient.\n     * Calling this method may, but is not required to, affect the value of the [capacity] property.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    fun trimToSize()\n}\n\n\n/**\n * Clears the content of this string builder making it empty and returns this instance.\n *\n * @sample samples.text.Strings.clearStringBuilder\n */\n@SinceKotlin(\"1.3\")\npublic expect fun StringBuilder.clear(): StringBuilder\n\n/**\n * Sets the character at the specified [index] to the specified [value].\n *\n * @throws IndexOutOfBoundsException if [index] is out of bounds of this string builder.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic expect operator fun StringBuilder.set(index: Int, value: Char)\n\n/**\n * Replaces characters in the specified range of this string builder with characters in the specified string [value] and returns this instance.\n *\n * @param startIndex the beginning (inclusive) of the range to replace.\n * @param endIndex the end (exclusive) of the range to replace.\n * @param value the string to replace with.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] if [startIndex] is less than zero, greater than the length of this string builder, or `startIndex > endIndex`.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic expect fun StringBuilder.setRange(startIndex: Int, endIndex: Int, value: String): StringBuilder\n\n/**\n * Removes the character at the specified [index] from this string builder and returns this instance.\n *\n * If the `Char` at the specified [index] is part of a supplementary code point, this method does not remove the entire supplementary character.\n *\n * @param index the index of `Char` to remove.\n *\n * @throws IndexOutOfBoundsException if [index] is out of bounds of this string builder.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic expect fun StringBuilder.deleteAt(index: Int): StringBuilder\n\n/**\n * Removes characters in the specified range from this string builder and returns this instance.\n *\n * @param startIndex the beginning (inclusive) of the range to remove.\n * @param endIndex the end (exclusive) of the range to remove.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] is out of range of this string builder indices or when `startIndex > endIndex`.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic expect fun StringBuilder.deleteRange(startIndex: Int, endIndex: Int): StringBuilder\n\n/**\n * Copies characters from this string builder into the [destination] character array.\n *\n * @param destination the array to copy to.\n * @param destinationOffset the position in the array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the range to copy, 0 by default.\n * @param endIndex the end (exclusive) of the range to copy, length of this string builder by default.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this string builder indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n *  or when that index is out of the [destination] array indices range.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic expect fun StringBuilder.toCharArray(destination: CharArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = this.length)\n\n/**\n * Appends characters in a subarray of the specified character array [value] to this string builder and returns this instance.\n *\n * Characters are appended in order, starting at specified [startIndex].\n *\n * @param value the array from which characters are appended.\n * @param startIndex the beginning (inclusive) of the subarray to append.\n * @param endIndex the end (exclusive) of the subarray to append.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of the [value] array indices or when `startIndex > endIndex`.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic expect fun StringBuilder.appendRange(value: CharArray, startIndex: Int, endIndex: Int): StringBuilder\n\n/**\n * Appends a subsequence of the specified character sequence [value] to this string builder and returns this instance.\n *\n * @param value the character sequence from which a subsequence is appended.\n * @param startIndex the beginning (inclusive) of the subsequence to append.\n * @param endIndex the end (exclusive) of the subsequence to append.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of the [value] character sequence indices or when `startIndex > endIndex`.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic expect fun StringBuilder.appendRange(value: CharSequence, startIndex: Int, endIndex: Int): StringBuilder\n\n/**\n * Inserts characters in a subarray of the specified character array [value] into this string builder at the specified [index] and returns this instance.\n *\n * The inserted characters go in same order as in the [value] array, starting at [index].\n *\n * @param index the position in this string builder to insert at.\n * @param value the array from which characters are inserted.\n * @param startIndex the beginning (inclusive) of the subarray to insert.\n * @param endIndex the end (exclusive) of the subarray to insert.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of the [value] array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic expect fun StringBuilder.insertRange(index: Int, value: CharArray, startIndex: Int, endIndex: Int): StringBuilder\n\n/**\n * Inserts characters in a subsequence of the specified character sequence [value] into this string builder at the specified [index] and returns this instance.\n *\n * The inserted characters go in the same order as in the [value] character sequence, starting at [index].\n *\n * @param index the position in this string builder to insert at.\n * @param value the character sequence from which a subsequence is inserted.\n * @param startIndex the beginning (inclusive) of the subsequence to insert.\n * @param endIndex the end (exclusive) of the subsequence to insert.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of the [value] character sequence indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic expect fun StringBuilder.insertRange(index: Int, value: CharSequence, startIndex: Int, endIndex: Int): StringBuilder\n\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\")\n@Deprecated(\"Use append(value: Any?) instead\", ReplaceWith(\"append(value = obj)\"), DeprecationLevel.WARNING)\n@kotlin.internal.InlineOnly\npublic inline fun StringBuilder.append(obj: Any?): StringBuilder = this.append(obj)\n\n/**\n * Builds new string by populating newly created [StringBuilder] using provided [builderAction]\n * and then converting it to [String].\n */\n@kotlin.internal.InlineOnly\npublic inline fun buildString(builderAction: StringBuilder.() -> Unit): String {\n    contract { callsInPlace(builderAction, InvocationKind.EXACTLY_ONCE) }\n    return StringBuilder().apply(builderAction).toString()\n}\n\n/**\n * Builds new string by populating newly created [StringBuilder] initialized with the given [capacity]\n * using provided [builderAction] and then converting it to [String].\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun buildString(capacity: Int, builderAction: StringBuilder.() -> Unit): String {\n    contract { callsInPlace(builderAction, InvocationKind.EXACTLY_ONCE) }\n    return StringBuilder(capacity).apply(builderAction).toString()\n}\n\n/**\n * Appends all arguments to the given StringBuilder.\n */\npublic fun StringBuilder.append(vararg value: String?): StringBuilder {\n    for (item in value)\n        append(item)\n    return this\n}\n\n/**\n * Appends all arguments to the given StringBuilder.\n */\npublic fun StringBuilder.append(vararg value: Any?): StringBuilder {\n    for (item in value)\n        append(item)\n    return this\n}\n\n/** Appends a line feed character (`\\n`) to this StringBuilder. */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun StringBuilder.appendLine(): StringBuilder = append('\\n')\n\n/** Appends [value] to this [StringBuilder], followed by a line feed character (`\\n`). */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun StringBuilder.appendLine(value: CharSequence?): StringBuilder = append(value).appendLine()\n\n/** Appends [value] to this [StringBuilder], followed by a line feed character (`\\n`). */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun StringBuilder.appendLine(value: String?): StringBuilder = append(value).appendLine()\n\n/** Appends [value] to this [StringBuilder], followed by a line feed character (`\\n`). */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun StringBuilder.appendLine(value: Any?): StringBuilder = append(value).appendLine()\n\n/** Appends [value] to this [StringBuilder], followed by a line feed character (`\\n`). */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun StringBuilder.appendLine(value: CharArray): StringBuilder = append(value).appendLine()\n\n/** Appends [value] to this [StringBuilder], followed by a line feed character (`\\n`). */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun StringBuilder.appendLine(value: Char): StringBuilder = append(value).appendLine()\n\n/** Appends [value] to this [StringBuilder], followed by a line feed character (`\\n`). */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun StringBuilder.appendLine(value: Boolean): StringBuilder = append(value).appendLine()\n","/*\n * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\npackage kotlin.math\n\n\nimport kotlin.internal.InlineOnly\nimport kotlin.js.JsMath as nativeMath\n\n\n// region ================ Double Math ========================================\n\n/** Computes the sine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `sin(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sin(x: Double): Double = nativeMath.sin(x)\n\n/** Computes the cosine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `cos(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun cos(x: Double): Double = nativeMath.cos(x)\n\n/** Computes the tangent of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `tan(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun tan(x: Double): Double = nativeMath.tan(x)\n\n/**\n * Computes the arc sine of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *    - `asin(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun asin(x: Double): Double = nativeMath.asin(x)\n\n/**\n * Computes the arc cosine of the value [x];\n * the returned value is an angle in the range from `0.0` to `PI` radians.\n *\n * Special cases:\n *    - `acos(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun acos(x: Double): Double = nativeMath.acos(x)\n\n/**\n * Computes the arc tangent of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *   - `atan(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atan(x: Double): Double = nativeMath.atan(x)\n\n/**\n * Returns the angle `theta` of the polar coordinates `(r, theta)` that correspond\n * to the rectangular coordinates `(x, y)` by computing the arc tangent of the value [y] / [x];\n * the returned value is an angle in the range from `-PI` to `PI` radians.\n *\n * Special cases:\n *   - `atan2(0.0, 0.0)` is `0.0`\n *   - `atan2(0.0, x)` is  `0.0` for `x > 0` and `PI` for `x < 0`\n *   - `atan2(-0.0, x)` is `-0.0` for 'x > 0` and `-PI` for `x < 0`\n *   - `atan2(y, +Inf)` is `0.0` for `0 < y < +Inf` and `-0.0` for '-Inf < y < 0`\n *   - `atan2(y, -Inf)` is `PI` for `0 < y < +Inf` and `-PI` for `-Inf < y < 0`\n *   - `atan2(y, 0.0)` is `PI/2` for `y > 0` and `-PI/2` for `y < 0`\n *   - `atan2(+Inf, x)` is `PI/2` for finite `x`y\n *   - `atan2(-Inf, x)` is `-PI/2` for finite `x`\n *   - `atan2(NaN, x)` and `atan2(y, NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atan2(y: Double, x: Double): Double = nativeMath.atan2(y, x)\n\n/**\n * Computes the hyperbolic sine of the value [x].\n *\n * Special cases:\n *   - `sinh(NaN)` is `NaN`\n *   - `sinh(+Inf)` is `+Inf`\n *   - `sinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sinh(x: Double): Double = nativeMath.sinh(x)\n\n/**\n * Computes the hyperbolic cosine of the value [x].\n *\n * Special cases:\n *   - `cosh(NaN)` is `NaN`\n *   - `cosh(+Inf|-Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun cosh(x: Double): Double = nativeMath.cosh(x)\n\n/**\n * Computes the hyperbolic tangent of the value [x].\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(+Inf)` is `1.0`\n *   - `tanh(-Inf)` is `-1.0`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun tanh(x: Double): Double = nativeMath.tanh(x)\n\n/**\n * Computes the inverse hyperbolic sine of the value [x].\n *\n * The returned value is `y` such that `sinh(y) == x`.\n *\n * Special cases:\n *   - `asinh(NaN)` is `NaN`\n *   - `asinh(+Inf)` is `+Inf`\n *   - `asinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun asinh(x: Double): Double = nativeMath.asinh(x)\n\n/**\n * Computes the inverse hyperbolic cosine of the value [x].\n *\n * The returned value is positive `y` such that `cosh(y) == x`.\n *\n * Special cases:\n *   - `acosh(NaN)` is `NaN`\n *   - `acosh(x)` is `NaN` when `x < 1`\n *   - `acosh(+Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun acosh(x: Double): Double = nativeMath.acosh(x)\n\n/**\n * Computes the inverse hyperbolic tangent of the value [x].\n *\n * The returned value is `y` such that `tanh(y) == x`.\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(x)` is `NaN` when `x > 1` or `x < -1`\n *   - `tanh(1.0)` is `+Inf`\n *   - `tanh(-1.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atanh(x: Double): Double = nativeMath.atanh(x)\n\n/**\n * Computes `sqrt(x^2 + y^2)` without intermediate overflow or underflow.\n *\n * Special cases:\n *   - returns `+Inf` if any of arguments is infinite\n *   - returns `NaN` if any of arguments is `NaN` and the other is not infinite\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun hypot(x: Double, y: Double): Double = nativeMath.hypot(x, y)\n\n/**\n * Computes the positive square root of the value [x].\n *\n * Special cases:\n *   - `sqrt(x)` is `NaN` when `x < 0` or `x` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sqrt(x: Double): Double = nativeMath.sqrt(x)\n\n/**\n * Computes Euler's number `e` raised to the power of the value [x].\n *\n * Special cases:\n *   - `exp(NaN)` is `NaN`\n *   - `exp(+Inf)` is `+Inf`\n *   - `exp(-Inf)` is `0.0`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun exp(x: Double): Double = nativeMath.exp(x)\n\n/**\n * Computes `exp(x) - 1`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `expm1(NaN)` is `NaN`\n *   - `expm1(+Inf)` is `+Inf`\n *   - `expm1(-Inf)` is `-1.0`\n *\n * @see [exp] function.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun expm1(x: Double): Double = nativeMath.expm1(x)\n\n/**\n * Computes the logarithm of the value [x] to the given [base].\n *\n * Special cases:\n *   - `log(x, b)` is `NaN` if either `x` or `b` are `NaN`\n *   - `log(x, b)` is `NaN` when `x < 0` or `b <= 0` or `b == 1.0`\n *   - `log(+Inf, +Inf)` is `NaN`\n *   - `log(+Inf, b)` is `+Inf` for `b > 1` and `-Inf` for `b < 1`\n *   - `log(0.0, b)` is `-Inf` for `b > 1` and `+Inf` for `b > 1`\n *\n * See also logarithm functions for common fixed bases: [ln], [log10] and [log2].\n */\n@SinceKotlin(\"1.2\")\npublic actual fun log(x: Double, base: Double): Double {\n    if (base <= 0.0 || base == 1.0) return Double.NaN\n    return nativeMath.log(x) / nativeMath.log(base)\n}\n\n/**\n * Computes the natural logarithm (base `E`) of the value [x].\n *\n * Special cases:\n *   - `ln(NaN)` is `NaN`\n *   - `ln(x)` is `NaN` when `x < 0.0`\n *   - `ln(+Inf)` is `+Inf`\n *   - `ln(0.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ln(x: Double): Double = nativeMath.log(x)\n\n/**\n * Computes the common logarithm (base 10) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun log10(x: Double): Double = nativeMath.log10(x)\n\n/**\n * Computes the binary logarithm (base 2) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun log2(x: Double): Double = nativeMath.log2(x)\n\n/**\n * Computes `ln(x + 1)`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `ln1p(NaN)` is `NaN`\n *   - `ln1p(x)` is `NaN` where `x < -1.0`\n *   - `ln1p(-1.0)` is `-Inf`\n *   - `ln1p(+Inf)` is `+Inf`\n *\n * @see [ln] function\n * @see [expm1] function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ln1p(x: Double): Double = nativeMath.log1p(x)\n\n/**\n * Rounds the given value [x] to an integer towards positive infinity.\n\n * @return the smallest double value that is greater than or equal to the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `ceil(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ceil(x: Double): Double = nativeMath.ceil(x)\n\n/**\n * Rounds the given value [x] to an integer towards negative infinity.\n\n * @return the largest double value that is smaller than or equal to the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `floor(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun floor(x: Double): Double = nativeMath.floor(x)\n\n/**\n * Rounds the given value [x] to an integer towards zero.\n *\n * @return the value [x] having its fractional part truncated.\n *\n * Special cases:\n *   - `truncate(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun truncate(x: Double): Double = nativeMath.trunc(x)\n\n/**\n * Rounds the given value [x] towards the closest integer with ties rounded towards even integer.\n *\n * Special cases:\n *   - `round(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun round(x: Double): Double {\n    if (x % 0.5 != 0.0) {\n        return nativeMath.round(x)\n    }\n    val floor = floor(x)\n    return if (floor % 2 == 0.0) floor else ceil(x)\n}\n\n/**\n * Returns the absolute value of the given value [x].\n *\n * Special cases:\n *   - `abs(NaN)` is `NaN`\n *\n * @see absoluteValue extension property for [Double]\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun abs(x: Double): Double = nativeMath.abs(x)\n\n/**\n * Returns the sign of the given value [x]:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `sign(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sign(x: Double): Double = nativeMath.sign(x)\n\n\n/**\n * Returns the smaller of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun min(a: Double, b: Double): Double = nativeMath.min(a, b)\n\n/**\n * Returns the greater of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun max(a: Double, b: Double): Double = nativeMath.max(a, b)\n\n// extensions\n\n/**\n * Raises this value to the power [x].\n *\n * Special cases:\n *   - `b.pow(0.0)` is `1.0`\n *   - `b.pow(1.0) == b`\n *   - `b.pow(NaN)` is `NaN`\n *   - `NaN.pow(x)` is `NaN` for `x != 0.0`\n *   - `b.pow(Inf)` is `NaN` for `abs(b) == 1.0`\n *   - `b.pow(x)` is `NaN` for `b < 0` and `x` is finite and not an integer\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Double.pow(x: Double): Double = nativeMath.pow(this, x)\n\n/**\n * Raises this value to the integer power [n].\n *\n * See the other overload of [pow] for details.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Double.pow(n: Int): Double = nativeMath.pow(this, n.toDouble())\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `NaN.absoluteValue` is `NaN`\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Double.absoluteValue: Double get() = nativeMath.abs(this)\n\n/**\n * Returns the sign of this value:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `NaN.sign` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Double.sign: Double get() = nativeMath.sign(this)\n\n/**\n * Returns this value with the sign bit same as of the [sign] value.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Double.withSign(sign: Int): Double = this.withSign(sign.toDouble())\n\n/**\n * Returns the ulp (unit in the last place) of this value.\n *\n * An ulp is a positive distance between this value and the next nearest [Double] value larger in magnitude.\n *\n * Special Cases:\n *   - `NaN.ulp` is `NaN`\n *   - `x.ulp` is `+Inf` when `x` is `+Inf` or `-Inf`\n *   - `0.0.ulp` is `Double.MIN_VALUE`\n */\n@SinceKotlin(\"1.2\")\npublic actual val Double.ulp: Double get() = when {\n    this < 0 -> (-this).ulp\n    this.isNaN() || this == Double.POSITIVE_INFINITY -> this\n    this == Double.MAX_VALUE -> this - this.nextDown()\n    else -> this.nextUp() - this\n}\n\n/**\n * Returns the [Double] value nearest to this value in direction of positive infinity.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Double.nextUp(): Double = when {\n    this.isNaN() || this == Double.POSITIVE_INFINITY -> this\n    this == 0.0 -> Double.MIN_VALUE\n    else -> Double.fromBits(this.toRawBits() + if (this > 0) 1 else -1)\n}\n\n/**\n * Returns the [Double] value nearest to this value in direction of negative infinity.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Double.nextDown(): Double = when {\n    this.isNaN() || this == Double.NEGATIVE_INFINITY -> this\n    this == 0.0 -> -Double.MIN_VALUE\n    else -> Double.fromBits(this.toRawBits() + if (this > 0) -1 else 1)\n}\n\n\n/**\n * Returns the [Double] value nearest to this value in direction from this value towards the value [to].\n *\n * Special cases:\n *   - `x.nextTowards(y)` is `NaN` if either `x` or `y` are `NaN`\n *   - `x.nextTowards(x) == x`\n *\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Double.nextTowards(to: Double): Double = when {\n    this.isNaN() || to.isNaN() -> Double.NaN\n    to == this -> to\n    to > this -> this.nextUp()\n    else /* to < this */ -> this.nextDown()\n}\n\n\n/**\n * Rounds this [Double] value to the nearest integer and converts the result to [Int].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToInt() == Int.MAX_VALUE` when `x > Int.MAX_VALUE`\n *   - `x.roundToInt() == Int.MIN_VALUE` when `x < Int.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Double.roundToInt(): Int = when {\n    isNaN() -> throw IllegalArgumentException(\"Cannot round NaN value.\")\n    this > Int.MAX_VALUE -> Int.MAX_VALUE\n    this < Int.MIN_VALUE -> Int.MIN_VALUE\n    else -> nativeMath.round(this).toInt()\n}\n\n/**\n * Rounds this [Double] value to the nearest integer and converts the result to [Long].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToLong() == Long.MAX_VALUE` when `x > Long.MAX_VALUE`\n *   - `x.roundToLong() == Long.MIN_VALUE` when `x < Long.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Double.roundToLong(): Long = when {\n    isNaN() -> throw IllegalArgumentException(\"Cannot round NaN value.\")\n    this > Long.MAX_VALUE -> Long.MAX_VALUE\n    this < Long.MIN_VALUE -> Long.MIN_VALUE\n    else -> nativeMath.round(this).toLong()\n}\n\n// endregion\n\n\n\n// region ================ Float Math ========================================\n\n/** Computes the sine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `sin(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sin(x: Float): Float = nativeMath.sin(x.toDouble()).toFloat()\n\n/** Computes the cosine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `cos(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun cos(x: Float): Float = nativeMath.cos(x.toDouble()).toFloat()\n\n/** Computes the tangent of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `tan(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun tan(x: Float): Float = nativeMath.tan(x.toDouble()).toFloat()\n\n/**\n * Computes the arc sine of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *    - `asin(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun asin(x: Float): Float = nativeMath.asin(x.toDouble()).toFloat()\n\n/**\n * Computes the arc cosine of the value [x];\n * the returned value is an angle in the range from `0.0` to `PI` radians.\n *\n * Special cases:\n *    - `acos(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun acos(x: Float): Float = nativeMath.acos(x.toDouble()).toFloat()\n\n/**\n * Computes the arc tangent of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *   - `atan(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atan(x: Float): Float = nativeMath.atan(x.toDouble()).toFloat()\n\n/**\n * Returns the angle `theta` of the polar coordinates `(r, theta)` that correspond\n * to the rectangular coordinates `(x, y)` by computing the arc tangent of the value [y] / [x];\n * the returned value is an angle in the range from `-PI` to `PI` radians.\n *\n * Special cases:\n *   - `atan2(0.0, 0.0)` is `0.0`\n *   - `atan2(0.0, x)` is  `0.0` for `x > 0` and `PI` for `x < 0`\n *   - `atan2(-0.0, x)` is `-0.0` for 'x > 0` and `-PI` for `x < 0`\n *   - `atan2(y, +Inf)` is `0.0` for `0 < y < +Inf` and `-0.0` for '-Inf < y < 0`\n *   - `atan2(y, -Inf)` is `PI` for `0 < y < +Inf` and `-PI` for `-Inf < y < 0`\n *   - `atan2(y, 0.0)` is `PI/2` for `y > 0` and `-PI/2` for `y < 0`\n *   - `atan2(+Inf, x)` is `PI/2` for finite `x`y\n *   - `atan2(-Inf, x)` is `-PI/2` for finite `x`\n *   - `atan2(NaN, x)` and `atan2(y, NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atan2(y: Float, x: Float): Float = nativeMath.atan2(y.toDouble(), x.toDouble()).toFloat()\n\n/**\n * Computes the hyperbolic sine of the value [x].\n *\n * Special cases:\n *   - `sinh(NaN)` is `NaN`\n *   - `sinh(+Inf)` is `+Inf`\n *   - `sinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sinh(x: Float): Float = nativeMath.sinh(x.toDouble()).toFloat()\n\n/**\n * Computes the hyperbolic cosine of the value [x].\n *\n * Special cases:\n *   - `cosh(NaN)` is `NaN`\n *   - `cosh(+Inf|-Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun cosh(x: Float): Float = nativeMath.cosh(x.toDouble()).toFloat()\n\n/**\n * Computes the hyperbolic tangent of the value [x].\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(+Inf)` is `1.0`\n *   - `tanh(-Inf)` is `-1.0`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun tanh(x: Float): Float = nativeMath.tanh(x.toDouble()).toFloat()\n\n/**\n * Computes the inverse hyperbolic sine of the value [x].\n *\n * The returned value is `y` such that `sinh(y) == x`.\n *\n * Special cases:\n *   - `asinh(NaN)` is `NaN`\n *   - `asinh(+Inf)` is `+Inf`\n *   - `asinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun asinh(x: Float): Float = nativeMath.asinh(x.toDouble()).toFloat()\n\n/**\n * Computes the inverse hyperbolic cosine of the value [x].\n *\n * The returned value is positive `y` such that `cosh(y) == x`.\n *\n * Special cases:\n *   - `acosh(NaN)` is `NaN`\n *   - `acosh(x)` is `NaN` when `x < 1`\n *   - `acosh(+Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun acosh(x: Float): Float = nativeMath.acosh(x.toDouble()).toFloat()\n\n/**\n * Computes the inverse hyperbolic tangent of the value [x].\n *\n * The returned value is `y` such that `tanh(y) == x`.\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(x)` is `NaN` when `x > 1` or `x < -1`\n *   - `tanh(1.0)` is `+Inf`\n *   - `tanh(-1.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atanh(x: Float): Float = nativeMath.atanh(x.toDouble()).toFloat()\n\n/**\n * Computes `sqrt(x^2 + y^2)` without intermediate overflow or underflow.\n *\n * Special cases:\n *   - returns `+Inf` if any of arguments is infinite\n *   - returns `NaN` if any of arguments is `NaN` and the other is not infinite\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun hypot(x: Float, y: Float): Float = nativeMath.hypot(x.toDouble(), y.toDouble()).toFloat()\n\n/**\n * Computes the positive square root of the value [x].\n *\n * Special cases:\n *   - `sqrt(x)` is `NaN` when `x < 0` or `x` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sqrt(x: Float): Float = nativeMath.sqrt(x.toDouble()).toFloat()\n\n/**\n * Computes Euler's number `e` raised to the power of the value [x].\n *\n * Special cases:\n *   - `exp(NaN)` is `NaN`\n *   - `exp(+Inf)` is `+Inf`\n *   - `exp(-Inf)` is `0.0`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun exp(x: Float): Float = nativeMath.exp(x.toDouble()).toFloat()\n\n/**\n * Computes `exp(x) - 1`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `expm1(NaN)` is `NaN`\n *   - `expm1(+Inf)` is `+Inf`\n *   - `expm1(-Inf)` is `-1.0`\n *\n * @see [exp] function.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun expm1(x: Float): Float = nativeMath.expm1(x.toDouble()).toFloat()\n\n/**\n * Computes the logarithm of the value [x] to the given [base].\n *\n * Special cases:\n *   - `log(x, b)` is `NaN` if either `x` or `b` are `NaN`\n *   - `log(x, b)` is `NaN` when `x < 0` or `b <= 0` or `b == 1.0`\n *   - `log(+Inf, +Inf)` is `NaN`\n *   - `log(+Inf, b)` is `+Inf` for `b > 1` and `-Inf` for `b < 1`\n *   - `log(0.0, b)` is `-Inf` for `b > 1` and `+Inf` for `b > 1`\n *\n * See also logarithm functions for common fixed bases: [ln], [log10] and [log2].\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun log(x: Float, base: Float): Float = log(x.toDouble(), base.toDouble()).toFloat()\n\n/**\n * Computes the natural logarithm (base `E`) of the value [x].\n *\n * Special cases:\n *   - `ln(NaN)` is `NaN`\n *   - `ln(x)` is `NaN` when `x < 0.0`\n *   - `ln(+Inf)` is `+Inf`\n *   - `ln(0.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ln(x: Float): Float = nativeMath.log(x.toDouble()).toFloat()\n\n/**\n * Computes the common logarithm (base 10) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun log10(x: Float): Float = nativeMath.log10(x.toDouble()).toFloat()\n\n/**\n * Computes the binary logarithm (base 2) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun log2(x: Float): Float = nativeMath.log2(x.toDouble()).toFloat()\n\n/**\n * Computes `ln(a + 1)`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `ln1p(NaN)` is `NaN`\n *   - `ln1p(x)` is `NaN` where `x < -1.0`\n *   - `ln1p(-1.0)` is `-Inf`\n *   - `ln1p(+Inf)` is `+Inf`\n *\n * @see [ln] function\n * @see [expm1] function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ln1p(x: Float): Float = nativeMath.log1p(x.toDouble()).toFloat()\n\n/**\n * Rounds the given value [x] to an integer towards positive infinity.\n\n * @return the smallest Float value that is greater than or equal to the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `ceil(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ceil(x: Float): Float = nativeMath.ceil(x.toDouble()).toFloat()\n\n/**\n * Rounds the given value [x] to an integer towards negative infinity.\n\n * @return the largest Float value that is smaller than or equal to the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `floor(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun floor(x: Float): Float = nativeMath.floor(x.toDouble()).toFloat()\n\n/**\n * Rounds the given value [x] to an integer towards zero.\n *\n * @return the value [x] having its fractional part truncated.\n *\n * Special cases:\n *   - `truncate(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun truncate(x: Float): Float = truncate(x.toDouble()).toFloat()\n\n/**\n * Rounds the given value [x] towards the closest integer with ties rounded towards even integer.\n *\n * Special cases:\n *   - `round(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun round(x: Float): Float = round(x.toDouble()).toFloat()\n\n\n/**\n * Returns the absolute value of the given value [x].\n *\n * Special cases:\n *   - `abs(NaN)` is `NaN`\n *\n * @see absoluteValue extension property for [Float]\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun abs(x: Float): Float = nativeMath.abs(x.toDouble()).toFloat()\n\n/**\n * Returns the sign of the given value [x]:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `sign(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sign(x: Float): Float = nativeMath.sign(x.toDouble()).toFloat()\n\n\n\n/**\n * Returns the smaller of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun min(a: Float, b: Float): Float = nativeMath.min(a, b)\n\n/**\n * Returns the greater of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun max(a: Float, b: Float): Float = nativeMath.max(a, b)\n\n// extensions\n\n\n/**\n * Raises this value to the power [x].\n *\n * Special cases:\n *   - `b.pow(0.0)` is `1.0`\n *   - `b.pow(1.0) == b`\n *   - `b.pow(NaN)` is `NaN`\n *   - `NaN.pow(x)` is `NaN` for `x != 0.0`\n *   - `b.pow(Inf)` is `NaN` for `abs(b) == 1.0`\n *   - `b.pow(x)` is `NaN` for `b < 0` and `x` is finite and not an integer\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.pow(x: Float): Float = nativeMath.pow(this.toDouble(), x.toDouble()).toFloat()\n\n/**\n * Raises this value to the integer power [n].\n *\n * See the other overload of [pow] for details.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.pow(n: Int): Float = nativeMath.pow(this.toDouble(), n.toDouble()).toFloat()\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `NaN.absoluteValue` is `NaN`\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Float.absoluteValue: Float get() = nativeMath.abs(this.toDouble()).toFloat()\n\n/**\n * Returns the sign of this value:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `NaN.sign` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Float.sign: Float get() = nativeMath.sign(this.toDouble()).toFloat()\n\n/**\n * Returns this value with the sign bit same as of the [sign] value.\n *\n * If [sign] is `NaN` the sign of the result is undefined.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.withSign(sign: Float): Float = this.toDouble().withSign(sign.toDouble()).toFloat()\n\n/**\n * Returns this value with the sign bit same as of the [sign] value.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.withSign(sign: Int): Float = this.toDouble().withSign(sign.toDouble()).toFloat()\n\n\n/**\n * Rounds this [Float] value to the nearest integer and converts the result to [Int].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToInt() == Int.MAX_VALUE` when `x > Int.MAX_VALUE`\n *   - `x.roundToInt() == Int.MIN_VALUE` when `x < Int.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.roundToInt(): Int = toDouble().roundToInt()\n\n/**\n * Rounds this [Float] value to the nearest integer and converts the result to [Long].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToLong() == Long.MAX_VALUE` when `x > Long.MAX_VALUE`\n *   - `x.roundToLong() == Long.MIN_VALUE` when `x < Long.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.roundToLong(): Long = toDouble().roundToLong()\n\n\n// endregion\n\n// region ================ Integer Math ========================================\n\n\n/**\n * Returns the absolute value of the given value [n].\n *\n * Special cases:\n *   - `abs(Int.MIN_VALUE)` is `Int.MIN_VALUE` due to an overflow\n *\n * @see absoluteValue extension property for [Int]\n */\n// TODO: remove manual 'or' when KT-19290 is fixed\n@SinceKotlin(\"1.2\")\npublic actual fun abs(n: Int): Int = if (n < 0) (-n or 0) else n\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun min(a: Int, b: Int): Int = nativeMath.min(a, b)\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun max(a: Int, b: Int): Int = nativeMath.max(a, b)\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `Int.MIN_VALUE.absoluteValue` is `Int.MIN_VALUE` due to an overflow\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Int.absoluteValue: Int get() = abs(this)\n\n/**\n * Returns the sign of this value:\n *   - `-1` if the value is negative,\n *   - `0` if the value is zero,\n *   - `1` if the value is positive\n */\n@SinceKotlin(\"1.2\")\npublic actual val Int.sign: Int get() = when {\n    this < 0 -> -1\n    this > 0 -> 1\n    else -> 0\n}\n\n\n\n/**\n * Returns the absolute value of the given value [n].\n *\n * Special cases:\n *   - `abs(Long.MIN_VALUE)` is `Long.MIN_VALUE` due to an overflow\n *\n * @see absoluteValue extension property for [Long]\n */\n@SinceKotlin(\"1.2\")\npublic actual fun abs(n: Long): Long = if (n < 0) -n else n\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.2\")\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun min(a: Long, b: Long): Long = if (a <= b) a else b\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.2\")\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun max(a: Long, b: Long): Long = if (a >= b) a else b\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `Long.MIN_VALUE.absoluteValue` is `Long.MIN_VALUE` due to an overflow\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Long.absoluteValue: Long get() = abs(this)\n\n/**\n * Returns the sign of this value:\n *   - `-1` if the value is negative,\n *   - `0` if the value is zero,\n *   - `1` if the value is positive\n */\n@SinceKotlin(\"1.2\")\npublic actual val Long.sign: Int get() = when {\n    this < 0 -> -1\n    this > 0 -> 1\n    else -> 0\n}\n\n\n// endregion\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin\n\nimport kotlin.internal.InlineOnly\n\n\n/**\n * Returns a hash code value for the object or zero if the object is `null`.\n *\n * @see Any.hashCode\n */\n@SinceKotlin(\"1.3\")\n@InlineOnly\npublic inline fun Any?.hashCode(): Int = this?.hashCode() ?: 0\n","/*\n * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.collections\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.js.*\nimport primitiveArrayConcat\nimport withType\nimport kotlin.ranges.contains\nimport kotlin.ranges.reversed\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun <T> Array<out T>.elementAt(index: Int): T {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun ByteArray.elementAt(index: Int): Byte {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun ShortArray.elementAt(index: Int): Short {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun IntArray.elementAt(index: Int): Int {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun LongArray.elementAt(index: Int): Long {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun FloatArray.elementAt(index: Int): Float {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun DoubleArray.elementAt(index: Int): Double {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun BooleanArray.elementAt(index: Int): Boolean {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun CharArray.elementAt(index: Int): Char {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic actual fun <T> Array<out T>.asList(): List<T> {\n    return ArrayList<T>(this.unsafeCast<Array<Any?>>())\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun ByteArray.asList(): List<Byte> {\n    return this.unsafeCast<Array<Byte>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun ShortArray.asList(): List<Short> {\n    return this.unsafeCast<Array<Short>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun IntArray.asList(): List<Int> {\n    return this.unsafeCast<Array<Int>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun LongArray.asList(): List<Long> {\n    return this.unsafeCast<Array<Long>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun FloatArray.asList(): List<Float> {\n    return this.unsafeCast<Array<Float>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun DoubleArray.asList(): List<Double> {\n    return this.unsafeCast<Array<Double>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun BooleanArray.asList(): List<Boolean> {\n    return this.unsafeCast<Array<Boolean>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic actual fun CharArray.asList(): List<Char> {\n    return object : AbstractList<Char>(), RandomAccess {\n        override val size: Int get() = this@asList.size\n        override fun isEmpty(): Boolean = this@asList.isEmpty()\n        override fun contains(element: Char): Boolean = this@asList.contains(element)\n        override fun get(index: Int): Char {\n            AbstractList.checkElementIndex(index, size)\n            return this@asList[index]\n        }\n        override fun indexOf(element: Char): Int {\n            @Suppress(\"USELESS_CAST\")\n            if ((element as Any?) !is Char) return -1\n            return this@asList.indexOf(element)\n        }\n        override fun lastIndexOf(element: Char): Int {\n            @Suppress(\"USELESS_CAST\")\n            if ((element as Any?) !is Char) return -1\n            return this@asList.lastIndexOf(element)\n        }\n    }\n}\n\n/**\n * Returns `true` if the two specified arrays are *deeply* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * If two corresponding elements are nested arrays, they are also compared deeply.\n * If any of arrays contains itself on any nesting level the behavior is undefined.\n * \n * The elements of other types are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.LowPriorityInOverloadResolution\npublic actual infix fun <T> Array<out T>.contentDeepEquals(other: Array<out T>): Boolean {\n    return this.contentDeepEquals(other)\n}\n\n/**\n * Returns `true` if the two specified arrays are *deeply* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The specified arrays are also considered deeply equal if both are `null`.\n * \n * If two corresponding elements are nested arrays, they are also compared deeply.\n * If any of arrays contains itself on any nesting level the behavior is undefined.\n * \n * The elements of other types are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayDeepEquals\")\npublic actual infix fun <T> Array<out T>?.contentDeepEquals(other: Array<out T>?): Boolean {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level the behavior is undefined.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.LowPriorityInOverloadResolution\npublic actual fun <T> Array<out T>.contentDeepHashCode(): Int {\n    return this.contentDeepHashCode()\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level the behavior is undefined.\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayDeepHashCode\")\npublic actual fun <T> Array<out T>?.contentDeepHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of this array as if it is a [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level that reference\n * is rendered as `\"[...]\"` to prevent recursion.\n * \n * @sample samples.collections.Arrays.ContentOperations.contentDeepToString\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.LowPriorityInOverloadResolution\npublic actual fun <T> Array<out T>.contentDeepToString(): String {\n    return this.contentDeepToString()\n}\n\n/**\n * Returns a string representation of the contents of this array as if it is a [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level that reference\n * is rendered as `\"[...]\"` to prevent recursion.\n * \n * @sample samples.collections.Arrays.ContentOperations.contentDeepToString\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayDeepToString\")\npublic actual fun <T> Array<out T>?.contentDeepToString(): String {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual infix fun <T> Array<out T>.contentEquals(other: Array<out T>): Boolean {\n    return this.contentEquals(other)\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual infix fun ByteArray.contentEquals(other: ByteArray): Boolean {\n    return this.contentEquals(other)\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual infix fun ShortArray.contentEquals(other: ShortArray): Boolean {\n    return this.contentEquals(other)\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual infix fun IntArray.contentEquals(other: IntArray): Boolean {\n    return this.contentEquals(other)\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual infix fun LongArray.contentEquals(other: LongArray): Boolean {\n    return this.contentEquals(other)\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual infix fun FloatArray.contentEquals(other: FloatArray): Boolean {\n    return this.contentEquals(other)\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual infix fun DoubleArray.contentEquals(other: DoubleArray): Boolean {\n    return this.contentEquals(other)\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual infix fun BooleanArray.contentEquals(other: BooleanArray): Boolean {\n    return this.contentEquals(other)\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual infix fun CharArray.contentEquals(other: CharArray): Boolean {\n    return this.contentEquals(other)\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayEquals\")\npublic actual infix fun <T> Array<out T>?.contentEquals(other: Array<out T>?): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayEquals\")\npublic actual infix fun ByteArray?.contentEquals(other: ByteArray?): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayEquals\")\npublic actual infix fun ShortArray?.contentEquals(other: ShortArray?): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayEquals\")\npublic actual infix fun IntArray?.contentEquals(other: IntArray?): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayEquals\")\npublic actual infix fun LongArray?.contentEquals(other: LongArray?): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayEquals\")\npublic actual infix fun FloatArray?.contentEquals(other: FloatArray?): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayEquals\")\npublic actual infix fun DoubleArray?.contentEquals(other: DoubleArray?): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayEquals\")\npublic actual infix fun BooleanArray?.contentEquals(other: BooleanArray?): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayEquals\")\npublic actual infix fun CharArray?.contentEquals(other: CharArray?): Boolean {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun <T> Array<out T>.contentHashCode(): Int {\n    return this.contentHashCode()\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun ByteArray.contentHashCode(): Int {\n    return this.contentHashCode()\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun ShortArray.contentHashCode(): Int {\n    return this.contentHashCode()\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun IntArray.contentHashCode(): Int {\n    return this.contentHashCode()\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun LongArray.contentHashCode(): Int {\n    return this.contentHashCode()\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun FloatArray.contentHashCode(): Int {\n    return this.contentHashCode()\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun DoubleArray.contentHashCode(): Int {\n    return this.contentHashCode()\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun BooleanArray.contentHashCode(): Int {\n    return this.contentHashCode()\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun CharArray.contentHashCode(): Int {\n    return this.contentHashCode()\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayHashCode\")\npublic actual fun <T> Array<out T>?.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayHashCode\")\npublic actual fun ByteArray?.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayHashCode\")\npublic actual fun ShortArray?.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayHashCode\")\npublic actual fun IntArray?.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayHashCode\")\npublic actual fun LongArray?.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayHashCode\")\npublic actual fun FloatArray?.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayHashCode\")\npublic actual fun DoubleArray?.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayHashCode\")\npublic actual fun BooleanArray?.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayHashCode\")\npublic actual fun CharArray?.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun <T> Array<out T>.contentToString(): String {\n    return this.contentToString()\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun ByteArray.contentToString(): String {\n    return this.contentToString()\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun ShortArray.contentToString(): String {\n    return this.contentToString()\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun IntArray.contentToString(): String {\n    return this.contentToString()\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun LongArray.contentToString(): String {\n    return this.contentToString()\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun FloatArray.contentToString(): String {\n    return this.contentToString()\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun DoubleArray.contentToString(): String {\n    return this.contentToString()\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun BooleanArray.contentToString(): String {\n    return this.contentToString()\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun CharArray.contentToString(): String {\n    return this.contentToString()\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayToString\")\npublic actual fun <T> Array<out T>?.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayToString\")\npublic actual fun ByteArray?.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayToString\")\npublic actual fun ShortArray?.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayToString\")\npublic actual fun IntArray?.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayToString\")\npublic actual fun LongArray?.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayToString\")\npublic actual fun FloatArray?.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayToString\")\npublic actual fun DoubleArray?.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayToString\")\npublic actual fun BooleanArray?.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayToString\")\npublic actual fun CharArray?.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun <T> Array<out T>.copyInto(destination: Array<T>, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): Array<T> {\n    arrayCopy(this, destination, destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun ByteArray.copyInto(destination: ByteArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): ByteArray {\n    arrayCopy(this.unsafeCast<Array<Byte>>(), destination.unsafeCast<Array<Byte>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun ShortArray.copyInto(destination: ShortArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): ShortArray {\n    arrayCopy(this.unsafeCast<Array<Short>>(), destination.unsafeCast<Array<Short>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun IntArray.copyInto(destination: IntArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): IntArray {\n    arrayCopy(this.unsafeCast<Array<Int>>(), destination.unsafeCast<Array<Int>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun LongArray.copyInto(destination: LongArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): LongArray {\n    arrayCopy(this.unsafeCast<Array<Long>>(), destination.unsafeCast<Array<Long>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun FloatArray.copyInto(destination: FloatArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): FloatArray {\n    arrayCopy(this.unsafeCast<Array<Float>>(), destination.unsafeCast<Array<Float>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun DoubleArray.copyInto(destination: DoubleArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): DoubleArray {\n    arrayCopy(this.unsafeCast<Array<Double>>(), destination.unsafeCast<Array<Double>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun BooleanArray.copyInto(destination: BooleanArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): BooleanArray {\n    arrayCopy(this.unsafeCast<Array<Boolean>>(), destination.unsafeCast<Array<Boolean>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun CharArray.copyInto(destination: CharArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): CharArray {\n    arrayCopy(this.unsafeCast<Array<Char>>(), destination.unsafeCast<Array<Char>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\", \"NOTHING_TO_INLINE\")\npublic actual inline fun <T> Array<out T>.copyOf(): Array<T> {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun ByteArray.copyOf(): ByteArray {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun ShortArray.copyOf(): ShortArray {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun IntArray.copyOf(): IntArray {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic actual fun LongArray.copyOf(): LongArray {\n    return withType(\"LongArray\", this.asDynamic().slice())\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun FloatArray.copyOf(): FloatArray {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun DoubleArray.copyOf(): DoubleArray {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic actual fun BooleanArray.copyOf(): BooleanArray {\n    return withType(\"BooleanArray\", this.asDynamic().slice())\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic actual fun CharArray.copyOf(): CharArray {\n    return withType(\"CharArray\", this.asDynamic().slice())\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun ByteArray.copyOf(newSize: Int): ByteArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return fillFrom(this, ByteArray(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun ShortArray.copyOf(newSize: Int): ShortArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return fillFrom(this, ShortArray(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun IntArray.copyOf(newSize: Int): IntArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return fillFrom(this, IntArray(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun LongArray.copyOf(newSize: Int): LongArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return withType(\"LongArray\", arrayCopyResize(this, newSize, 0L))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun FloatArray.copyOf(newSize: Int): FloatArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return fillFrom(this, FloatArray(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun DoubleArray.copyOf(newSize: Int): DoubleArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return fillFrom(this, DoubleArray(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with `false` values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with `false` values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun BooleanArray.copyOf(newSize: Int): BooleanArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return withType(\"BooleanArray\", arrayCopyResize(this, newSize, false))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with null char (`\\u0000`) values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with null char (`\\u0000`) values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun CharArray.copyOf(newSize: Int): CharArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return withType(\"CharArray\", fillFrom(this, CharArray(newSize)))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with `null` values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with `null` values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizingCopyOf\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\")\npublic actual fun <T> Array<out T>.copyOf(newSize: Int): Array<T?> {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return arrayCopyResize(this, newSize, null)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\")\npublic actual fun <T> Array<out T>.copyOfRange(fromIndex: Int, toIndex: Int): Array<T> {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic actual fun ByteArray.copyOfRange(fromIndex: Int, toIndex: Int): ByteArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic actual fun ShortArray.copyOfRange(fromIndex: Int, toIndex: Int): ShortArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic actual fun IntArray.copyOfRange(fromIndex: Int, toIndex: Int): IntArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic actual fun LongArray.copyOfRange(fromIndex: Int, toIndex: Int): LongArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return withType(\"LongArray\", this.asDynamic().slice(fromIndex, toIndex))\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic actual fun FloatArray.copyOfRange(fromIndex: Int, toIndex: Int): FloatArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic actual fun DoubleArray.copyOfRange(fromIndex: Int, toIndex: Int): DoubleArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic actual fun BooleanArray.copyOfRange(fromIndex: Int, toIndex: Int): BooleanArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return withType(\"BooleanArray\", this.asDynamic().slice(fromIndex, toIndex))\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic actual fun CharArray.copyOfRange(fromIndex: Int, toIndex: Int): CharArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return withType(\"CharArray\", this.asDynamic().slice(fromIndex, toIndex))\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun <T> Array<T>.fill(element: T, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun ByteArray.fill(element: Byte, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun ShortArray.fill(element: Short, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun IntArray.fill(element: Int, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun LongArray.fill(element: Long, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun FloatArray.fill(element: Float, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun DoubleArray.fill(element: Double, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun BooleanArray.fill(element: Boolean, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun CharArray.fill(element: Char, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\", \"NOTHING_TO_INLINE\")\npublic actual inline operator fun <T> Array<out T>.plus(element: T): Array<T> {\n    return this.asDynamic().concat(arrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun ByteArray.plus(element: Byte): ByteArray {\n    return plus(byteArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun ShortArray.plus(element: Short): ShortArray {\n    return plus(shortArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun IntArray.plus(element: Int): IntArray {\n    return plus(intArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun LongArray.plus(element: Long): LongArray {\n    return plus(longArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun FloatArray.plus(element: Float): FloatArray {\n    return plus(floatArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun DoubleArray.plus(element: Double): DoubleArray {\n    return plus(doubleArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun BooleanArray.plus(element: Boolean): BooleanArray {\n    return plus(booleanArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun CharArray.plus(element: Char): CharArray {\n    return plus(charArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\")\npublic actual operator fun <T> Array<out T>.plus(elements: Collection<T>): Array<T> {\n    return arrayPlusCollection(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun ByteArray.plus(elements: Collection<Byte>): ByteArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun ShortArray.plus(elements: Collection<Short>): ShortArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun IntArray.plus(elements: Collection<Int>): IntArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun LongArray.plus(elements: Collection<Long>): LongArray {\n    return arrayPlusCollection(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun FloatArray.plus(elements: Collection<Float>): FloatArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun DoubleArray.plus(elements: Collection<Double>): DoubleArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun BooleanArray.plus(elements: Collection<Boolean>): BooleanArray {\n    return arrayPlusCollection(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun CharArray.plus(elements: Collection<Char>): CharArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\", \"NOTHING_TO_INLINE\")\npublic actual inline operator fun <T> Array<out T>.plus(elements: Array<out T>): Array<T> {\n    return this.asDynamic().concat(elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun ByteArray.plus(elements: ByteArray): ByteArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun ShortArray.plus(elements: ShortArray): ShortArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun IntArray.plus(elements: IntArray): IntArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun LongArray.plus(elements: LongArray): LongArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun FloatArray.plus(elements: FloatArray): FloatArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun DoubleArray.plus(elements: DoubleArray): DoubleArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun BooleanArray.plus(elements: BooleanArray): BooleanArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun CharArray.plus(elements: CharArray): CharArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\", \"NOTHING_TO_INLINE\")\npublic actual inline fun <T> Array<out T>.plusElement(element: T): Array<T> {\n    return this.asDynamic().concat(arrayOf(element))\n}\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\n@library(\"primitiveArraySort\")\npublic actual fun IntArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic actual fun LongArray.sort(): Unit {\n    if (size > 1) sort { a: Long, b: Long -> a.compareTo(b) }\n}\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\n@library(\"primitiveArraySort\")\npublic actual fun ByteArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\n@library(\"primitiveArraySort\")\npublic actual fun ShortArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\n@library(\"primitiveArraySort\")\npublic actual fun DoubleArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\n@library(\"primitiveArraySort\")\npublic actual fun FloatArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\n@library(\"primitiveArraySort\")\npublic actual fun CharArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place according to the natural order of its elements.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n * \n * @sample samples.collections.Arrays.Sorting.sortArrayOfComparable\n */\npublic actual fun <T : Comparable<T>> Array<out T>.sort(): Unit {\n    if (size > 1) sortArray(this)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T> Array<out T>.sort(comparison: (a: T, b: T) -> Int): Unit {\n    if (size > 1) sortArrayWith(this, comparison)\n}\n\n/**\n * Sorts a range in the array in-place.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArrayOfComparable\n */\n@SinceKotlin(\"1.4\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun <T : Comparable<T>> Array<out T>.sort(fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    sortArrayWith(this, fromIndex, toIndex, naturalOrder())\n}\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun ByteArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val subarray = this.asDynamic().subarray(fromIndex, toIndex).unsafeCast<ByteArray>()\n    subarray.sort()\n}\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun ShortArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val subarray = this.asDynamic().subarray(fromIndex, toIndex).unsafeCast<ShortArray>()\n    subarray.sort()\n}\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun IntArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val subarray = this.asDynamic().subarray(fromIndex, toIndex).unsafeCast<IntArray>()\n    subarray.sort()\n}\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun LongArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    sortArrayWith(this.unsafeCast<Array<Long>>(), fromIndex, toIndex, naturalOrder())\n}\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun FloatArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val subarray = this.asDynamic().subarray(fromIndex, toIndex).unsafeCast<FloatArray>()\n    subarray.sort()\n}\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun DoubleArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val subarray = this.asDynamic().subarray(fromIndex, toIndex).unsafeCast<DoubleArray>()\n    subarray.sort()\n}\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun CharArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val subarray = this.asDynamic().subarray(fromIndex, toIndex).unsafeCast<CharArray>()\n    subarray.sort()\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.sort(noinline comparison: (a: Byte, b: Byte) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.sort(noinline comparison: (a: Short, b: Short) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.sort(noinline comparison: (a: Int, b: Int) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.sort(noinline comparison: (a: Long, b: Long) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.sort(noinline comparison: (a: Float, b: Float) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.sort(noinline comparison: (a: Double, b: Double) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.sort(noinline comparison: (a: Char, b: Char) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic actual fun <T> Array<out T>.sortWith(comparator: Comparator<in T>): Unit {\n    if (size > 1) sortArrayWith(this, comparator)\n}\n\n/**\n * Sorts a range in the array in-place with the given [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun <T> Array<out T>.sortWith(comparator: Comparator<in T>, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    sortArrayWith(this, fromIndex, toIndex, comparator)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun ByteArray.toTypedArray(): Array<Byte> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun ShortArray.toTypedArray(): Array<Short> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun IntArray.toTypedArray(): Array<Int> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun LongArray.toTypedArray(): Array<Long> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun FloatArray.toTypedArray(): Array<Float> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun DoubleArray.toTypedArray(): Array<Double> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun BooleanArray.toTypedArray(): Array<Boolean> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun CharArray.toTypedArray(): Array<Char> {\n    return Array(size) { index -> this[index] }\n}\n\n",null,null,null,null,null,null,null,"/*\n * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"CollectionsKt\")\n\npackage kotlin.collections\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.random.*\nimport kotlin.ranges.contains\nimport kotlin.ranges.reversed\n\n/**\n * Returns 1st *element* from the list.\n * \n * Throws an [IndexOutOfBoundsException] if the size of this list is less than 1.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component1(): T {\n    return get(0)\n}\n\n/**\n * Returns 2nd *element* from the list.\n * \n * Throws an [IndexOutOfBoundsException] if the size of this list is less than 2.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component2(): T {\n    return get(1)\n}\n\n/**\n * Returns 3rd *element* from the list.\n * \n * Throws an [IndexOutOfBoundsException] if the size of this list is less than 3.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component3(): T {\n    return get(2)\n}\n\n/**\n * Returns 4th *element* from the list.\n * \n * Throws an [IndexOutOfBoundsException] if the size of this list is less than 4.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component4(): T {\n    return get(3)\n}\n\n/**\n * Returns 5th *element* from the list.\n * \n * Throws an [IndexOutOfBoundsException] if the size of this list is less than 5.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component5(): T {\n    return get(4)\n}\n\n/**\n * Returns `true` if [element] is found in the collection.\n */\npublic operator fun <@kotlin.internal.OnlyInputTypes T> Iterable<T>.contains(element: T): Boolean {\n    if (this is Collection)\n        return contains(element)\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this collection.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic fun <T> Iterable<T>.elementAt(index: Int): T {\n    if (this is List)\n        return get(index)\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"Collection doesn't contain element at index $index.\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this list.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.elementAt(index: Int): T {\n    return get(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this collection.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\npublic fun <T> Iterable<T>.elementAtOrElse(index: Int, defaultValue: (Int) -> T): T {\n    if (this is List)\n        return this.getOrElse(index, defaultValue)\n    if (index < 0)\n        return defaultValue(index)\n    val iterator = iterator()\n    var count = 0\n    while (iterator.hasNext()) {\n        val element = iterator.next()\n        if (index == count++)\n            return element\n    }\n    return defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this list.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.elementAtOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this collection.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\npublic fun <T> Iterable<T>.elementAtOrNull(index: Int): T? {\n    if (this is List)\n        return this.getOrNull(index)\n    if (index < 0)\n        return null\n    val iterator = iterator()\n    var count = 0\n    while (iterator.hasNext()) {\n        val element = iterator.next()\n        if (index == count++)\n            return element\n    }\n    return null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this list.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.elementAtOrNull(index: Int): T? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.find(predicate: (T) -> Boolean): T? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.findLast(predicate: (T) -> Boolean): T? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.findLast(predicate: (T) -> Boolean): T? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the collection is empty.\n */\npublic fun <T> Iterable<T>.first(): T {\n    when (this) {\n        is List -> return this.first()\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                throw NoSuchElementException(\"Collection is empty.\")\n            return iterator.next()\n        }\n    }\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the list is empty.\n */\npublic fun <T> List<T>.first(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"List is empty.\")\n    return this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> Iterable<T>.first(predicate: (T) -> Boolean): T {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Collection contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first non-null value produced by [transform] function being applied to elements of this collection in iteration order,\n * or throws [NoSuchElementException] if no non-null value was produced.\n * \n * @sample samples.collections.Collections.Transformations.firstNotNullOf\n */\n@SinceKotlin(\"1.5\")\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Any> Iterable<T>.firstNotNullOf(transform: (T) -> R?): R {\n    return firstNotNullOfOrNull(transform) ?: throw NoSuchElementException(\"No element of the collection was transformed to a non-null value.\")\n}\n\n/**\n * Returns the first non-null value produced by [transform] function being applied to elements of this collection in iteration order,\n * or `null` if no non-null value was produced.\n * \n * @sample samples.collections.Collections.Transformations.firstNotNullOf\n */\n@SinceKotlin(\"1.5\")\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Any> Iterable<T>.firstNotNullOfOrNull(transform: (T) -> R?): R? {\n    for (element in this) {\n        val result = transform(element)\n        if (result != null) {\n            return result\n        }\n    }\n    return null\n}\n\n/**\n * Returns the first element, or `null` if the collection is empty.\n */\npublic fun <T> Iterable<T>.firstOrNull(): T? {\n    when (this) {\n        is List -> {\n            if (isEmpty())\n                return null\n            else\n                return this[0]\n        }\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                return null\n            return iterator.next()\n        }\n    }\n}\n\n/**\n * Returns the first element, or `null` if the list is empty.\n */\npublic fun <T> List<T>.firstOrNull(): T? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun <T> Iterable<T>.firstOrNull(predicate: (T) -> Boolean): T? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this list.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.getOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this list.\n * \n * @sample samples.collections.Collections.Elements.getOrNull\n */\npublic fun <T> List<T>.getOrNull(index: Int): T? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns first index of [element], or -1 if the collection does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Iterable<T>.indexOf(element: T): Int {\n    if (this is List) return this.indexOf(element)\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (element == item)\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the list does not contain element.\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\npublic fun <@kotlin.internal.OnlyInputTypes T> List<T>.indexOf(element: T): Int {\n    return indexOf(element)\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the collection does not contain such element.\n */\npublic inline fun <T> Iterable<T>.indexOfFirst(predicate: (T) -> Boolean): Int {\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (predicate(item))\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the list does not contain such element.\n */\npublic inline fun <T> List<T>.indexOfFirst(predicate: (T) -> Boolean): Int {\n    var index = 0\n    for (item in this) {\n        if (predicate(item))\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the collection does not contain such element.\n */\npublic inline fun <T> Iterable<T>.indexOfLast(predicate: (T) -> Boolean): Int {\n    var lastIndex = -1\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (predicate(item))\n            lastIndex = index\n        index++\n    }\n    return lastIndex\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the list does not contain such element.\n */\npublic inline fun <T> List<T>.indexOfLast(predicate: (T) -> Boolean): Int {\n    val iterator = this.listIterator(size)\n    while (iterator.hasPrevious()) {\n        if (predicate(iterator.previous())) {\n            return iterator.nextIndex()\n        }\n    }\n    return -1\n}\n\n/**\n * Returns the last element.\n * \n * @throws NoSuchElementException if the collection is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun <T> Iterable<T>.last(): T {\n    when (this) {\n        is List -> return this.last()\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                throw NoSuchElementException(\"Collection is empty.\")\n            var last = iterator.next()\n            while (iterator.hasNext())\n                last = iterator.next()\n            return last\n        }\n    }\n}\n\n/**\n * Returns the last element.\n * \n * @throws NoSuchElementException if the list is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun <T> List<T>.last(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"List is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * \n * @throws NoSuchElementException if no such element is found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun <T> Iterable<T>.last(predicate: (T) -> Boolean): T {\n    var last: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            last = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Collection contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return last as T\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * \n * @throws NoSuchElementException if no such element is found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun <T> List<T>.last(predicate: (T) -> Boolean): T {\n    val iterator = this.listIterator(size)\n    while (iterator.hasPrevious()) {\n        val element = iterator.previous()\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"List contains no element matching the predicate.\")\n}\n\n/**\n * Returns last index of [element], or -1 if the collection does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Iterable<T>.lastIndexOf(element: T): Int {\n    if (this is List) return this.lastIndexOf(element)\n    var lastIndex = -1\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (element == item)\n            lastIndex = index\n        index++\n    }\n    return lastIndex\n}\n\n/**\n * Returns last index of [element], or -1 if the list does not contain element.\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\npublic fun <@kotlin.internal.OnlyInputTypes T> List<T>.lastIndexOf(element: T): Int {\n    return lastIndexOf(element)\n}\n\n/**\n * Returns the last element, or `null` if the collection is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun <T> Iterable<T>.lastOrNull(): T? {\n    when (this) {\n        is List -> return if (isEmpty()) null else this[size - 1]\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                return null\n            var last = iterator.next()\n            while (iterator.hasNext())\n                last = iterator.next()\n            return last\n        }\n    }\n}\n\n/**\n * Returns the last element, or `null` if the list is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun <T> List<T>.lastOrNull(): T? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun <T> Iterable<T>.lastOrNull(predicate: (T) -> Boolean): T? {\n    var last: T? = null\n    for (element in this) {\n        if (predicate(element)) {\n            last = element\n        }\n    }\n    return last\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun <T> List<T>.lastOrNull(predicate: (T) -> Boolean): T? {\n    val iterator = this.listIterator(size)\n    while (iterator.hasPrevious()) {\n        val element = iterator.previous()\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns a random element from this collection.\n * \n * @throws NoSuchElementException if this collection is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.random(): T {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this collection using the specified source of randomness.\n * \n * @throws NoSuchElementException if this collection is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun <T> Collection<T>.random(random: Random): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"Collection is empty.\")\n    return elementAt(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this collection, or `null` if this collection is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.randomOrNull(): T? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this collection using the specified source of randomness, or `null` if this collection is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun <T> Collection<T>.randomOrNull(random: Random): T? {\n    if (isEmpty())\n        return null\n    return elementAt(random.nextInt(size))\n}\n\n/**\n * Returns the single element, or throws an exception if the collection is empty or has more than one element.\n */\npublic fun <T> Iterable<T>.single(): T {\n    when (this) {\n        is List -> return this.single()\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                throw NoSuchElementException(\"Collection is empty.\")\n            val single = iterator.next()\n            if (iterator.hasNext())\n                throw IllegalArgumentException(\"Collection has more than one element.\")\n            return single\n        }\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the list is empty or has more than one element.\n */\npublic fun <T> List<T>.single(): T {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"List is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"List has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun <T> Iterable<T>.single(predicate: (T) -> Boolean): T {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Collection contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Collection contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as T\n}\n\n/**\n * Returns single element, or `null` if the collection is empty or has more than one element.\n */\npublic fun <T> Iterable<T>.singleOrNull(): T? {\n    when (this) {\n        is List -> return if (size == 1) this[0] else null\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                return null\n            val single = iterator.next()\n            if (iterator.hasNext())\n                return null\n            return single\n        }\n    }\n}\n\n/**\n * Returns single element, or `null` if the list is empty or has more than one element.\n */\npublic fun <T> List<T>.singleOrNull(): T? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun <T> Iterable<T>.singleOrNull(predicate: (T) -> Boolean): T? {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> Iterable<T>.drop(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return toList()\n    val list: ArrayList<T>\n    if (this is Collection<*>) {\n        val resultSize = size - n\n        if (resultSize <= 0)\n            return emptyList()\n        if (resultSize == 1)\n            return listOf(last())\n        list = ArrayList<T>(resultSize)\n        if (this is List<T>) {\n            if (this is RandomAccess) {\n                for (index in n until size)\n                    list.add(this[index])\n            } else {\n                for (item in listIterator(n))\n                    list.add(item)\n            }\n            return list\n        }\n    }\n    else {\n        list = ArrayList<T>()\n    }\n    var count = 0\n    for (item in this) {\n        if (count >= n) list.add(item) else ++count\n    }\n    return list.optimizeReadOnlyList()\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> List<T>.dropLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun <T> List<T>.dropLastWhile(predicate: (T) -> Boolean): List<T> {\n    if (!isEmpty()) {\n        val iterator = listIterator(size)\n        while (iterator.hasPrevious()) {\n            if (!predicate(iterator.previous())) {\n                return take(iterator.nextIndex() + 1)\n            }\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun <T> Iterable<T>.dropWhile(predicate: (T) -> Boolean): List<T> {\n    var yielding = false\n    val list = ArrayList<T>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun <T> Iterable<T>.filter(predicate: (T) -> Boolean): List<T> {\n    return filterTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexed\n */\npublic inline fun <T> Iterable<T>.filterIndexed(predicate: (index: Int, T) -> Boolean): List<T> {\n    return filterIndexedTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexedTo\n */\npublic inline fun <T, C : MutableCollection<in T>> Iterable<T>.filterIndexedTo(destination: C, predicate: (index: Int, T) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Returns a list containing all elements that are instances of specified type parameter R.\n * \n * @sample samples.collections.Collections.Filtering.filterIsInstance\n */\npublic inline fun <reified R> Iterable<*>.filterIsInstance(): List<@kotlin.internal.NoInfer R> {\n    return filterIsInstanceTo(ArrayList<R>())\n}\n\n/**\n * Appends all elements that are instances of specified type parameter R to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterIsInstanceTo\n */\npublic inline fun <reified R, C : MutableCollection<in R>> Iterable<*>.filterIsInstanceTo(destination: C): C {\n    for (element in this) if (element is R) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun <T> Iterable<T>.filterNot(predicate: (T) -> Boolean): List<T> {\n    return filterNotTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing all elements that are not `null`.\n * \n * @sample samples.collections.Collections.Filtering.filterNotNull\n */\npublic fun <T : Any> Iterable<T?>.filterNotNull(): List<T> {\n    return filterNotNullTo(ArrayList<T>())\n}\n\n/**\n * Appends all elements that are not `null` to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterNotNullTo\n */\npublic fun <C : MutableCollection<in T>, T : Any> Iterable<T?>.filterNotNullTo(destination: C): C {\n    for (element in this) if (element != null) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <T, C : MutableCollection<in T>> Iterable<T>.filterNotTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <T, C : MutableCollection<in T>> Iterable<T>.filterTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun <T> List<T>.slice(indices: IntRange): List<T> {\n    if (indices.isEmpty()) return listOf()\n    return this.subList(indices.start, indices.endInclusive + 1).toList()\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun <T> List<T>.slice(indices: Iterable<Int>): List<T> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<T>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> Iterable<T>.take(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (this is Collection<T>) {\n        if (n >= size) return toList()\n        if (n == 1) return listOf(first())\n    }\n    var count = 0\n    val list = ArrayList<T>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list.optimizeReadOnlyList()\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> List<T>.takeLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(last())\n    val list = ArrayList<T>(n)\n    if (this is RandomAccess) {\n        for (index in size - n until size)\n            list.add(this[index])\n    } else {\n        for (item in listIterator(size - n))\n            list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun <T> List<T>.takeLastWhile(predicate: (T) -> Boolean): List<T> {\n    if (isEmpty())\n        return emptyList()\n    val iterator = listIterator(size)\n    while (iterator.hasPrevious()) {\n        if (!predicate(iterator.previous())) {\n            iterator.next()\n            val expectedSize = size - iterator.nextIndex()\n            if (expectedSize == 0) return emptyList()\n            return ArrayList<T>(expectedSize).apply {\n                while (iterator.hasNext())\n                    add(iterator.next())\n            }\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun <T> Iterable<T>.takeWhile(predicate: (T) -> Boolean): List<T> {\n    val list = ArrayList<T>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Reverses elements in the list in-place.\n */\npublic expect fun <T> MutableList<T>.reverse(): Unit\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun <T> Iterable<T>.reversed(): List<T> {\n    if (this is Collection && size <= 1) return toList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Randomly shuffles elements in this list in-place using the specified [random] instance as the source of randomness.\n * \n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.3\")\npublic fun <T> MutableList<T>.shuffle(random: Random): Unit {\n    for (i in lastIndex downTo 1) {\n        val j = random.nextInt(i + 1)\n        this[j] = this.set(i, this[j])\n    }\n}\n\n/**\n * Sorts elements in the list in-place according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> MutableList<T>.sortBy(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareBy(selector))\n}\n\n/**\n * Sorts elements in the list in-place descending according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> MutableList<T>.sortByDescending(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareByDescending(selector))\n}\n\n/**\n * Sorts elements in the list in-place descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> MutableList<T>.sortDescending(): Unit {\n    sortWith(reverseOrder())\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Iterable<T>.sorted(): List<T> {\n    if (this is Collection) {\n        if (size <= 1) return this.toList()\n        @Suppress(\"UNCHECKED_CAST\")\n        return (toTypedArray<Comparable<T>>() as Array<T>).apply { sort() }.asList()\n    }\n    return toMutableList().apply { sort() }\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n * \n * @sample samples.collections.Collections.Sorting.sortedBy\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.sortedBy(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.sortedByDescending(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Iterable<T>.sortedDescending(): List<T> {\n    return sortedWith(reverseOrder())\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T> Iterable<T>.sortedWith(comparator: Comparator<in T>): List<T> {\n    if (this is Collection) {\n       if (size <= 1) return this.toList()\n       @Suppress(\"UNCHECKED_CAST\")\n       return (toTypedArray<Any?>() as Array<T>).apply { sortWith(comparator) }.asList()\n    }\n    return toMutableList().apply { sortWith(comparator) }\n}\n\n/**\n * Returns an array of Boolean containing all of the elements of this collection.\n */\npublic fun Collection<Boolean>.toBooleanArray(): BooleanArray {\n    val result = BooleanArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Byte containing all of the elements of this collection.\n */\npublic fun Collection<Byte>.toByteArray(): ByteArray {\n    val result = ByteArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Char containing all of the elements of this collection.\n */\npublic fun Collection<Char>.toCharArray(): CharArray {\n    val result = CharArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Double containing all of the elements of this collection.\n */\npublic fun Collection<Double>.toDoubleArray(): DoubleArray {\n    val result = DoubleArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Float containing all of the elements of this collection.\n */\npublic fun Collection<Float>.toFloatArray(): FloatArray {\n    val result = FloatArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Int containing all of the elements of this collection.\n */\npublic fun Collection<Int>.toIntArray(): IntArray {\n    val result = IntArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Long containing all of the elements of this collection.\n */\npublic fun Collection<Long>.toLongArray(): LongArray {\n    val result = LongArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Short containing all of the elements of this collection.\n */\npublic fun Collection<Short>.toShortArray(): ShortArray {\n    val result = ShortArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given collection.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n * \n * @sample samples.collections.Collections.Transformations.associate\n */\npublic inline fun <T, K, V> Iterable<T>.associate(transform: (T) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing the elements from the given collection indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n * \n * @sample samples.collections.Collections.Transformations.associateBy\n */\npublic inline fun <T, K> Iterable<T>.associateBy(keySelector: (T) -> K): Map<K, T> {\n    val capacity = mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, T>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given collection.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n * \n * @sample samples.collections.Collections.Transformations.associateByWithValueTransform\n */\npublic inline fun <T, K, V> Iterable<T>.associateBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, V> {\n    val capacity = mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given collection\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Collections.Transformations.associateByTo\n */\npublic inline fun <T, K, M : MutableMap<in K, in T>> Iterable<T>.associateByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given collection.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Collections.Transformations.associateByToWithValueTransform\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Iterable<T>.associateByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given collection.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Collections.Transformations.associateTo\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Iterable<T>.associateTo(destination: M, transform: (T) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Returns a [Map] where keys are elements from the given collection and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.3\")\npublic inline fun <K, V> Iterable<K>.associateWith(valueSelector: (K) -> V): Map<K, V> {\n    val result = LinkedHashMap<K, V>(mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given collection,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n * \n * @sample samples.collections.Collections.Transformations.associateWithTo\n */\n@SinceKotlin(\"1.3\")\npublic inline fun <K, V, M : MutableMap<in K, in V>> Iterable<K>.associateWithTo(destination: M, valueSelector: (K) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <T, C : MutableCollection<in T>> Iterable<T>.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Returns a new [HashSet] of all elements.\n */\npublic fun <T> Iterable<T>.toHashSet(): HashSet<T> {\n    return toCollection(HashSet<T>(mapCapacity(collectionSizeOrDefault(12))))\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun <T> Iterable<T>.toList(): List<T> {\n    if (this is Collection) {\n        return when (size) {\n            0 -> emptyList()\n            1 -> listOf(if (this is List) get(0) else iterator().next())\n            else -> this.toMutableList()\n        }\n    }\n    return this.toMutableList().optimizeReadOnlyList()\n}\n\n/**\n * Returns a new [MutableList] filled with all elements of this collection.\n */\npublic fun <T> Iterable<T>.toMutableList(): MutableList<T> {\n    if (this is Collection<T>)\n        return this.toMutableList()\n    return toCollection(ArrayList<T>())\n}\n\n/**\n * Returns a new [MutableList] filled with all elements of this collection.\n */\npublic fun <T> Collection<T>.toMutableList(): MutableList<T> {\n    return ArrayList(this)\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic fun <T> Iterable<T>.toSet(): Set<T> {\n    if (this is Collection) {\n        return when (size) {\n            0 -> emptySet()\n            1 -> setOf(if (this is List) this[0] else iterator().next())\n            else -> toCollection(LinkedHashSet<T>(mapCapacity(size)))\n        }\n    }\n    return toCollection(LinkedHashSet<T>()).optimizeReadOnlySet()\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original collection.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <T, R> Iterable<T>.flatMap(transform: (T) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original collection.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapSequence\")\npublic inline fun <T, R> Iterable<T>.flatMap(transform: (T) -> Sequence<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original collection.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterable\")\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Iterable<T>.flatMapIndexed(transform: (index: Int, T) -> Iterable<R>): List<R> {\n    return flatMapIndexedTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original collection.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedSequence\")\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Iterable<T>.flatMapIndexed(transform: (index: Int, T) -> Sequence<R>): List<R> {\n    return flatMapIndexedTo(ArrayList<R>(), transform)\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original collection, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterableTo\")\n@kotlin.internal.InlineOnly\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.flatMapIndexedTo(destination: C, transform: (index: Int, T) -> Iterable<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(checkIndexOverflow(index++), element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original collection, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedSequenceTo\")\n@kotlin.internal.InlineOnly\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.flatMapIndexedTo(destination: C, transform: (index: Int, T) -> Sequence<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(checkIndexOverflow(index++), element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original collection, to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.flatMapTo(destination: C, transform: (T) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original collection, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapSequenceTo\")\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.flatMapTo(destination: C, transform: (T) -> Sequence<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original collection by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original collection.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K> Iterable<T>.groupBy(keySelector: (T) -> K): Map<K, List<T>> {\n    return groupByTo(LinkedHashMap<K, MutableList<T>>(), keySelector)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original collection\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original collection.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V> Iterable<T>.groupBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups elements of the original collection by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K, M : MutableMap<in K, MutableList<T>>> Iterable<T>.groupByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<T>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original collection\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V, M : MutableMap<in K, MutableList<V>>> Iterable<T>.groupByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Creates a [Grouping] source from a collection to be used later with one of group-and-fold operations\n * using the specified [keySelector] function to extract a key from each element.\n * \n * @sample samples.collections.Grouping.groupingByEachCount\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, K> Iterable<T>.groupingBy(crossinline keySelector: (T) -> K): Grouping<T, K> {\n    return object : Grouping<T, K> {\n        override fun sourceIterator(): Iterator<T> = this@groupingBy.iterator()\n        override fun keyOf(element: T): K = keySelector(element)\n    }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original collection.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <T, R> Iterable<T>.map(transform: (T) -> R): List<R> {\n    return mapTo(ArrayList<R>(collectionSizeOrDefault(10)), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original collection.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R> Iterable<T>.mapIndexed(transform: (index: Int, T) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(collectionSizeOrDefault(10)), transform)\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element and its index in the original collection.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any> Iterable<T>.mapIndexedNotNull(transform: (index: Int, T) -> R?): List<R> {\n    return mapIndexedNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original collection\n * and appends only the non-null results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Iterable<T>.mapIndexedNotNullTo(destination: C, transform: (index: Int, T) -> R?): C {\n    forEachIndexed { index, element -> transform(index, element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original collection\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.mapIndexedTo(destination: C, transform: (index: Int, T) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(checkIndexOverflow(index++), item))\n    return destination\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element in the original collection.\n * \n * @sample samples.collections.Collections.Transformations.mapNotNull\n */\npublic inline fun <T, R : Any> Iterable<T>.mapNotNull(transform: (T) -> R?): List<R> {\n    return mapNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element in the original collection\n * and appends only the non-null results to the given [destination].\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Iterable<T>.mapNotNullTo(destination: C, transform: (T) -> R?): C {\n    forEach { element -> transform(element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original collection\n * and appends the results to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.mapTo(destination: C, transform: (T) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original collection\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun <T> Iterable<T>.withIndex(): Iterable<IndexedValue<T>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a list containing only distinct elements from the given collection.\n * \n * Among equal elements of the given collection, only the first one will be present in the resulting list.\n * The elements in the resulting list are in the same order as they were in the source collection.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun <T> Iterable<T>.distinct(): List<T> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only elements from the given collection\n * having distinct keys returned by the given [selector] function.\n * \n * Among elements of the given collection with equal keys, only the first one will be present in the resulting list.\n * The elements in the resulting list are in the same order as they were in the source collection.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <T, K> Iterable<T>.distinctBy(selector: (T) -> K): List<T> {\n    val set = HashSet<K>()\n    val list = ArrayList<T>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a set containing all elements that are contained by both this collection and the specified collection.\n * \n * The returned set preserves the element iteration order of the original collection.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun <T> Iterable<T>.intersect(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this collection and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic infix fun <T> Iterable<T>.subtract(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a new [MutableSet] containing all distinct elements from the given collection.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic fun <T> Iterable<T>.toMutableSet(): MutableSet<T> {\n    return when (this) {\n        is Collection<T> -> LinkedHashSet(this)\n        else -> toCollection(LinkedHashSet<T>())\n    }\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original collection.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun <T> Iterable<T>.union(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun <T> Iterable<T>.all(predicate: (T) -> Boolean): Boolean {\n    if (this is Collection && isEmpty()) return true\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if collection has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun <T> Iterable<T>.any(): Boolean {\n    if (this is Collection) return !isEmpty()\n    return iterator().hasNext()\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun <T> Iterable<T>.any(predicate: (T) -> Boolean): Boolean {\n    if (this is Collection && isEmpty()) return false\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns the number of elements in this collection.\n */\npublic fun <T> Iterable<T>.count(): Int {\n    if (this is Collection) return size\n    var count = 0\n    for (element in this) checkCountOverflow(++count)\n    return count\n}\n\n/**\n * Returns the number of elements in this collection.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun <T> Iterable<T>.count(predicate: (T) -> Boolean): Int {\n    if (this is Collection && isEmpty()) return 0\n    var count = 0\n    for (element in this) if (predicate(element)) checkCountOverflow(++count)\n    return count\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns the specified [initial] value if the collection is empty.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n */\npublic inline fun <T, R> Iterable<T>.fold(initial: R, operation: (acc: R, T) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original collection.\n * \n * Returns the specified [initial] value if the collection is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <T, R> Iterable<T>.foldIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(checkIndexOverflow(index++), accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns the specified [initial] value if the list is empty.\n * \n * @param [operation] function that takes an element and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <T, R> List<T>.foldRight(initial: R, operation: (T, acc: R) -> R): R {\n    var accumulator = initial\n    if (!isEmpty()) {\n        val iterator = listIterator(size)\n        while (iterator.hasPrevious()) {\n            accumulator = operation(iterator.previous(), accumulator)\n        }\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original list and current accumulator value.\n * \n * Returns the specified [initial] value if the list is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <T, R> List<T>.foldRightIndexed(initial: R, operation: (index: Int, T, acc: R) -> R): R {\n    var accumulator = initial\n    if (!isEmpty()) {\n        val iterator = listIterator(size)\n        while (iterator.hasPrevious()) {\n            val index = iterator.previousIndex()\n            accumulator = operation(index, iterator.previous(), accumulator)\n        }\n    }\n    return accumulator\n}\n\n/**\n * Performs the given [action] on each element.\n */\n@kotlin.internal.HidesMembers\npublic inline fun <T> Iterable<T>.forEach(action: (T) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\npublic inline fun <T> Iterable<T>.forEachIndexed(action: (index: Int, T) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(checkIndexOverflow(index++), item)\n}\n\n@Deprecated(\"Use maxOrNull instead.\", ReplaceWith(\"this.maxOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Double>.max(): Double? {\n    return maxOrNull()\n}\n\n@Deprecated(\"Use maxOrNull instead.\", ReplaceWith(\"this.maxOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Float>.max(): Float? {\n    return maxOrNull()\n}\n\n@Deprecated(\"Use maxOrNull instead.\", ReplaceWith(\"this.maxOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun <T : Comparable<T>> Iterable<T>.max(): T? {\n    return maxOrNull()\n}\n\n@Deprecated(\"Use maxByOrNull instead.\", ReplaceWith(\"this.maxByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic inline fun <T, R : Comparable<R>> Iterable<T>.maxBy(selector: (T) -> R): T? {\n    return maxByOrNull(selector)\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <T, R : Comparable<R>> Iterable<T>.maxByOrNull(selector: (T) -> R): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var maxElem = iterator.next()\n    if (!iterator.hasNext()) return maxElem\n    var maxValue = selector(maxElem)\n    do {\n        val e = iterator.next()\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    } while (iterator.hasNext())\n    return maxElem\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the collection.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the collection is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.maxOf(selector: (T) -> Double): Double {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the collection.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the collection is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.maxOf(selector: (T) -> Float): Float {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the collection.\n * \n * @throws NoSuchElementException if the collection is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Comparable<R>> Iterable<T>.maxOf(selector: (T) -> R): R {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the collection or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.maxOfOrNull(selector: (T) -> Double): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the collection or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.maxOfOrNull(selector: (T) -> Float): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the collection or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Comparable<R>> Iterable<T>.maxOfOrNull(selector: (T) -> R): R? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the collection.\n * \n * @throws NoSuchElementException if the collection is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Iterable<T>.maxOfWith(comparator: Comparator<in R>, selector: (T) -> R): R {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the collection or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Iterable<T>.maxOfWithOrNull(comparator: Comparator<in R>, selector: (T) -> R): R? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic fun Iterable<Double>.maxOrNull(): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        max = maxOf(max, e)\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic fun Iterable<Float>.maxOrNull(): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        max = maxOf(max, e)\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T : Comparable<T>> Iterable<T>.maxOrNull(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (max < e) max = e\n    }\n    return max\n}\n\n@Deprecated(\"Use maxWithOrNull instead.\", ReplaceWith(\"this.maxWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun <T> Iterable<T>.maxWith(comparator: Comparator<in T>): T? {\n    return maxWithOrNull(comparator)\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T> Iterable<T>.maxWithOrNull(comparator: Comparator<in T>): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n@Deprecated(\"Use minOrNull instead.\", ReplaceWith(\"this.minOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Double>.min(): Double? {\n    return minOrNull()\n}\n\n@Deprecated(\"Use minOrNull instead.\", ReplaceWith(\"this.minOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Float>.min(): Float? {\n    return minOrNull()\n}\n\n@Deprecated(\"Use minOrNull instead.\", ReplaceWith(\"this.minOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun <T : Comparable<T>> Iterable<T>.min(): T? {\n    return minOrNull()\n}\n\n@Deprecated(\"Use minByOrNull instead.\", ReplaceWith(\"this.minByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic inline fun <T, R : Comparable<R>> Iterable<T>.minBy(selector: (T) -> R): T? {\n    return minByOrNull(selector)\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <T, R : Comparable<R>> Iterable<T>.minByOrNull(selector: (T) -> R): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var minElem = iterator.next()\n    if (!iterator.hasNext()) return minElem\n    var minValue = selector(minElem)\n    do {\n        val e = iterator.next()\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    } while (iterator.hasNext())\n    return minElem\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the collection.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the collection is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.minOf(selector: (T) -> Double): Double {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the collection.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the collection is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.minOf(selector: (T) -> Float): Float {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the collection.\n * \n * @throws NoSuchElementException if the collection is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Comparable<R>> Iterable<T>.minOf(selector: (T) -> R): R {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the collection or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.minOfOrNull(selector: (T) -> Double): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the collection or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.minOfOrNull(selector: (T) -> Float): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the collection or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Comparable<R>> Iterable<T>.minOfOrNull(selector: (T) -> R): R? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the collection.\n * \n * @throws NoSuchElementException if the collection is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Iterable<T>.minOfWith(comparator: Comparator<in R>, selector: (T) -> R): R {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the collection or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Iterable<T>.minOfWithOrNull(comparator: Comparator<in R>, selector: (T) -> R): R? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic fun Iterable<Double>.minOrNull(): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        min = minOf(min, e)\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic fun Iterable<Float>.minOrNull(): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        min = minOf(min, e)\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T : Comparable<T>> Iterable<T>.minOrNull(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (min > e) min = e\n    }\n    return min\n}\n\n@Deprecated(\"Use minWithOrNull instead.\", ReplaceWith(\"this.minWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun <T> Iterable<T>.minWith(comparator: Comparator<in T>): T? {\n    return minWithOrNull(comparator)\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T> Iterable<T>.minWithOrNull(comparator: Comparator<in T>): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns `true` if the collection has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun <T> Iterable<T>.none(): Boolean {\n    if (this is Collection) return isEmpty()\n    return !iterator().hasNext()\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun <T> Iterable<T>.none(predicate: (T) -> Boolean): Boolean {\n    if (this is Collection && isEmpty()) return true\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Performs the given [action] on each element and returns the collection itself afterwards.\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, C : Iterable<T>> C.onEach(action: (T) -> Unit): C {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element,\n * and returns the collection itself afterwards.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <T, C : Iterable<T>> C.onEachIndexed(action: (index: Int, T) -> Unit): C {\n    return apply { forEachIndexed(action) }\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Throws an exception if this collection is empty. If the collection can be empty in an expected way,\n * please use [reduceOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun <S, T : S> Iterable<T>.reduce(operation: (acc: S, T) -> S): S {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) throw UnsupportedOperationException(\"Empty collection can't be reduced.\")\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original collection.\n * \n * Throws an exception if this collection is empty. If the collection can be empty in an expected way,\n * please use [reduceIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun <S, T : S> Iterable<T>.reduceIndexed(operation: (index: Int, acc: S, T) -> S): S {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) throw UnsupportedOperationException(\"Empty collection can't be reduced.\")\n    var index = 1\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(checkIndexOverflow(index++), accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original collection.\n * \n * Returns `null` if the collection is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <S, T : S> Iterable<T>.reduceIndexedOrNull(operation: (index: Int, acc: S, T) -> S): S? {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) return null\n    var index = 1\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(checkIndexOverflow(index++), accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns `null` if the collection is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun <S, T : S> Iterable<T>.reduceOrNull(operation: (acc: S, T) -> S): S? {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) return null\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Throws an exception if this list is empty. If the list can be empty in an expected way,\n * please use [reduceRightOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun <S, T : S> List<T>.reduceRight(operation: (T, acc: S) -> S): S {\n    val iterator = listIterator(size)\n    if (!iterator.hasPrevious())\n        throw UnsupportedOperationException(\"Empty list can't be reduced.\")\n    var accumulator: S = iterator.previous()\n    while (iterator.hasPrevious()) {\n        accumulator = operation(iterator.previous(), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original list and current accumulator value.\n * \n * Throws an exception if this list is empty. If the list can be empty in an expected way,\n * please use [reduceRightIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun <S, T : S> List<T>.reduceRightIndexed(operation: (index: Int, T, acc: S) -> S): S {\n    val iterator = listIterator(size)\n    if (!iterator.hasPrevious())\n        throw UnsupportedOperationException(\"Empty list can't be reduced.\")\n    var accumulator: S = iterator.previous()\n    while (iterator.hasPrevious()) {\n        val index = iterator.previousIndex()\n        accumulator = operation(index, iterator.previous(), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original list and current accumulator value.\n * \n * Returns `null` if the list is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <S, T : S> List<T>.reduceRightIndexedOrNull(operation: (index: Int, T, acc: S) -> S): S? {\n    val iterator = listIterator(size)\n    if (!iterator.hasPrevious())\n        return null\n    var accumulator: S = iterator.previous()\n    while (iterator.hasPrevious()) {\n        val index = iterator.previousIndex()\n        accumulator = operation(index, iterator.previous(), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns `null` if the list is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun <S, T : S> List<T>.reduceRightOrNull(operation: (T, acc: S) -> S): S? {\n    val iterator = listIterator(size)\n    if (!iterator.hasPrevious())\n        return null\n    var accumulator: S = iterator.previous()\n    while (iterator.hasPrevious()) {\n        accumulator = operation(iterator.previous(), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <T, R> Iterable<T>.runningFold(initial: R, operation: (acc: R, T) -> R): List<R> {\n    val estimatedSize = collectionSizeOrDefault(9)\n    if (estimatedSize == 0) return listOf(initial)\n    val result = ArrayList<R>(estimatedSize + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original collection and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <T, R> Iterable<T>.runningFoldIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): List<R> {\n    val estimatedSize = collectionSizeOrDefault(9)\n    if (estimatedSize == 0) return listOf(initial)\n    val result = ArrayList<R>(estimatedSize + 1).apply { add(initial) }\n    var index = 0\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(index++, accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this collection.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and the element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun <S, T : S> Iterable<T>.runningReduce(operation: (acc: S, T) -> S): List<S> {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) return emptyList()\n    var accumulator: S = iterator.next()\n    val result = ArrayList<S>(collectionSizeOrDefault(10)).apply { add(accumulator) }\n    while (iterator.hasNext()) {\n        accumulator = operation(accumulator, iterator.next())\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original collection and current accumulator value that starts with the first element of this collection.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <S, T : S> Iterable<T>.runningReduceIndexed(operation: (index: Int, acc: S, T) -> S): List<S> {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) return emptyList()\n    var accumulator: S = iterator.next()\n    val result = ArrayList<S>(collectionSizeOrDefault(10)).apply { add(accumulator) }\n    var index = 1\n    while (iterator.hasNext()) {\n        accumulator = operation(index++, accumulator, iterator.next())\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun <T, R> Iterable<T>.scan(initial: R, operation: (acc: R, T) -> R): List<R> {\n    return runningFold(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original collection and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun <T, R> Iterable<T>.scanIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): List<R> {\n    return runningFoldIndexed(initial, operation)\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\n@Deprecated(\"Use sumOf instead.\", ReplaceWith(\"this.sumOf(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic inline fun <T> Iterable<T>.sumBy(selector: (T) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\n@Deprecated(\"Use sumOf instead.\", ReplaceWith(\"this.sumOf(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic inline fun <T> Iterable<T>.sumByDouble(selector: (T) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfDouble\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.sumOf(selector: (T) -> Double): Double {\n    var sum: Double = 0.toDouble()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfInt\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.sumOf(selector: (T) -> Int): Int {\n    var sum: Int = 0.toInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfLong\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.sumOf(selector: (T) -> Long): Long {\n    var sum: Long = 0.toLong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\n@SinceKotlin(\"1.5\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfUInt\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.sumOf(selector: (T) -> UInt): UInt {\n    var sum: UInt = 0.toUInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\n@SinceKotlin(\"1.5\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfULong\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.sumOf(selector: (T) -> ULong): ULong {\n    var sum: ULong = 0.toULong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns an original collection containing all the non-`null` elements, throwing an [IllegalArgumentException] if there are any `null` elements.\n */\npublic fun <T : Any> Iterable<T?>.requireNoNulls(): Iterable<T> {\n    for (element in this) {\n        if (element == null) {\n            throw IllegalArgumentException(\"null element found in $this.\")\n        }\n    }\n    @Suppress(\"UNCHECKED_CAST\")\n    return this as Iterable<T>\n}\n\n/**\n * Returns an original collection containing all the non-`null` elements, throwing an [IllegalArgumentException] if there are any `null` elements.\n */\npublic fun <T : Any> List<T?>.requireNoNulls(): List<T> {\n    for (element in this) {\n        if (element == null) {\n            throw IllegalArgumentException(\"null element found in $this.\")\n        }\n    }\n    @Suppress(\"UNCHECKED_CAST\")\n    return this as List<T>\n}\n\n/**\n * Splits this collection into a list of lists each not exceeding the given [size].\n * \n * The last list in the resulting list may have fewer elements than the given [size].\n * \n * @param size the number of elements to take in each list, must be positive and can be greater than the number of elements in this collection.\n * \n * @sample samples.collections.Collections.Transformations.chunked\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Iterable<T>.chunked(size: Int): List<List<T>> {\n    return windowed(size, size, partialWindows = true)\n}\n\n/**\n * Splits this collection into several lists each not exceeding the given [size]\n * and applies the given [transform] function to an each.\n * \n * @return list of results of the [transform] applied to an each list.\n * \n * Note that the list passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * The last list may have fewer elements than the given [size].\n * \n * @param size the number of elements to take in each list, must be positive and can be greater than the number of elements in this collection.\n * \n * @sample samples.text.Strings.chunkedTransform\n */\n@SinceKotlin(\"1.2\")\npublic fun <T, R> Iterable<T>.chunked(size: Int, transform: (List<T>) -> R): List<R> {\n    return windowed(size, size, partialWindows = true, transform = transform)\n}\n\n/**\n * Returns a list containing all elements of the original collection without the first occurrence of the given [element].\n */\npublic operator fun <T> Iterable<T>.minus(element: T): List<T> {\n    val result = ArrayList<T>(collectionSizeOrDefault(10))\n    var removed = false\n    return this.filterTo(result) { if (!removed && it == element) { removed = true; false } else true }\n}\n\n/**\n * Returns a list containing all elements of the original collection except the elements contained in the given [elements] array.\n * \n * The [elements] array may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n */\npublic operator fun <T> Iterable<T>.minus(elements: Array<out T>): List<T> {\n    if (elements.isEmpty()) return this.toList()\n    val other = elements.toHashSet()\n    return this.filterNot { it in other }\n}\n\n/**\n * Returns a list containing all elements of the original collection except the elements contained in the given [elements] collection.\n * \n * The [elements] collection may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n */\npublic operator fun <T> Iterable<T>.minus(elements: Iterable<T>): List<T> {\n    val other = elements.convertToSetForSetOperationWith(this)\n    if (other.isEmpty())\n        return this.toList()\n    return this.filterNot { it in other }\n}\n\n/**\n * Returns a list containing all elements of the original collection except the elements contained in the given [elements] sequence.\n * \n * The [elements] sequence may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n */\npublic operator fun <T> Iterable<T>.minus(elements: Sequence<T>): List<T> {\n    val other = elements.toHashSet()\n    if (other.isEmpty())\n        return this.toList()\n    return this.filterNot { it in other }\n}\n\n/**\n * Returns a list containing all elements of the original collection without the first occurrence of the given [element].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.minusElement(element: T): List<T> {\n    return minus(element)\n}\n\n/**\n * Splits the original collection into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Iterables.Operations.partition\n */\npublic inline fun <T> Iterable<T>.partition(predicate: (T) -> Boolean): Pair<List<T>, List<T>> {\n    val first = ArrayList<T>()\n    val second = ArrayList<T>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\npublic operator fun <T> Iterable<T>.plus(element: T): List<T> {\n    if (this is Collection) return this.plus(element)\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.add(element)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\npublic operator fun <T> Collection<T>.plus(element: T): List<T> {\n    val result = ArrayList<T>(size + 1)\n    result.addAll(this)\n    result.add(element)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] array.\n */\npublic operator fun <T> Iterable<T>.plus(elements: Array<out T>): List<T> {\n    if (this is Collection) return this.plus(elements)\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] array.\n */\npublic operator fun <T> Collection<T>.plus(elements: Array<out T>): List<T> {\n    val result = ArrayList<T>(this.size + elements.size)\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] collection.\n */\npublic operator fun <T> Iterable<T>.plus(elements: Iterable<T>): List<T> {\n    if (this is Collection) return this.plus(elements)\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] collection.\n */\npublic operator fun <T> Collection<T>.plus(elements: Iterable<T>): List<T> {\n    if (elements is Collection) {\n        val result = ArrayList<T>(this.size + elements.size)\n        result.addAll(this)\n        result.addAll(elements)\n        return result\n    } else {\n        val result = ArrayList<T>(this)\n        result.addAll(elements)\n        return result\n    }\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] sequence.\n */\npublic operator fun <T> Iterable<T>.plus(elements: Sequence<T>): List<T> {\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] sequence.\n */\npublic operator fun <T> Collection<T>.plus(elements: Sequence<T>): List<T> {\n    val result = ArrayList<T>(this.size + 10)\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.plusElement(element: T): List<T> {\n    return plus(element)\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.plusElement(element: T): List<T> {\n    return plus(element)\n}\n\n/**\n * Returns a list of snapshots of the window of the given [size]\n * sliding along this collection with the given [step], where each\n * snapshot is a list.\n * \n * Several last lists may have fewer elements than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this collection.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.takeWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Iterable<T>.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false): List<List<T>> {\n    checkWindowSizeStep(size, step)\n    if (this is RandomAccess && this is List) {\n        val thisSize = this.size\n        val resultCapacity = thisSize / step + if (thisSize % step == 0) 0 else 1\n        val result = ArrayList<List<T>>(resultCapacity)\n        var index = 0\n        while (index in 0 until thisSize) {\n            val windowSize = size.coerceAtMost(thisSize - index)\n            if (windowSize < size && !partialWindows) break\n            result.add(List(windowSize) { this[it + index] })\n            index += step\n        }\n        return result\n    }\n    val result = ArrayList<List<T>>()\n    windowedIterator(iterator(), size, step, partialWindows, reuseBuffer = false).forEach {\n        result.add(it)\n    }\n    return result\n}\n\n/**\n * Returns a list of results of applying the given [transform] function to\n * an each list representing a view over the window of the given [size]\n * sliding along this collection with the given [step].\n * \n * Note that the list passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * Several last lists may have fewer elements than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this collection.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.averageWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <T, R> Iterable<T>.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false, transform: (List<T>) -> R): List<R> {\n    checkWindowSizeStep(size, step)\n    if (this is RandomAccess && this is List) {\n        val thisSize = this.size\n        val resultCapacity = thisSize / step + if (thisSize % step == 0) 0 else 1\n        val result = ArrayList<R>(resultCapacity)\n        val window = MovingSubList(this)\n        var index = 0\n        while (index in 0 until thisSize) {\n            val windowSize = size.coerceAtMost(thisSize - index)\n            if (!partialWindows && windowSize < size) break\n            window.move(index, index + windowSize)\n            result.add(transform(window))\n            index += step\n        }\n        return result\n    }\n    val result = ArrayList<R>()\n    windowedIterator(iterator(), size, step, partialWindows, reuseBuffer = true).forEach {\n        result.add(transform(it))\n    }\n    return result\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <T, R> Iterable<T>.zip(other: Array<out R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` collection and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <T, R, V> Iterable<T>.zip(other: Array<out R>, transform: (a: T, b: R) -> V): List<V> {\n    val arraySize = other.size\n    val list = ArrayList<V>(minOf(collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in this) {\n        if (i >= arraySize) break\n        list.add(transform(element, other[i++]))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] collection with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <T, R> Iterable<T>.zip(other: Iterable<R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` collection and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <T, R, V> Iterable<T>.zip(other: Iterable<R>, transform: (a: T, b: R) -> V): List<V> {\n    val first = iterator()\n    val second = other.iterator()\n    val list = ArrayList<V>(minOf(collectionSizeOrDefault(10), other.collectionSizeOrDefault(10)))\n    while (first.hasNext() && second.hasNext()) {\n        list.add(transform(first.next(), second.next()))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs of each two adjacent elements in this collection.\n * \n * The returned list is empty if this collection contains less than two elements.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNext\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Iterable<T>.zipWithNext(): List<Pair<T, T>> {\n    return zipWithNext { a, b -> a to b }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to an each pair of two adjacent elements in this collection.\n * \n * The returned list is empty if this collection contains less than two elements.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNextToFindDeltas\n */\n@SinceKotlin(\"1.2\")\npublic inline fun <T, R> Iterable<T>.zipWithNext(transform: (a: T, b: T) -> R): List<R> {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return emptyList()\n    val result = mutableListOf<R>()\n    var current = iterator.next()\n    while (iterator.hasNext()) {\n        val next = iterator.next()\n        result.add(transform(current, next))\n        current = next\n    }\n    return result\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <T, A : Appendable> Iterable<T>.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            buffer.appendElement(element, transform)\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun <T> Iterable<T>.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Returns this collection as an [Iterable].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.asIterable(): Iterable<T> {\n    return this\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original collection returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromCollection\n */\npublic fun <T> Iterable<T>.asSequence(): Sequence<T> {\n    return Sequence { this.iterator() }\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfByte\")\npublic fun Iterable<Byte>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfShort\")\npublic fun Iterable<Short>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfInt\")\npublic fun Iterable<Int>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfLong\")\npublic fun Iterable<Long>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfFloat\")\npublic fun Iterable<Float>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfDouble\")\npublic fun Iterable<Double>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfByte\")\npublic fun Iterable<Byte>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfShort\")\npublic fun Iterable<Short>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfInt\")\npublic fun Iterable<Int>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfLong\")\npublic fun Iterable<Long>.sum(): Long {\n    var sum: Long = 0L\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfFloat\")\npublic fun Iterable<Float>.sum(): Float {\n    var sum: Float = 0.0f\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfDouble\")\npublic fun Iterable<Double>.sum(): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StandardKt\")\npackage kotlin\n\nimport kotlin.contracts.*\n\n/**\n * An exception is thrown to indicate that a method body remains to be implemented.\n */\npublic class NotImplementedError(message: String = \"An operation is not implemented.\") : Error(message)\n\n/**\n * Always throws [NotImplementedError] stating that operation is not implemented.\n */\n\n@kotlin.internal.InlineOnly\npublic inline fun TODO(): Nothing = throw NotImplementedError()\n\n/**\n * Always throws [NotImplementedError] stating that operation is not implemented.\n *\n * @param reason a string explaining why the implementation is missing.\n */\n@kotlin.internal.InlineOnly\npublic inline fun TODO(reason: String): Nothing = throw NotImplementedError(\"An operation is not implemented: $reason\")\n\n\n\n/**\n * Calls the specified function [block] and returns its result.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#run).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <R> run(block: () -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block()\n}\n\n/**\n * Calls the specified function [block] with `this` value as its receiver and returns its result.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#run).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> T.run(block: T.() -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block()\n}\n\n/**\n * Calls the specified function [block] with the given [receiver] as its receiver and returns its result.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#with).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> with(receiver: T, block: T.() -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return receiver.block()\n}\n\n/**\n * Calls the specified function [block] with `this` value as its receiver and returns `this` value.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#apply).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> T.apply(block: T.() -> Unit): T {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    block()\n    return this\n}\n\n/**\n * Calls the specified function [block] with `this` value as its argument and returns `this` value.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#also).\n */\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.also(block: (T) -> Unit): T {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    block(this)\n    return this\n}\n\n/**\n * Calls the specified function [block] with `this` value as its argument and returns its result.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#let).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> T.let(block: (T) -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block(this)\n}\n\n/**\n * Returns `this` value if it satisfies the given [predicate] or `null`, if it doesn't.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#takeif-and-takeunless).\n */\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.takeIf(predicate: (T) -> Boolean): T? {\n    contract {\n        callsInPlace(predicate, InvocationKind.EXACTLY_ONCE)\n    }\n    return if (predicate(this)) this else null\n}\n\n/**\n * Returns `this` value if it _does not_ satisfy the given [predicate] or `null`, if it does.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#takeif-and-takeunless).\n */\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.takeUnless(predicate: (T) -> Boolean): T? {\n    contract {\n        callsInPlace(predicate, InvocationKind.EXACTLY_ONCE)\n    }\n    return if (!predicate(this)) this else null\n}\n\n/**\n * Executes the given function [action] specified number of [times].\n *\n * A zero-based index of current iteration is passed as a parameter to [action].\n *\n * @sample samples.misc.ControlFlow.repeat\n */\n@kotlin.internal.InlineOnly\npublic inline fun repeat(times: Int, action: (Int) -> Unit) {\n    contract { callsInPlace(action) }\n\n    for (index in 0 until times) {\n        action(index)\n    }\n}\n",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"/*\n * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"SequencesKt\")\n\npackage kotlin.sequences\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.random.*\n\n/**\n * Returns `true` if [element] is found in the sequence.\n *\n * The operation is _terminal_.\n */\npublic operator fun <@kotlin.internal.OnlyInputTypes T> Sequence<T>.contains(element: T): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this sequence.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic fun <T> Sequence<T>.elementAt(index: Int): T {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"Sequence doesn't contain element at index $index.\") }\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this sequence.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\npublic fun <T> Sequence<T>.elementAtOrElse(index: Int, defaultValue: (Int) -> T): T {\n    if (index < 0)\n        return defaultValue(index)\n    val iterator = iterator()\n    var count = 0\n    while (iterator.hasNext()) {\n        val element = iterator.next()\n        if (index == count++)\n            return element\n    }\n    return defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this sequence.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\npublic fun <T> Sequence<T>.elementAtOrNull(index: Int): T? {\n    if (index < 0)\n        return null\n    val iterator = iterator()\n    var count = 0\n    while (iterator.hasNext()) {\n        val element = iterator.next()\n        if (index == count++)\n            return element\n    }\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.find(predicate: (T) -> Boolean): T? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.findLast(predicate: (T) -> Boolean): T? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the sequence is empty.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.first(): T {\n    val iterator = iterator()\n    if (!iterator.hasNext())\n        throw NoSuchElementException(\"Sequence is empty.\")\n    return iterator.next()\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.first(predicate: (T) -> Boolean): T {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Sequence contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first non-null value produced by [transform] function being applied to elements of this sequence in iteration order,\n * or throws [NoSuchElementException] if no non-null value was produced.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.firstNotNullOf\n */\n@SinceKotlin(\"1.5\")\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Any> Sequence<T>.firstNotNullOf(transform: (T) -> R?): R {\n    return firstNotNullOfOrNull(transform) ?: throw NoSuchElementException(\"No element of the sequence was transformed to a non-null value.\")\n}\n\n/**\n * Returns the first non-null value produced by [transform] function being applied to elements of this sequence in iteration order,\n * or `null` if no non-null value was produced.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.firstNotNullOf\n */\n@SinceKotlin(\"1.5\")\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Any> Sequence<T>.firstNotNullOfOrNull(transform: (T) -> R?): R? {\n    for (element in this) {\n        val result = transform(element)\n        if (result != null) {\n            return result\n        }\n    }\n    return null\n}\n\n/**\n * Returns the first element, or `null` if the sequence is empty.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.firstOrNull(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext())\n        return null\n    return iterator.next()\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.firstOrNull(predicate: (T) -> Boolean): T? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns first index of [element], or -1 if the sequence does not contain element.\n *\n * The operation is _terminal_.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Sequence<T>.indexOf(element: T): Int {\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (element == item)\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the sequence does not contain such element.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.indexOfFirst(predicate: (T) -> Boolean): Int {\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (predicate(item))\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the sequence does not contain such element.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.indexOfLast(predicate: (T) -> Boolean): Int {\n    var lastIndex = -1\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (predicate(item))\n            lastIndex = index\n        index++\n    }\n    return lastIndex\n}\n\n/**\n * Returns the last element.\n *\n * The operation is _terminal_.\n * \n * @throws NoSuchElementException if the sequence is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun <T> Sequence<T>.last(): T {\n    val iterator = iterator()\n    if (!iterator.hasNext())\n        throw NoSuchElementException(\"Sequence is empty.\")\n    var last = iterator.next()\n    while (iterator.hasNext())\n        last = iterator.next()\n    return last\n}\n\n/**\n * Returns the last element matching the given [predicate].\n *\n * The operation is _terminal_.\n * \n * @throws NoSuchElementException if no such element is found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun <T> Sequence<T>.last(predicate: (T) -> Boolean): T {\n    var last: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            last = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Sequence contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return last as T\n}\n\n/**\n * Returns last index of [element], or -1 if the sequence does not contain element.\n *\n * The operation is _terminal_.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Sequence<T>.lastIndexOf(element: T): Int {\n    var lastIndex = -1\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (element == item)\n            lastIndex = index\n        index++\n    }\n    return lastIndex\n}\n\n/**\n * Returns the last element, or `null` if the sequence is empty.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun <T> Sequence<T>.lastOrNull(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext())\n        return null\n    var last = iterator.next()\n    while (iterator.hasNext())\n        last = iterator.next()\n    return last\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun <T> Sequence<T>.lastOrNull(predicate: (T) -> Boolean): T? {\n    var last: T? = null\n    for (element in this) {\n        if (predicate(element)) {\n            last = element\n        }\n    }\n    return last\n}\n\n/**\n * Returns the single element, or throws an exception if the sequence is empty or has more than one element.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.single(): T {\n    val iterator = iterator()\n    if (!iterator.hasNext())\n        throw NoSuchElementException(\"Sequence is empty.\")\n    val single = iterator.next()\n    if (iterator.hasNext())\n        throw IllegalArgumentException(\"Sequence has more than one element.\")\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.single(predicate: (T) -> Boolean): T {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Sequence contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Sequence contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as T\n}\n\n/**\n * Returns single element, or `null` if the sequence is empty or has more than one element.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.singleOrNull(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext())\n        return null\n    val single = iterator.next()\n    if (iterator.hasNext())\n        return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.singleOrNull(predicate: (T) -> Boolean): T? {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns a sequence containing all elements except first [n] elements.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> Sequence<T>.drop(n: Int): Sequence<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return when {\n        n == 0 -> this\n        this is DropTakeSequence -> this.drop(n)\n        else -> DropSequence(this, n)\n    }\n}\n\n/**\n * Returns a sequence containing all elements except first elements that satisfy the given [predicate].\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> Sequence<T>.dropWhile(predicate: (T) -> Boolean): Sequence<T> {\n    return DropWhileSequence(this, predicate)\n}\n\n/**\n * Returns a sequence containing only elements matching the given [predicate].\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic fun <T> Sequence<T>.filter(predicate: (T) -> Boolean): Sequence<T> {\n    return FilteringSequence(this, true, predicate)\n}\n\n/**\n * Returns a sequence containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexed\n */\npublic fun <T> Sequence<T>.filterIndexed(predicate: (index: Int, T) -> Boolean): Sequence<T> {\n    // TODO: Rewrite with generalized MapFilterIndexingSequence\n    return TransformingSequence(FilteringSequence(IndexingSequence(this), true, { predicate(it.index, it.value) }), { it.value })\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexedTo\n */\npublic inline fun <T, C : MutableCollection<in T>> Sequence<T>.filterIndexedTo(destination: C, predicate: (index: Int, T) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Returns a sequence containing all elements that are instances of specified type parameter R.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Filtering.filterIsInstance\n */\npublic inline fun <reified R> Sequence<*>.filterIsInstance(): Sequence<@kotlin.internal.NoInfer R> {\n    @Suppress(\"UNCHECKED_CAST\")\n    return filter { it is R } as Sequence<R>\n}\n\n/**\n * Appends all elements that are instances of specified type parameter R to the given [destination].\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Filtering.filterIsInstanceTo\n */\npublic inline fun <reified R, C : MutableCollection<in R>> Sequence<*>.filterIsInstanceTo(destination: C): C {\n    for (element in this) if (element is R) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a sequence containing all elements not matching the given [predicate].\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic fun <T> Sequence<T>.filterNot(predicate: (T) -> Boolean): Sequence<T> {\n    return FilteringSequence(this, false, predicate)\n}\n\n/**\n * Returns a sequence containing all elements that are not `null`.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Filtering.filterNotNull\n */\npublic fun <T : Any> Sequence<T?>.filterNotNull(): Sequence<T> {\n    @Suppress(\"UNCHECKED_CAST\")\n    return filterNot { it == null } as Sequence<T>\n}\n\n/**\n * Appends all elements that are not `null` to the given [destination].\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Filtering.filterNotNullTo\n */\npublic fun <C : MutableCollection<in T>, T : Any> Sequence<T?>.filterNotNullTo(destination: C): C {\n    for (element in this) if (element != null) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <T, C : MutableCollection<in T>> Sequence<T>.filterNotTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <T, C : MutableCollection<in T>> Sequence<T>.filterTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a sequence containing first [n] elements.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> Sequence<T>.take(n: Int): Sequence<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return when {\n        n == 0 -> emptySequence()\n        this is DropTakeSequence -> this.take(n)\n        else -> TakeSequence(this, n)\n    }\n}\n\n/**\n * Returns a sequence containing first elements satisfying the given [predicate].\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> Sequence<T>.takeWhile(predicate: (T) -> Boolean): Sequence<T> {\n    return TakeWhileSequence(this, predicate)\n}\n\n/**\n * Returns a sequence that yields elements of this sequence sorted according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n *\n * The operation is _intermediate_ and _stateful_.\n */\npublic fun <T : Comparable<T>> Sequence<T>.sorted(): Sequence<T> {\n    return object : Sequence<T> {\n        override fun iterator(): Iterator<T> {\n            val sortedList = this@sorted.toMutableList()\n            sortedList.sort()\n            return sortedList.iterator()\n        }\n    }\n}\n\n/**\n * Returns a sequence that yields elements of this sequence sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n *\n * The operation is _intermediate_ and _stateful_.\n * \n * @sample samples.collections.Collections.Sorting.sortedBy\n */\npublic inline fun <T, R : Comparable<R>> Sequence<T>.sortedBy(crossinline selector: (T) -> R?): Sequence<T> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a sequence that yields elements of this sequence sorted descending according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n *\n * The operation is _intermediate_ and _stateful_.\n */\npublic inline fun <T, R : Comparable<R>> Sequence<T>.sortedByDescending(crossinline selector: (T) -> R?): Sequence<T> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a sequence that yields elements of this sequence sorted descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n *\n * The operation is _intermediate_ and _stateful_.\n */\npublic fun <T : Comparable<T>> Sequence<T>.sortedDescending(): Sequence<T> {\n    return sortedWith(reverseOrder())\n}\n\n/**\n * Returns a sequence that yields elements of this sequence sorted according to the specified [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n *\n * The operation is _intermediate_ and _stateful_.\n */\npublic fun <T> Sequence<T>.sortedWith(comparator: Comparator<in T>): Sequence<T> {\n    return object : Sequence<T> {\n        override fun iterator(): Iterator<T> {\n            val sortedList = this@sortedWith.toMutableList()\n            sortedList.sortWith(comparator)\n            return sortedList.iterator()\n        }\n    }\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given sequence.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original sequence.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.associate\n */\npublic inline fun <T, K, V> Sequence<T>.associate(transform: (T) -> Pair<K, V>): Map<K, V> {\n    return associateTo(LinkedHashMap<K, V>(), transform)\n}\n\n/**\n * Returns a [Map] containing the elements from the given sequence indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original sequence.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.associateBy\n */\npublic inline fun <T, K> Sequence<T>.associateBy(keySelector: (T) -> K): Map<K, T> {\n    return associateByTo(LinkedHashMap<K, T>(), keySelector)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given sequence.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original sequence.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.associateByWithValueTransform\n */\npublic inline fun <T, K, V> Sequence<T>.associateBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, V> {\n    return associateByTo(LinkedHashMap<K, V>(), keySelector, valueTransform)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given sequence\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.associateByTo\n */\npublic inline fun <T, K, M : MutableMap<in K, in T>> Sequence<T>.associateByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given sequence.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.associateByToWithValueTransform\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Sequence<T>.associateByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given sequence.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.associateTo\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Sequence<T>.associateTo(destination: M, transform: (T) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Returns a [Map] where keys are elements from the given sequence and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original sequence.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.3\")\npublic inline fun <K, V> Sequence<K>.associateWith(valueSelector: (K) -> V): Map<K, V> {\n    val result = LinkedHashMap<K, V>()\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given sequence,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.associateWithTo\n */\n@SinceKotlin(\"1.3\")\npublic inline fun <K, V, M : MutableMap<in K, in V>> Sequence<K>.associateWithTo(destination: M, valueSelector: (K) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n *\n * The operation is _terminal_.\n */\npublic fun <T, C : MutableCollection<in T>> Sequence<T>.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Returns a new [HashSet] of all elements.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.toHashSet(): HashSet<T> {\n    return toCollection(HashSet<T>())\n}\n\n/**\n * Returns a [List] containing all elements.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.toList(): List<T> {\n    return this.toMutableList().optimizeReadOnlyList()\n}\n\n/**\n * Returns a new [MutableList] filled with all elements of this sequence.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.toMutableList(): MutableList<T> {\n    return toCollection(ArrayList<T>())\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original sequence.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.toSet(): Set<T> {\n    return toCollection(LinkedHashSet<T>()).optimizeReadOnlySet()\n}\n\n/**\n * Returns a single sequence of all elements from results of [transform] function being invoked on each element of original sequence.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIterable\")\npublic fun <T, R> Sequence<T>.flatMap(transform: (T) -> Iterable<R>): Sequence<R> {\n    return FlatteningSequence(this, transform, Iterable<R>::iterator)\n}\n\n/**\n * Returns a single sequence of all elements from results of [transform] function being invoked on each element of original sequence.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic fun <T, R> Sequence<T>.flatMap(transform: (T) -> Sequence<R>): Sequence<R> {\n    return FlatteningSequence(this, transform, Sequence<R>::iterator)\n}\n\n/**\n * Returns a single sequence of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original sequence.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterable\")\npublic fun <T, R> Sequence<T>.flatMapIndexed(transform: (index: Int, T) -> Iterable<R>): Sequence<R> {\n    return flatMapIndexed(this, transform, Iterable<R>::iterator)\n}\n\n/**\n * Returns a single sequence of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original sequence.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedSequence\")\npublic fun <T, R> Sequence<T>.flatMapIndexed(transform: (index: Int, T) -> Sequence<R>): Sequence<R> {\n    return flatMapIndexed(this, transform, Sequence<R>::iterator)\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original sequence, to the given [destination].\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterableTo\")\n@kotlin.internal.InlineOnly\npublic inline fun <T, R, C : MutableCollection<in R>> Sequence<T>.flatMapIndexedTo(destination: C, transform: (index: Int, T) -> Iterable<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(checkIndexOverflow(index++), element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original sequence, to the given [destination].\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedSequenceTo\")\n@kotlin.internal.InlineOnly\npublic inline fun <T, R, C : MutableCollection<in R>> Sequence<T>.flatMapIndexedTo(destination: C, transform: (index: Int, T) -> Sequence<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(checkIndexOverflow(index++), element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original sequence, to the given [destination].\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIterableTo\")\npublic inline fun <T, R, C : MutableCollection<in R>> Sequence<T>.flatMapTo(destination: C, transform: (T) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original sequence, to the given [destination].\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Sequence<T>.flatMapTo(destination: C, transform: (T) -> Sequence<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original sequence by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original sequence.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K> Sequence<T>.groupBy(keySelector: (T) -> K): Map<K, List<T>> {\n    return groupByTo(LinkedHashMap<K, MutableList<T>>(), keySelector)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original sequence\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original sequence.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V> Sequence<T>.groupBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups elements of the original sequence by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K, M : MutableMap<in K, MutableList<T>>> Sequence<T>.groupByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<T>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original sequence\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V, M : MutableMap<in K, MutableList<V>>> Sequence<T>.groupByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Creates a [Grouping] source from a sequence to be used later with one of group-and-fold operations\n * using the specified [keySelector] function to extract a key from each element.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Grouping.groupingByEachCount\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, K> Sequence<T>.groupingBy(crossinline keySelector: (T) -> K): Grouping<T, K> {\n    return object : Grouping<T, K> {\n        override fun sourceIterator(): Iterator<T> = this@groupingBy.iterator()\n        override fun keyOf(element: T): K = keySelector(element)\n    }\n}\n\n/**\n * Returns a sequence containing the results of applying the given [transform] function\n * to each element in the original sequence.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic fun <T, R> Sequence<T>.map(transform: (T) -> R): Sequence<R> {\n    return TransformingSequence(this, transform)\n}\n\n/**\n * Returns a sequence containing the results of applying the given [transform] function\n * to each element and its index in the original sequence.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic fun <T, R> Sequence<T>.mapIndexed(transform: (index: Int, T) -> R): Sequence<R> {\n    return TransformingIndexedSequence(this, transform)\n}\n\n/**\n * Returns a sequence containing only the non-null results of applying the given [transform] function\n * to each element and its index in the original sequence.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic fun <T, R : Any> Sequence<T>.mapIndexedNotNull(transform: (index: Int, T) -> R?): Sequence<R> {\n    return TransformingIndexedSequence(this, transform).filterNotNull()\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original sequence\n * and appends only the non-null results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Sequence<T>.mapIndexedNotNullTo(destination: C, transform: (index: Int, T) -> R?): C {\n    forEachIndexed { index, element -> transform(index, element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original sequence\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Sequence<T>.mapIndexedTo(destination: C, transform: (index: Int, T) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(checkIndexOverflow(index++), item))\n    return destination\n}\n\n/**\n * Returns a sequence containing only the non-null results of applying the given [transform] function\n * to each element in the original sequence.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Transformations.mapNotNull\n */\npublic fun <T, R : Any> Sequence<T>.mapNotNull(transform: (T) -> R?): Sequence<R> {\n    return TransformingSequence(this, transform).filterNotNull()\n}\n\n/**\n * Applies the given [transform] function to each element in the original sequence\n * and appends only the non-null results to the given [destination].\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Sequence<T>.mapNotNullTo(destination: C, transform: (T) -> R?): C {\n    forEach { element -> transform(element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original sequence\n * and appends the results to the given [destination].\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Sequence<T>.mapTo(destination: C, transform: (T) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Returns a sequence that wraps each element of the original sequence\n * into an [IndexedValue] containing the index of that element and the element itself.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic fun <T> Sequence<T>.withIndex(): Sequence<IndexedValue<T>> {\n    return IndexingSequence(this)\n}\n\n/**\n * Returns a sequence containing only distinct elements from the given sequence.\n * \n * Among equal elements of the given sequence, only the first one will be present in the resulting sequence.\n * The elements in the resulting sequence are in the same order as they were in the source sequence.\n *\n * The operation is _intermediate_ and _stateful_.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun <T> Sequence<T>.distinct(): Sequence<T> {\n    return this.distinctBy { it }\n}\n\n/**\n * Returns a sequence containing only elements from the given sequence\n * having distinct keys returned by the given [selector] function.\n * \n * Among elements of the given sequence with equal keys, only the first one will be present in the resulting sequence.\n * The elements in the resulting sequence are in the same order as they were in the source sequence.\n *\n * The operation is _intermediate_ and _stateful_.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun <T, K> Sequence<T>.distinctBy(selector: (T) -> K): Sequence<T> {\n    return DistinctSequence(this, selector)\n}\n\n/**\n * Returns a new [MutableSet] containing all distinct elements from the given sequence.\n * \n * The returned set preserves the element iteration order of the original sequence.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.toMutableSet(): MutableSet<T> {\n    val set = LinkedHashSet<T>()\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun <T> Sequence<T>.all(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if sequence has at least one element.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun <T> Sequence<T>.any(): Boolean {\n    return iterator().hasNext()\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun <T> Sequence<T>.any(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns the number of elements in this sequence.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.count(): Int {\n    var count = 0\n    for (element in this) checkCountOverflow(++count)\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.count(predicate: (T) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) checkCountOverflow(++count)\n    return count\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns the specified [initial] value if the sequence is empty.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, R> Sequence<T>.fold(initial: R, operation: (acc: R, T) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original sequence.\n * \n * Returns the specified [initial] value if the sequence is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, R> Sequence<T>.foldIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(checkIndexOverflow(index++), accumulator, element)\n    return accumulator\n}\n\n/**\n * Performs the given [action] on each element.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.forEach(action: (T) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.forEachIndexed(action: (index: Int, T) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(checkIndexOverflow(index++), item)\n}\n\n@Deprecated(\"Use maxOrNull instead.\", ReplaceWith(\"this.maxOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\n@SinceKotlin(\"1.1\")\npublic fun Sequence<Double>.max(): Double? {\n    return maxOrNull()\n}\n\n@Deprecated(\"Use maxOrNull instead.\", ReplaceWith(\"this.maxOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\n@SinceKotlin(\"1.1\")\npublic fun Sequence<Float>.max(): Float? {\n    return maxOrNull()\n}\n\n@Deprecated(\"Use maxOrNull instead.\", ReplaceWith(\"this.maxOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun <T : Comparable<T>> Sequence<T>.max(): T? {\n    return maxOrNull()\n}\n\n@Deprecated(\"Use maxByOrNull instead.\", ReplaceWith(\"this.maxByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic inline fun <T, R : Comparable<R>> Sequence<T>.maxBy(selector: (T) -> R): T? {\n    return maxByOrNull(selector)\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Aggregates.maxByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <T, R : Comparable<R>> Sequence<T>.maxByOrNull(selector: (T) -> R): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var maxElem = iterator.next()\n    if (!iterator.hasNext()) return maxElem\n    var maxValue = selector(maxElem)\n    do {\n        val e = iterator.next()\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    } while (iterator.hasNext())\n    return maxElem\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the sequence.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the sequence is empty.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.maxOf(selector: (T) -> Double): Double {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the sequence.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the sequence is empty.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.maxOf(selector: (T) -> Float): Float {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the sequence.\n * \n * @throws NoSuchElementException if the sequence is empty.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Comparable<R>> Sequence<T>.maxOf(selector: (T) -> R): R {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the sequence or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.maxOfOrNull(selector: (T) -> Double): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the sequence or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.maxOfOrNull(selector: (T) -> Float): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the sequence or `null` if there are no elements.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Comparable<R>> Sequence<T>.maxOfOrNull(selector: (T) -> R): R? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the sequence.\n * \n * @throws NoSuchElementException if the sequence is empty.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Sequence<T>.maxOfWith(comparator: Comparator<in R>, selector: (T) -> R): R {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the sequence or `null` if there are no elements.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Sequence<T>.maxOfWithOrNull(comparator: Comparator<in R>, selector: (T) -> R): R? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\npublic fun Sequence<Double>.maxOrNull(): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        max = maxOf(max, e)\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\npublic fun Sequence<Float>.maxOrNull(): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        max = maxOf(max, e)\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T : Comparable<T>> Sequence<T>.maxOrNull(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (max < e) max = e\n    }\n    return max\n}\n\n@Deprecated(\"Use maxWithOrNull instead.\", ReplaceWith(\"this.maxWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun <T> Sequence<T>.maxWith(comparator: Comparator<in T>): T? {\n    return maxWithOrNull(comparator)\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T> Sequence<T>.maxWithOrNull(comparator: Comparator<in T>): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n@Deprecated(\"Use minOrNull instead.\", ReplaceWith(\"this.minOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\n@SinceKotlin(\"1.1\")\npublic fun Sequence<Double>.min(): Double? {\n    return minOrNull()\n}\n\n@Deprecated(\"Use minOrNull instead.\", ReplaceWith(\"this.minOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\n@SinceKotlin(\"1.1\")\npublic fun Sequence<Float>.min(): Float? {\n    return minOrNull()\n}\n\n@Deprecated(\"Use minOrNull instead.\", ReplaceWith(\"this.minOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun <T : Comparable<T>> Sequence<T>.min(): T? {\n    return minOrNull()\n}\n\n@Deprecated(\"Use minByOrNull instead.\", ReplaceWith(\"this.minByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic inline fun <T, R : Comparable<R>> Sequence<T>.minBy(selector: (T) -> R): T? {\n    return minByOrNull(selector)\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Aggregates.minByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <T, R : Comparable<R>> Sequence<T>.minByOrNull(selector: (T) -> R): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var minElem = iterator.next()\n    if (!iterator.hasNext()) return minElem\n    var minValue = selector(minElem)\n    do {\n        val e = iterator.next()\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    } while (iterator.hasNext())\n    return minElem\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the sequence.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the sequence is empty.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.minOf(selector: (T) -> Double): Double {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the sequence.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the sequence is empty.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.minOf(selector: (T) -> Float): Float {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the sequence.\n * \n * @throws NoSuchElementException if the sequence is empty.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Comparable<R>> Sequence<T>.minOf(selector: (T) -> R): R {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the sequence or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.minOfOrNull(selector: (T) -> Double): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the sequence or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.minOfOrNull(selector: (T) -> Float): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the sequence or `null` if there are no elements.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Comparable<R>> Sequence<T>.minOfOrNull(selector: (T) -> R): R? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the sequence.\n * \n * @throws NoSuchElementException if the sequence is empty.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Sequence<T>.minOfWith(comparator: Comparator<in R>, selector: (T) -> R): R {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the sequence or `null` if there are no elements.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Sequence<T>.minOfWithOrNull(comparator: Comparator<in R>, selector: (T) -> R): R? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\npublic fun Sequence<Double>.minOrNull(): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        min = minOf(min, e)\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\npublic fun Sequence<Float>.minOrNull(): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        min = minOf(min, e)\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T : Comparable<T>> Sequence<T>.minOrNull(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (min > e) min = e\n    }\n    return min\n}\n\n@Deprecated(\"Use minWithOrNull instead.\", ReplaceWith(\"this.minWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun <T> Sequence<T>.minWith(comparator: Comparator<in T>): T? {\n    return minWithOrNull(comparator)\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T> Sequence<T>.minWithOrNull(comparator: Comparator<in T>): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns `true` if the sequence has no elements.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun <T> Sequence<T>.none(): Boolean {\n    return !iterator().hasNext()\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun <T> Sequence<T>.none(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns a sequence which performs the given [action] on each element of the original sequence as they pass through it.\n *\n * The operation is _intermediate_ and _stateless_.\n */\n@SinceKotlin(\"1.1\")\npublic fun <T> Sequence<T>.onEach(action: (T) -> Unit): Sequence<T> {\n    return map {\n        action(it)\n        it\n    }\n}\n\n/**\n * Returns a sequence which performs the given [action] on each element of the original sequence as they pass through it.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n *\n * The operation is _intermediate_ and _stateless_.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T> Sequence<T>.onEachIndexed(action: (index: Int, T) -> Unit): Sequence<T> {\n    return mapIndexed { index, element ->\n        action(index, element)\n        element\n    }\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Throws an exception if this sequence is empty. If the sequence can be empty in an expected way,\n * please use [reduceOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun <S, T : S> Sequence<T>.reduce(operation: (acc: S, T) -> S): S {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) throw UnsupportedOperationException(\"Empty sequence can't be reduced.\")\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original sequence.\n * \n * Throws an exception if this sequence is empty. If the sequence can be empty in an expected way,\n * please use [reduceIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun <S, T : S> Sequence<T>.reduceIndexed(operation: (index: Int, acc: S, T) -> S): S {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) throw UnsupportedOperationException(\"Empty sequence can't be reduced.\")\n    var index = 1\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(checkIndexOverflow(index++), accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original sequence.\n * \n * Returns `null` if the sequence is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <S, T : S> Sequence<T>.reduceIndexedOrNull(operation: (index: Int, acc: S, T) -> S): S? {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) return null\n    var index = 1\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(checkIndexOverflow(index++), accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns `null` if the sequence is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun <S, T : S> Sequence<T>.reduceOrNull(operation: (acc: S, T) -> S): S? {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) return null\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Returns a sequence containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting sequence.\n * The [initial] value should also be immutable (or should not be mutated)\n * as it may be passed to [operation] function later because of sequence's lazy nature.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\npublic fun <T, R> Sequence<T>.runningFold(initial: R, operation: (acc: R, T) -> R): Sequence<R> {\n    return sequence {\n        yield(initial)\n        var accumulator = initial\n        for (element in this@runningFold) {\n            accumulator = operation(accumulator, element)\n            yield(accumulator)\n        }\n    }\n}\n\n/**\n * Returns a sequence containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original sequence and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting sequence.\n * The [initial] value should also be immutable (or should not be mutated)\n * as it may be passed to [operation] function later because of sequence's lazy nature.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\npublic fun <T, R> Sequence<T>.runningFoldIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): Sequence<R> {\n    return sequence {\n        yield(initial)\n        var index = 0\n        var accumulator = initial\n        for (element in this@runningFoldIndexed) {\n            accumulator = operation(checkIndexOverflow(index++), accumulator, element)\n            yield(accumulator)\n        }\n    }\n}\n\n/**\n * Returns a sequence containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this sequence.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting sequence.\n * \n * @param [operation] function that takes current accumulator value and the element, and calculates the next accumulator value.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun <S, T : S> Sequence<T>.runningReduce(operation: (acc: S, T) -> S): Sequence<S> {\n    return sequence {\n        val iterator = iterator()\n        if (iterator.hasNext()) {\n            var accumulator: S = iterator.next()\n            yield(accumulator)\n            while (iterator.hasNext()) {\n                accumulator = operation(accumulator, iterator.next())\n                yield(accumulator)\n            }\n        }\n    }\n}\n\n/**\n * Returns a sequence containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original sequence and current accumulator value that starts with the first element of this sequence.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting sequence.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\npublic fun <S, T : S> Sequence<T>.runningReduceIndexed(operation: (index: Int, acc: S, T) -> S): Sequence<S> {\n    return sequence {\n        val iterator = iterator()\n        if (iterator.hasNext()) {\n            var accumulator: S = iterator.next()\n            yield(accumulator)\n            var index = 1\n            while (iterator.hasNext()) {\n                accumulator = operation(checkIndexOverflow(index++), accumulator, iterator.next())\n                yield(accumulator)\n            }\n        }\n    }\n}\n\n/**\n * Returns a sequence containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting sequence.\n * The [initial] value should also be immutable (or should not be mutated)\n * as it may be passed to [operation] function later because of sequence's lazy nature.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun <T, R> Sequence<T>.scan(initial: R, operation: (acc: R, T) -> R): Sequence<R> {\n    return runningFold(initial, operation)\n}\n\n/**\n * Returns a sequence containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original sequence and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting sequence.\n * The [initial] value should also be immutable (or should not be mutated)\n * as it may be passed to [operation] function later because of sequence's lazy nature.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun <T, R> Sequence<T>.scanIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): Sequence<R> {\n    return runningFoldIndexed(initial, operation)\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the sequence.\n *\n * The operation is _terminal_.\n */\n@Deprecated(\"Use sumOf instead.\", ReplaceWith(\"this.sumOf(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic inline fun <T> Sequence<T>.sumBy(selector: (T) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the sequence.\n *\n * The operation is _terminal_.\n */\n@Deprecated(\"Use sumOf instead.\", ReplaceWith(\"this.sumOf(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic inline fun <T> Sequence<T>.sumByDouble(selector: (T) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the sequence.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfDouble\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.sumOf(selector: (T) -> Double): Double {\n    var sum: Double = 0.toDouble()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the sequence.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfInt\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.sumOf(selector: (T) -> Int): Int {\n    var sum: Int = 0.toInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the sequence.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfLong\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.sumOf(selector: (T) -> Long): Long {\n    var sum: Long = 0.toLong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the sequence.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.5\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfUInt\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.sumOf(selector: (T) -> UInt): UInt {\n    var sum: UInt = 0.toUInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the sequence.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.5\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfULong\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.sumOf(selector: (T) -> ULong): ULong {\n    var sum: ULong = 0.toULong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns an original collection containing all the non-`null` elements, throwing an [IllegalArgumentException] if there are any `null` elements.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic fun <T : Any> Sequence<T?>.requireNoNulls(): Sequence<T> {\n    return map { it ?: throw IllegalArgumentException(\"null element found in $this.\") }\n}\n\n/**\n * Splits this sequence into a sequence of lists each not exceeding the given [size].\n * \n * The last list in the resulting sequence may have fewer elements than the given [size].\n * \n * @param size the number of elements to take in each list, must be positive and can be greater than the number of elements in this sequence.\n *\n * The operation is _intermediate_ and _stateful_.\n * \n * @sample samples.collections.Collections.Transformations.chunked\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Sequence<T>.chunked(size: Int): Sequence<List<T>> {\n    return windowed(size, size, partialWindows = true)\n}\n\n/**\n * Splits this sequence into several lists each not exceeding the given [size]\n * and applies the given [transform] function to an each.\n * \n * @return sequence of results of the [transform] applied to an each list.\n * \n * Note that the list passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * The last list may have fewer elements than the given [size].\n * \n * @param size the number of elements to take in each list, must be positive and can be greater than the number of elements in this sequence.\n *\n * The operation is _intermediate_ and _stateful_.\n * \n * @sample samples.text.Strings.chunkedTransform\n */\n@SinceKotlin(\"1.2\")\npublic fun <T, R> Sequence<T>.chunked(size: Int, transform: (List<T>) -> R): Sequence<R> {\n    return windowed(size, size, partialWindows = true, transform = transform)\n}\n\n/**\n * Returns a sequence containing all elements of the original sequence without the first occurrence of the given [element].\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic operator fun <T> Sequence<T>.minus(element: T): Sequence<T> {\n    return object: Sequence<T> {\n        override fun iterator(): Iterator<T> {\n            var removed = false\n            return this@minus.filter { if (!removed && it == element) { removed = true; false } else true }.iterator()\n        }\n    }\n}\n\n/**\n * Returns a sequence containing all elements of original sequence except the elements contained in the given [elements] array.\n * \n * Note that the source sequence and the array being subtracted are iterated only when an `iterator` is requested from\n * the resulting sequence. Changing any of them between successive calls to `iterator` may affect the result.\n * \n * The [elements] array may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n *\n * The operation is _intermediate_ and _stateful_.\n */\npublic operator fun <T> Sequence<T>.minus(elements: Array<out T>): Sequence<T> {\n    if (elements.isEmpty()) return this\n    return object: Sequence<T> {\n        override fun iterator(): Iterator<T> {\n            val other = elements.toHashSet()\n            return this@minus.filterNot { it in other }.iterator()\n        }\n    }\n}\n\n/**\n * Returns a sequence containing all elements of original sequence except the elements contained in the given [elements] collection.\n * \n * Note that the source sequence and the collection being subtracted are iterated only when an `iterator` is requested from\n * the resulting sequence. Changing any of them between successive calls to `iterator` may affect the result.\n * \n * The [elements] collection may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n *\n * The operation is _intermediate_ and _stateful_.\n */\npublic operator fun <T> Sequence<T>.minus(elements: Iterable<T>): Sequence<T> {\n    return object: Sequence<T> {\n        override fun iterator(): Iterator<T> {\n            val other = elements.convertToSetForSetOperation()\n            if (other.isEmpty())\n                return this@minus.iterator()\n            else\n                return this@minus.filterNot { it in other }.iterator()\n        }\n    }\n}\n\n/**\n * Returns a sequence containing all elements of original sequence except the elements contained in the given [elements] sequence.\n * \n * Note that the source sequence and the sequence being subtracted are iterated only when an `iterator` is requested from\n * the resulting sequence. Changing any of them between successive calls to `iterator` may affect the result.\n * \n * The operation is _intermediate_ for this sequence and _terminal_ and _stateful_ for the [elements] sequence.\n * \n * The [elements] sequence may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n */\npublic operator fun <T> Sequence<T>.minus(elements: Sequence<T>): Sequence<T> {\n    return object: Sequence<T> {\n        override fun iterator(): Iterator<T> {\n            val other = elements.toHashSet()\n            if (other.isEmpty())\n                return this@minus.iterator()\n            else\n                return this@minus.filterNot { it in other }.iterator()\n        }\n    }\n}\n\n/**\n * Returns a sequence containing all elements of the original sequence without the first occurrence of the given [element].\n *\n * The operation is _intermediate_ and _stateless_.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.minusElement(element: T): Sequence<T> {\n    return minus(element)\n}\n\n/**\n * Splits the original sequence into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Sequences.Transformations.partition\n */\npublic inline fun <T> Sequence<T>.partition(predicate: (T) -> Boolean): Pair<List<T>, List<T>> {\n    val first = ArrayList<T>()\n    val second = ArrayList<T>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Returns a sequence containing all elements of the original sequence and then the given [element].\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic operator fun <T> Sequence<T>.plus(element: T): Sequence<T> {\n    return sequenceOf(this, sequenceOf(element)).flatten()\n}\n\n/**\n * Returns a sequence containing all elements of original sequence and then all elements of the given [elements] array.\n * \n * Note that the source sequence and the array being added are iterated only when an `iterator` is requested from\n * the resulting sequence. Changing any of them between successive calls to `iterator` may affect the result.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic operator fun <T> Sequence<T>.plus(elements: Array<out T>): Sequence<T> {\n    return this.plus(elements.asList())\n}\n\n/**\n * Returns a sequence containing all elements of original sequence and then all elements of the given [elements] collection.\n * \n * Note that the source sequence and the collection being added are iterated only when an `iterator` is requested from\n * the resulting sequence. Changing any of them between successive calls to `iterator` may affect the result.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic operator fun <T> Sequence<T>.plus(elements: Iterable<T>): Sequence<T> {\n    return sequenceOf(this, elements.asSequence()).flatten()\n}\n\n/**\n * Returns a sequence containing all elements of original sequence and then all elements of the given [elements] sequence.\n * \n * Note that the source sequence and the sequence being added are iterated only when an `iterator` is requested from\n * the resulting sequence. Changing any of them between successive calls to `iterator` may affect the result.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic operator fun <T> Sequence<T>.plus(elements: Sequence<T>): Sequence<T> {\n    return sequenceOf(this, elements).flatten()\n}\n\n/**\n * Returns a sequence containing all elements of the original sequence and then the given [element].\n *\n * The operation is _intermediate_ and _stateless_.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.plusElement(element: T): Sequence<T> {\n    return plus(element)\n}\n\n/**\n * Returns a sequence of snapshots of the window of the given [size]\n * sliding along this sequence with the given [step], where each\n * snapshot is a list.\n * \n * Several last lists may have fewer elements than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this sequence.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.takeWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Sequence<T>.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false): Sequence<List<T>> {\n    return windowedSequence(size, step, partialWindows, reuseBuffer = false)\n}\n\n/**\n * Returns a sequence of results of applying the given [transform] function to\n * an each list representing a view over the window of the given [size]\n * sliding along this sequence with the given [step].\n * \n * Note that the list passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * Several last lists may have fewer elements than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this sequence.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.averageWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <T, R> Sequence<T>.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false, transform: (List<T>) -> R): Sequence<R> {\n    return windowedSequence(size, step, partialWindows, reuseBuffer = true).map(transform)\n}\n\n/**\n * Returns a sequence of values built from the elements of `this` sequence and the [other] sequence with the same index.\n * The resulting sequence ends as soon as the shortest input sequence ends.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Sequences.Transformations.zip\n */\npublic infix fun <T, R> Sequence<T>.zip(other: Sequence<R>): Sequence<Pair<T, R>> {\n    return MergingSequence(this, other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a sequence of values built from the elements of `this` sequence and the [other] sequence with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The resulting sequence ends as soon as the shortest input sequence ends.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Sequences.Transformations.zipWithTransform\n */\npublic fun <T, R, V> Sequence<T>.zip(other: Sequence<R>, transform: (a: T, b: R) -> V): Sequence<V> {\n    return MergingSequence(this, other, transform)\n}\n\n/**\n * Returns a sequence of pairs of each two adjacent elements in this sequence.\n * \n * The returned sequence is empty if this sequence contains less than two elements.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNext\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Sequence<T>.zipWithNext(): Sequence<Pair<T, T>> {\n    return zipWithNext { a, b -> a to b }\n}\n\n/**\n * Returns a sequence containing the results of applying the given [transform] function\n * to an each pair of two adjacent elements in this sequence.\n * \n * The returned sequence is empty if this sequence contains less than two elements.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNextToFindDeltas\n */\n@SinceKotlin(\"1.2\")\npublic fun <T, R> Sequence<T>.zipWithNext(transform: (a: T, b: T) -> R): Sequence<R> {\n    return sequence result@ {\n        val iterator = iterator()\n        if (!iterator.hasNext()) return@result\n        var current = iterator.next()\n        while (iterator.hasNext()) {\n            val next = iterator.next()\n            yield(transform(current, next))\n            current = next\n        }\n    }\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <T, A : Appendable> Sequence<T>.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            buffer.appendElement(element, transform)\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun <T> Sequence<T>.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original sequence returning its elements when being iterated.\n */\npublic fun <T> Sequence<T>.asIterable(): Iterable<T> {\n    return Iterable { this.iterator() }\n}\n\n/**\n * Returns this sequence as a [Sequence].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.asSequence(): Sequence<T> {\n    return this\n}\n\n/**\n * Returns an average value of elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"averageOfByte\")\npublic fun Sequence<Byte>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"averageOfShort\")\npublic fun Sequence<Short>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"averageOfInt\")\npublic fun Sequence<Int>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"averageOfLong\")\npublic fun Sequence<Long>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"averageOfFloat\")\npublic fun Sequence<Float>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"averageOfDouble\")\npublic fun Sequence<Double>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns the sum of all elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"sumOfByte\")\npublic fun Sequence<Byte>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"sumOfShort\")\npublic fun Sequence<Short>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"sumOfInt\")\npublic fun Sequence<Int>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"sumOfLong\")\npublic fun Sequence<Long>.sum(): Long {\n    var sum: Long = 0L\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"sumOfFloat\")\npublic fun Sequence<Float>.sum(): Float {\n    var sum: Float = 0.0f\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"sumOfDouble\")\npublic fun Sequence<Double>.sum(): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"MapsKt\")\n@file:OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n\npackage kotlin.collections\n\nimport kotlin.contracts.*\n\nprivate object EmptyMap : Map<Any?, Nothing>, Serializable {\n    private const val serialVersionUID: Long = 8246714829545688274\n\n    override fun equals(other: Any?): Boolean = other is Map<*, *> && other.isEmpty()\n    override fun hashCode(): Int = 0\n    override fun toString(): String = \"{}\"\n\n    override val size: Int get() = 0\n    override fun isEmpty(): Boolean = true\n\n    override fun containsKey(key: Any?): Boolean = false\n    override fun containsValue(value: Nothing): Boolean = false\n    override fun get(key: Any?): Nothing? = null\n    override val entries: Set<Map.Entry<Any?, Nothing>> get() = EmptySet\n    override val keys: Set<Any?> get() = EmptySet\n    override val values: Collection<Nothing> get() = EmptyList\n\n    private fun readResolve(): Any = EmptyMap\n}\n\n/**\n * Returns an empty read-only map of specified type.\n *\n * The returned map is serializable (JVM).\n * @sample samples.collections.Maps.Instantiation.emptyReadOnlyMap\n */\npublic fun <K, V> emptyMap(): Map<K, V> = @Suppress(\"UNCHECKED_CAST\") (EmptyMap as Map<K, V>)\n\n/**\n * Returns a new read-only map with the specified contents, given as a list of pairs\n * where the first value is the key and the second is the value.\n *\n * If multiple pairs have the same key, the resulting map will contain the value from the last of those pairs.\n *\n * Entries of the map are iterated in the order they were specified.\n *\n * The returned map is serializable (JVM).\n *\n * @sample samples.collections.Maps.Instantiation.mapFromPairs\n */\npublic fun <K, V> mapOf(vararg pairs: Pair<K, V>): Map<K, V> =\n    if (pairs.size > 0) pairs.toMap(LinkedHashMap(mapCapacity(pairs.size))) else emptyMap()\n\n/**\n * Returns an empty read-only map.\n *\n * The returned map is serializable (JVM).\n * @sample samples.collections.Maps.Instantiation.emptyReadOnlyMap\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> mapOf(): Map<K, V> = emptyMap()\n\n/**\n * Returns an empty new [MutableMap].\n *\n * The returned map preserves the entry iteration order.\n * @sample samples.collections.Maps.Instantiation.emptyMutableMap\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> mutableMapOf(): MutableMap<K, V> = LinkedHashMap()\n\n/**\n * Returns a new [MutableMap] with the specified contents, given as a list of pairs\n * where the first component is the key and the second is the value.\n *\n * If multiple pairs have the same key, the resulting map will contain the value from the last of those pairs.\n *\n * Entries of the map are iterated in the order they were specified.\n *\n * @sample samples.collections.Maps.Instantiation.mutableMapFromPairs\n * @sample samples.collections.Maps.Instantiation.emptyMutableMap\n */\npublic fun <K, V> mutableMapOf(vararg pairs: Pair<K, V>): MutableMap<K, V> =\n    LinkedHashMap<K, V>(mapCapacity(pairs.size)).apply { putAll(pairs) }\n\n/**\n * Returns an empty new [HashMap].\n *\n * @sample samples.collections.Maps.Instantiation.emptyHashMap\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> hashMapOf(): HashMap<K, V> = HashMap<K, V>()\n\n/**\n * Returns a new [HashMap] with the specified contents, given as a list of pairs\n * where the first component is the key and the second is the value.\n *\n * @sample samples.collections.Maps.Instantiation.hashMapFromPairs\n */\npublic fun <K, V> hashMapOf(vararg pairs: Pair<K, V>): HashMap<K, V> = HashMap<K, V>(mapCapacity(pairs.size)).apply { putAll(pairs) }\n\n/**\n * Returns an empty new [LinkedHashMap].\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> linkedMapOf(): LinkedHashMap<K, V> = LinkedHashMap<K, V>()\n\n/**\n * Returns a new [LinkedHashMap] with the specified contents, given as a list of pairs\n * where the first component is the key and the second is the value.\n *\n * If multiple pairs have the same key, the resulting map will contain the value from the last of those pairs.\n *\n * Entries of the map are iterated in the order they were specified.\n *\n * @sample samples.collections.Maps.Instantiation.linkedMapFromPairs\n */\npublic fun <K, V> linkedMapOf(vararg pairs: Pair<K, V>): LinkedHashMap<K, V> = pairs.toMap(LinkedHashMap(mapCapacity(pairs.size)))\n\n/**\n * Builds a new read-only [Map] by populating a [MutableMap] using the given [builderAction]\n * and returning a read-only map with the same key-value pairs.\n *\n * The map passed as a receiver to the [builderAction] is valid only inside that function.\n * Using it outside of the function produces an unspecified behavior.\n *\n * Entries of the map are iterated in the order they were added by the [builderAction].\n *\n * @sample samples.collections.Builders.Maps.buildMapSample\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> buildMap(@BuilderInference builderAction: MutableMap<K, V>.() -> Unit): Map<K, V> {\n    contract { callsInPlace(builderAction, InvocationKind.EXACTLY_ONCE) }\n    return buildMapInternal(builderAction)\n}\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\ninternal expect inline fun <K, V> buildMapInternal(builderAction: MutableMap<K, V>.() -> Unit): Map<K, V>\n\n/**\n * Builds a new read-only [Map] by populating a [MutableMap] using the given [builderAction]\n * and returning a read-only map with the same key-value pairs.\n *\n * The map passed as a receiver to the [builderAction] is valid only inside that function.\n * Using it outside of the function produces an unspecified behavior.\n *\n * [capacity] is used to hint the expected number of pairs added in the [builderAction].\n *\n * Entries of the map are iterated in the order they were added by the [builderAction].\n *\n * @throws IllegalArgumentException if the given [capacity] is negative.\n *\n * @sample samples.collections.Builders.Maps.buildMapSample\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> buildMap(capacity: Int, @BuilderInference builderAction: MutableMap<K, V>.() -> Unit): Map<K, V> {\n    contract { callsInPlace(builderAction, InvocationKind.EXACTLY_ONCE) }\n    return buildMapInternal(capacity, builderAction)\n}\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\ninternal expect inline fun <K, V> buildMapInternal(capacity: Int, builderAction: MutableMap<K, V>.() -> Unit): Map<K, V>\n\n/**\n * Calculate the initial capacity of a map.\n */\n@PublishedApi\ninternal expect fun mapCapacity(expectedSize: Int): Int\n\n/**\n * Returns `true` if this map is not empty.\n * @sample samples.collections.Maps.Usage.mapIsNotEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>.isNotEmpty(): Boolean = !isEmpty()\n\n/**\n * Returns `true` if this nullable map is either null or empty.\n * @sample samples.collections.Maps.Usage.mapIsNullOrEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>?.isNullOrEmpty(): Boolean {\n    contract {\n        returns(false) implies (this@isNullOrEmpty != null)\n    }\n\n    return this == null || isEmpty()\n}\n\n/**\n * Returns the [Map] if its not `null`, or the empty [Map] otherwise.\n *\n * @sample samples.collections.Maps.Usage.mapOrEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<K, V>?.orEmpty(): Map<K, V> = this ?: emptyMap()\n\n/**\n * Returns this map if it's not empty\n * or the result of calling [defaultValue] function if the map is empty.\n *\n * @sample samples.collections.Maps.Usage.mapIfEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <M, R> M.ifEmpty(defaultValue: () -> R): R where M : Map<*, *>, M : R =\n    if (isEmpty()) defaultValue() else this\n\n/**\n * Checks if the map contains the given key.\n *\n * This method allows to use the `x in map` syntax for checking whether an object is contained in the map.\n *\n * @sample samples.collections.Maps.Usage.containsKey\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <@kotlin.internal.OnlyInputTypes K, V> Map<out K, V>.contains(key: K): Boolean = containsKey(key)\n\n/**\n * Returns the value corresponding to the given [key], or `null` if such a key is not present in the map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <@kotlin.internal.OnlyInputTypes K, V> Map<out K, V>.get(key: K): V? =\n    @Suppress(\"UNCHECKED_CAST\") (this as Map<K, V>).get(key)\n\n/**\n * Allows to use the index operator for storing values in a mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.set(key: K, value: V): Unit {\n    put(key, value)\n}\n\n/**\n * Returns `true` if the map contains the specified [key].\n *\n * Allows to overcome type-safety restriction of `containsKey` that requires to pass a key of type `K`.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes K> Map<out K, *>.containsKey(key: K): Boolean =\n    @Suppress(\"UNCHECKED_CAST\") (this as Map<K, *>).containsKey(key)\n\n/**\n * Returns `true` if the map maps one or more keys to the specified [value].\n *\n * Allows to overcome type-safety restriction of `containsValue` that requires to pass a value of type `V`.\n *\n * @sample samples.collections.Maps.Usage.containsValue\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\n@kotlin.internal.InlineOnly\npublic inline fun <K, @kotlin.internal.OnlyInputTypes V> Map<K, V>.containsValue(value: V): Boolean = this.containsValue(value)\n\n\n/**\n * Removes the specified key and its corresponding value from this map.\n *\n * @return the previous value associated with the key, or `null` if the key was not present in the map.\n\n * Allows to overcome type-safety restriction of `remove` that requires to pass a key of type `K`.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes K, V> MutableMap<out K, V>.remove(key: K): V? =\n    @Suppress(\"UNCHECKED_CAST\") (this as MutableMap<K, V>).remove(key)\n\n/**\n * Returns the key component of the map entry.\n *\n * This method allows to use destructuring declarations when working with maps, for example:\n * ```\n * for ((key, value) in map) {\n *     // do something with the key and the value\n * }\n * ```\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> Map.Entry<K, V>.component1(): K = key\n\n/**\n * Returns the value component of the map entry.\n *\n * This method allows to use destructuring declarations when working with maps, for example:\n * ```\n * for ((key, value) in map) {\n *     // do something with the key and the value\n * }\n * ```\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> Map.Entry<K, V>.component2(): V = value\n\n/**\n * Converts entry to [Pair] with key being first component and value being second.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map.Entry<K, V>.toPair(): Pair<K, V> = Pair(key, value)\n\n/**\n * Returns the value for the given key, or the result of the [defaultValue] function if there was no entry for the given key.\n *\n * @sample samples.collections.Maps.Usage.getOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<K, V>.getOrElse(key: K, defaultValue: () -> V): V = get(key) ?: defaultValue()\n\n\ninternal inline fun <K, V> Map<K, V>.getOrElseNullable(key: K, defaultValue: () -> V): V {\n    val value = get(key)\n    if (value == null && !containsKey(key)) {\n        return defaultValue()\n    } else {\n        @Suppress(\"UNCHECKED_CAST\")\n        return value as V\n    }\n}\n\n/**\n * Returns the value for the given [key] or throws an exception if there is no such key in the map.\n *\n * If the map was created by [withDefault], resorts to its `defaultValue` provider function\n * instead of throwing an exception.\n *\n * @throws NoSuchElementException when the map doesn't contain a value for the specified key and\n * no implicit default value was provided for that map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V> Map<K, V>.getValue(key: K): V = getOrImplicitDefault(key)\n\n/**\n * Returns the value for the given key. If the key is not found in the map, calls the [defaultValue] function,\n * puts its result into the map under the given key and returns it.\n *\n * Note that the operation is not guaranteed to be atomic if the map is being modified concurrently.\n *\n * @sample samples.collections.Maps.Usage.getOrPut\n */\npublic inline fun <K, V> MutableMap<K, V>.getOrPut(key: K, defaultValue: () -> V): V {\n    val value = get(key)\n    return if (value == null) {\n        val answer = defaultValue()\n        put(key, answer)\n        answer\n    } else {\n        value\n    }\n}\n\n/**\n * Returns an [Iterator] over the entries in the [Map].\n *\n * @sample samples.collections.Maps.Usage.forOverEntries\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> Map<out K, V>.iterator(): Iterator<Map.Entry<K, V>> = entries.iterator()\n\n/**\n * Returns a [MutableIterator] over the mutable entries in the [MutableMap].\n *\n */\n@kotlin.jvm.JvmName(\"mutableIterator\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.iterator(): MutableIterator<MutableMap.MutableEntry<K, V>> = entries.iterator()\n\n/**\n * Populates the given [destination] map with entries having the keys of this map and the values obtained\n * by applying the [transform] function to each entry in this [Map].\n */\npublic inline fun <K, V, R, M : MutableMap<in K, in R>> Map<out K, V>.mapValuesTo(destination: M, transform: (Map.Entry<K, V>) -> R): M {\n    return entries.associateByTo(destination, { it.key }, transform)\n}\n\n/**\n * Populates the given [destination] map with entries having the keys obtained\n * by applying the [transform] function to each entry in this [Map] and the values of this map.\n *\n * In case if any two entries are mapped to the equal keys, the value of the latter one will overwrite\n * the value associated with the former one.\n */\npublic inline fun <K, V, R, M : MutableMap<in R, in V>> Map<out K, V>.mapKeysTo(destination: M, transform: (Map.Entry<K, V>) -> R): M {\n    return entries.associateByTo(destination, transform, { it.value })\n}\n\n/**\n * Puts all the given [pairs] into this [MutableMap] with the first component in the pair being the key and the second the value.\n */\npublic fun <K, V> MutableMap<in K, in V>.putAll(pairs: Array<out Pair<K, V>>): Unit {\n    for ((key, value) in pairs) {\n        put(key, value)\n    }\n}\n\n/**\n * Puts all the elements of the given collection into this [MutableMap] with the first component in the pair being the key and the second the value.\n */\npublic fun <K, V> MutableMap<in K, in V>.putAll(pairs: Iterable<Pair<K, V>>): Unit {\n    for ((key, value) in pairs) {\n        put(key, value)\n    }\n}\n\n/**\n * Puts all the elements of the given sequence into this [MutableMap] with the first component in the pair being the key and the second the value.\n */\npublic fun <K, V> MutableMap<in K, in V>.putAll(pairs: Sequence<Pair<K, V>>): Unit {\n    for ((key, value) in pairs) {\n        put(key, value)\n    }\n}\n\n/**\n * Returns a new map with entries having the keys of this map and the values obtained by applying the [transform]\n * function to each entry in this [Map].\n *\n * The returned map preserves the entry iteration order of the original map.\n *\n * @sample samples.collections.Maps.Transformations.mapValues\n */\npublic inline fun <K, V, R> Map<out K, V>.mapValues(transform: (Map.Entry<K, V>) -> R): Map<K, R> {\n    return mapValuesTo(LinkedHashMap<K, R>(mapCapacity(size)), transform) // .optimizeReadOnlyMap()\n}\n\n/**\n * Returns a new Map with entries having the keys obtained by applying the [transform] function to each entry in this\n * [Map] and the values of this map.\n *\n * In case if any two entries are mapped to the equal keys, the value of the latter one will overwrite\n * the value associated with the former one.\n *\n * The returned map preserves the entry iteration order of the original map.\n *\n * @sample samples.collections.Maps.Transformations.mapKeys\n */\npublic inline fun <K, V, R> Map<out K, V>.mapKeys(transform: (Map.Entry<K, V>) -> R): Map<R, V> {\n    return mapKeysTo(LinkedHashMap<R, V>(mapCapacity(size)), transform) // .optimizeReadOnlyMap()\n}\n\n/**\n * Returns a map containing all key-value pairs with keys matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n * @sample samples.collections.Maps.Filtering.filterKeys\n */\npublic inline fun <K, V> Map<out K, V>.filterKeys(predicate: (K) -> Boolean): Map<K, V> {\n    val result = LinkedHashMap<K, V>()\n    for (entry in this) {\n        if (predicate(entry.key)) {\n            result.put(entry.key, entry.value)\n        }\n    }\n    return result\n}\n\n/**\n * Returns a map containing all key-value pairs with values matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n *  @sample samples.collections.Maps.Filtering.filterValues\n */\npublic inline fun <K, V> Map<out K, V>.filterValues(predicate: (V) -> Boolean): Map<K, V> {\n    val result = LinkedHashMap<K, V>()\n    for (entry in this) {\n        if (predicate(entry.value)) {\n            result.put(entry.key, entry.value)\n        }\n    }\n    return result\n}\n\n\n/**\n * Appends all entries matching the given [predicate] into the mutable map given as [destination] parameter.\n *\n * @return the destination map.\n * @sample samples.collections.Maps.Filtering.filterTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> Map<out K, V>.filterTo(destination: M, predicate: (Map.Entry<K, V>) -> Boolean): M {\n    for (element in this) {\n        if (predicate(element)) {\n            destination.put(element.key, element.value)\n        }\n    }\n    return destination\n}\n\n/**\n * Returns a new map containing all key-value pairs matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n * @sample samples.collections.Maps.Filtering.filter\n */\npublic inline fun <K, V> Map<out K, V>.filter(predicate: (Map.Entry<K, V>) -> Boolean): Map<K, V> {\n    return filterTo(LinkedHashMap<K, V>(), predicate)\n}\n\n/**\n * Appends all entries not matching the given [predicate] into the given [destination].\n *\n * @return the destination map.\n * @sample samples.collections.Maps.Filtering.filterNotTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> Map<out K, V>.filterNotTo(destination: M, predicate: (Map.Entry<K, V>) -> Boolean): M {\n    for (element in this) {\n        if (!predicate(element)) {\n            destination.put(element.key, element.value)\n        }\n    }\n    return destination\n}\n\n/**\n * Returns a new map containing all key-value pairs not matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n * @sample samples.collections.Maps.Filtering.filterNot\n */\npublic inline fun <K, V> Map<out K, V>.filterNot(predicate: (Map.Entry<K, V>) -> Boolean): Map<K, V> {\n    return filterNotTo(LinkedHashMap<K, V>(), predicate)\n}\n\n/**\n * Returns a new map containing all key-value pairs from the given collection of pairs.\n *\n * The returned map preserves the entry iteration order of the original collection.\n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic fun <K, V> Iterable<Pair<K, V>>.toMap(): Map<K, V> {\n    if (this is Collection) {\n        return when (size) {\n            0 -> emptyMap()\n            1 -> mapOf(if (this is List) this[0] else iterator().next())\n            else -> toMap(LinkedHashMap<K, V>(mapCapacity(size)))\n        }\n    }\n    return toMap(LinkedHashMap<K, V>()).optimizeReadOnlyMap()\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs from the given collection of pairs.\n */\npublic fun <K, V, M : MutableMap<in K, in V>> Iterable<Pair<K, V>>.toMap(destination: M): M =\n    destination.apply { putAll(this@toMap) }\n\n/**\n * Returns a new map containing all key-value pairs from the given array of pairs.\n *\n * The returned map preserves the entry iteration order of the original array.\n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic fun <K, V> Array<out Pair<K, V>>.toMap(): Map<K, V> = when (size) {\n    0 -> emptyMap()\n    1 -> mapOf(this[0])\n    else -> toMap(LinkedHashMap<K, V>(mapCapacity(size)))\n}\n\n/**\n *  Populates and returns the [destination] mutable map with key-value pairs from the given array of pairs.\n */\npublic fun <K, V, M : MutableMap<in K, in V>> Array<out Pair<K, V>>.toMap(destination: M): M =\n    destination.apply { putAll(this@toMap) }\n\n/**\n * Returns a new map containing all key-value pairs from the given sequence of pairs.\n *\n * The returned map preserves the entry iteration order of the original sequence.\n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic fun <K, V> Sequence<Pair<K, V>>.toMap(): Map<K, V> = toMap(LinkedHashMap<K, V>()).optimizeReadOnlyMap()\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs from the given sequence of pairs.\n */\npublic fun <K, V, M : MutableMap<in K, in V>> Sequence<Pair<K, V>>.toMap(destination: M): M =\n    destination.apply { putAll(this@toMap) }\n\n/**\n * Returns a new read-only map containing all key-value pairs from the original map.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V> Map<out K, V>.toMap(): Map<K, V> = when (size) {\n    0 -> emptyMap()\n    1 -> toSingletonMap()\n    else -> toMutableMap()\n}\n\n/**\n * Returns a new mutable map containing all key-value pairs from the original map.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V> Map<out K, V>.toMutableMap(): MutableMap<K, V> = LinkedHashMap(this)\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs from the given map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V, M : MutableMap<in K, in V>> Map<out K, V>.toMap(destination: M): M =\n    destination.apply { putAll(this@toMap) }\n\n/**\n * Creates a new read-only map by replacing or adding an entry to this map from a given key-value [pair].\n *\n * The returned map preserves the entry iteration order of the original map.\n * The [pair] is iterated in the end if it has a unique key.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pair: Pair<K, V>): Map<K, V> =\n    if (this.isEmpty()) mapOf(pair) else LinkedHashMap(this).apply { put(pair.first, pair.second) }\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from a given collection of key-value [pairs].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those [pairs] with unique keys are iterated in the end in the order of [pairs] collection.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pairs: Iterable<Pair<K, V>>): Map<K, V> =\n    if (this.isEmpty()) pairs.toMap() else LinkedHashMap(this).apply { putAll(pairs) }\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from a given array of key-value [pairs].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those [pairs] with unique keys are iterated in the end in the order of [pairs] array.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pairs: Array<out Pair<K, V>>): Map<K, V> =\n    if (this.isEmpty()) pairs.toMap() else LinkedHashMap(this).apply { putAll(pairs) }\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from a given sequence of key-value [pairs].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those [pairs] with unique keys are iterated in the end in the order of [pairs] sequence.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pairs: Sequence<Pair<K, V>>): Map<K, V> =\n    LinkedHashMap(this).apply { putAll(pairs) }.optimizeReadOnlyMap()\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from another [map].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those entries of another [map] that are missing in this map are iterated in the end in the order of that [map].\n */\npublic operator fun <K, V> Map<out K, V>.plus(map: Map<out K, V>): Map<K, V> =\n    LinkedHashMap(this).apply { putAll(map) }\n\n\n/**\n * Appends or replaces the given [pair] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pair: Pair<K, V>) {\n    put(pair.first, pair.second)\n}\n\n/**\n * Appends or replaces all pairs from the given collection of [pairs] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pairs: Iterable<Pair<K, V>>) {\n    putAll(pairs)\n}\n\n/**\n * Appends or replaces all pairs from the given array of [pairs] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pairs: Array<out Pair<K, V>>) {\n    putAll(pairs)\n}\n\n/**\n * Appends or replaces all pairs from the given sequence of [pairs] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pairs: Sequence<Pair<K, V>>) {\n    putAll(pairs)\n}\n\n/**\n * Appends or replaces all entries from the given [map] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(map: Map<K, V>) {\n    putAll(map)\n}\n\n/**\n * Returns a map containing all entries of the original map except the entry with the given [key].\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(key: K): Map<K, V> =\n    this.toMutableMap().apply { minusAssign(key) }.optimizeReadOnlyMap()\n\n/**\n * Returns a map containing all entries of the original map except those entries\n * the keys of which are contained in the given [keys] collection.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(keys: Iterable<K>): Map<K, V> =\n    this.toMutableMap().apply { minusAssign(keys) }.optimizeReadOnlyMap()\n\n/**\n * Returns a map containing all entries of the original map except those entries\n * the keys of which are contained in the given [keys] array.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(keys: Array<out K>): Map<K, V> =\n    this.toMutableMap().apply { minusAssign(keys) }.optimizeReadOnlyMap()\n\n/**\n * Returns a map containing all entries of the original map except those entries\n * the keys of which are contained in the given [keys] sequence.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(keys: Sequence<K>): Map<K, V> =\n    this.toMutableMap().apply { minusAssign(keys) }.optimizeReadOnlyMap()\n\n/**\n * Removes the entry with the given [key] from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(key: K) {\n    remove(key)\n}\n\n/**\n * Removes all entries the keys of which are contained in the given [keys] collection from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(keys: Iterable<K>) {\n    this.keys.removeAll(keys)\n}\n\n/**\n * Removes all entries the keys of which are contained in the given [keys] array from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(keys: Array<out K>) {\n    this.keys.removeAll(keys)\n}\n\n/**\n * Removes all entries from the keys of which are contained in the given [keys] sequence from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(keys: Sequence<K>) {\n    this.keys.removeAll(keys)\n}\n\n\n// do not expose for now @PublishedApi\ninternal fun <K, V> Map<K, V>.optimizeReadOnlyMap() = when (size) {\n    0 -> emptyMap()\n    1 -> toSingletonMapOrSelf()\n    else -> this\n}\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"CollectionsKt\")\n\npackage kotlin.collections\n\nimport kotlin.random.Random\n\n/**\n * Removes a single instance of the specified element from this\n * collection, if it is present.\n *\n * Allows to overcome type-safety restriction of `remove` that requires to pass an element of type `E`.\n *\n * @return `true` if the element has been successfully removed; `false` if it was not present in the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes T> MutableCollection<out T>.remove(element: T): Boolean =\n    @Suppress(\"UNCHECKED_CAST\") (this as MutableCollection<T>).remove(element)\n\n/**\n * Removes all of this collection's elements that are also contained in the specified collection.\n\n * Allows to overcome type-safety restriction of `removeAll` that requires to pass a collection of type `Collection<E>`.\n *\n * @return `true` if any of the specified elements was removed from the collection, `false` if the collection was not modified.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes T> MutableCollection<out T>.removeAll(elements: Collection<T>): Boolean =\n    @Suppress(\"UNCHECKED_CAST\") (this as MutableCollection<T>).removeAll(elements)\n\n/**\n * Retains only the elements in this collection that are contained in the specified collection.\n *\n * Allows to overcome type-safety restriction of `retainAll` that requires to pass a collection of type `Collection<E>`.\n *\n * @return `true` if any element was removed from the collection, `false` if the collection was not modified.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes T> MutableCollection<out T>.retainAll(elements: Collection<T>): Boolean =\n    @Suppress(\"UNCHECKED_CAST\") (this as MutableCollection<T>).retainAll(elements)\n\n/**\n * Adds the specified [element] to this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.plusAssign(element: T) {\n    this.add(element)\n}\n\n/**\n * Adds all elements of the given [elements] collection to this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.plusAssign(elements: Iterable<T>) {\n    this.addAll(elements)\n}\n\n/**\n * Adds all elements of the given [elements] array to this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.plusAssign(elements: Array<T>) {\n    this.addAll(elements)\n}\n\n/**\n * Adds all elements of the given [elements] sequence to this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.plusAssign(elements: Sequence<T>) {\n    this.addAll(elements)\n}\n\n/**\n * Removes a single instance of the specified [element] from this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.minusAssign(element: T) {\n    this.remove(element)\n}\n\n/**\n * Removes all elements contained in the given [elements] collection from this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.minusAssign(elements: Iterable<T>) {\n    this.removeAll(elements)\n}\n\n/**\n * Removes all elements contained in the given [elements] array from this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.minusAssign(elements: Array<T>) {\n    this.removeAll(elements)\n}\n\n/**\n * Removes all elements contained in the given [elements] sequence from this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.minusAssign(elements: Sequence<T>) {\n    this.removeAll(elements)\n}\n\n/**\n * Adds all elements of the given [elements] collection to this [MutableCollection].\n */\npublic fun <T> MutableCollection<in T>.addAll(elements: Iterable<T>): Boolean {\n    when (elements) {\n        is Collection -> return addAll(elements)\n        else -> {\n            var result: Boolean = false\n            for (item in elements)\n                if (add(item)) result = true\n            return result\n        }\n    }\n}\n\n/**\n * Adds all elements of the given [elements] sequence to this [MutableCollection].\n */\npublic fun <T> MutableCollection<in T>.addAll(elements: Sequence<T>): Boolean {\n    var result: Boolean = false\n    for (item in elements) {\n        if (add(item)) result = true\n    }\n    return result\n}\n\n/**\n * Adds all elements of the given [elements] array to this [MutableCollection].\n */\npublic fun <T> MutableCollection<in T>.addAll(elements: Array<out T>): Boolean {\n    return addAll(elements.asList())\n}\n\n/**\n * Removes all elements from this [MutableCollection] that are also contained in the given [elements] collection.\n */\npublic fun <T> MutableCollection<in T>.removeAll(elements: Iterable<T>): Boolean {\n    return removeAll(elements.convertToSetForSetOperationWith(this))\n}\n\n/**\n * Removes all elements from this [MutableCollection] that are also contained in the given [elements] sequence.\n */\npublic fun <T> MutableCollection<in T>.removeAll(elements: Sequence<T>): Boolean {\n    val set = elements.toHashSet()\n    return set.isNotEmpty() && removeAll(set)\n}\n\n/**\n * Removes all elements from this [MutableCollection] that are also contained in the given [elements] array.\n */\npublic fun <T> MutableCollection<in T>.removeAll(elements: Array<out T>): Boolean {\n    return elements.isNotEmpty() && removeAll(elements.toHashSet())\n}\n\n/**\n * Retains only elements of this [MutableCollection] that are contained in the given [elements] collection.\n */\npublic fun <T> MutableCollection<in T>.retainAll(elements: Iterable<T>): Boolean {\n    return retainAll(elements.convertToSetForSetOperationWith(this))\n}\n\n/**\n * Retains only elements of this [MutableCollection] that are contained in the given [elements] array.\n */\npublic fun <T> MutableCollection<in T>.retainAll(elements: Array<out T>): Boolean {\n    if (elements.isNotEmpty())\n        return retainAll(elements.toHashSet())\n    else\n        return retainNothing()\n}\n\n/**\n * Retains only elements of this [MutableCollection] that are contained in the given [elements] sequence.\n */\npublic fun <T> MutableCollection<in T>.retainAll(elements: Sequence<T>): Boolean {\n    val set = elements.toHashSet()\n    if (set.isNotEmpty())\n        return retainAll(set)\n    else\n        return retainNothing()\n}\n\nprivate fun MutableCollection<*>.retainNothing(): Boolean {\n    val result = isNotEmpty()\n    clear()\n    return result\n}\n\n\n/**\n * Removes all elements from this [MutableIterable] that match the given [predicate].\n *\n * @return `true` if any element was removed from this collection, or `false` when no elements were removed and collection was not modified.\n */\npublic fun <T> MutableIterable<T>.removeAll(predicate: (T) -> Boolean): Boolean = filterInPlace(predicate, true)\n\n/**\n * Retains only elements of this [MutableIterable] that match the given [predicate].\n *\n * @return `true` if any element was removed from this collection, or `false` when all elements were retained and collection was not modified.\n */\npublic fun <T> MutableIterable<T>.retainAll(predicate: (T) -> Boolean): Boolean = filterInPlace(predicate, false)\n\nprivate fun <T> MutableIterable<T>.filterInPlace(predicate: (T) -> Boolean, predicateResultToRemove: Boolean): Boolean {\n    var result = false\n    with(iterator()) {\n        while (hasNext())\n            if (predicate(next()) == predicateResultToRemove) {\n                remove()\n                result = true\n            }\n    }\n    return result\n}\n\n\n/**\n * Removes the element at the specified [index] from this list.\n * In Kotlin one should use the [MutableList.removeAt] function instead.\n */\n@Deprecated(\"Use removeAt(index) instead.\", ReplaceWith(\"removeAt(index)\"), level = DeprecationLevel.ERROR)\n@kotlin.internal.InlineOnly\npublic inline fun <T> MutableList<T>.remove(index: Int): T = removeAt(index)\n\n/**\n * Removes the first element from this mutable list and returns that removed element, or throws [NoSuchElementException] if this list is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun <T> MutableList<T>.removeFirst(): T = if (isEmpty()) throw NoSuchElementException(\"List is empty.\") else removeAt(0)\n\n/**\n * Removes the first element from this mutable list and returns that removed element, or returns `null` if this list is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun <T> MutableList<T>.removeFirstOrNull(): T? = if (isEmpty()) null else removeAt(0)\n\n/**\n * Removes the last element from this mutable list and returns that removed element, or throws [NoSuchElementException] if this list is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun <T> MutableList<T>.removeLast(): T = if (isEmpty()) throw NoSuchElementException(\"List is empty.\") else removeAt(lastIndex)\n\n/**\n * Removes the last element from this mutable list and returns that removed element, or returns `null` if this list is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun <T> MutableList<T>.removeLastOrNull(): T? = if (isEmpty()) null else removeAt(lastIndex)\n\n/**\n * Removes all elements from this [MutableList] that match the given [predicate].\n *\n * @return `true` if any element was removed from this collection, or `false` when no elements were removed and collection was not modified.\n */\npublic fun <T> MutableList<T>.removeAll(predicate: (T) -> Boolean): Boolean = filterInPlace(predicate, true)\n\n/**\n * Retains only elements of this [MutableList] that match the given [predicate].\n *\n * @return `true` if any element was removed from this collection, or `false` when all elements were retained and collection was not modified.\n */\npublic fun <T> MutableList<T>.retainAll(predicate: (T) -> Boolean): Boolean = filterInPlace(predicate, false)\n\nprivate fun <T> MutableList<T>.filterInPlace(predicate: (T) -> Boolean, predicateResultToRemove: Boolean): Boolean {\n    if (this !is RandomAccess)\n        return (this as MutableIterable<T>).filterInPlace(predicate, predicateResultToRemove)\n\n    var writeIndex: Int = 0\n    for (readIndex in 0..lastIndex) {\n        val element = this[readIndex]\n        if (predicate(element) == predicateResultToRemove)\n            continue\n\n        if (writeIndex != readIndex)\n            this[writeIndex] = element\n\n        writeIndex++\n    }\n    if (writeIndex < size) {\n        for (removeIndex in lastIndex downTo writeIndex)\n            removeAt(removeIndex)\n\n        return true\n    } else {\n        return false\n    }\n}\n",null,null,null,null,null,"/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"CollectionsKt\")\n\npackage kotlin.collections\n\n\n/**\n * Returns the given iterator itself. This allows to use an instance of iterator in a `for` loop.\n * @sample samples.collections.Iterators.iterator\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Iterator<T>.iterator(): Iterator<T> = this\n\n/**\n * Returns an [Iterator] that wraps each element produced by the original iterator\n * into an [IndexedValue] containing the index of that element and the element itself.\n *\n * @sample samples.collections.Iterators.withIndexIterator\n */\npublic fun <T> Iterator<T>.withIndex(): Iterator<IndexedValue<T>> = IndexingIterator(this)\n\n/**\n * Performs the given [operation] on each element of this [Iterator].\n * @sample samples.collections.Iterators.forEachIterator\n */\npublic inline fun <T> Iterator<T>.forEach(operation: (T) -> Unit): Unit {\n    for (element in this) operation(element)\n}\n\n/**\n * Iterator transforming original `iterator` into iterator of [IndexedValue], counting index from zero.\n */\ninternal class IndexingIterator<out T>(private val iterator: Iterator<T>) : Iterator<IndexedValue<T>> {\n    private var index = 0\n    final override fun hasNext(): Boolean = iterator.hasNext()\n    final override fun next(): IndexedValue<T> = IndexedValue(checkIndexOverflow(index++), iterator.next())\n}\n",null,null,null,null,null,"/*\n * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.comparisons\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.js.*\n\n/**\n * Returns the greater of two values.\n * \n * If values are equal, returns the first one.\n */\n@SinceKotlin(\"1.1\")\npublic actual fun <T : Comparable<T>> maxOf(a: T, b: T): T {\n    return if (a >= b) a else b\n}\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic actual inline fun maxOf(a: Byte, b: Byte): Byte {\n    return maxOf(a.toInt(), b.toInt()).unsafeCast<Byte>()\n}\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic actual inline fun maxOf(a: Short, b: Short): Short {\n    return maxOf(a.toInt(), b.toInt()).unsafeCast<Short>()\n}\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic actual inline fun maxOf(a: Int, b: Int): Int {\n    return JsMath.max(a, b)\n}\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.1\")\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun maxOf(a: Long, b: Long): Long {\n    return if (a >= b) a else b\n}\n\n/**\n * Returns the greater of two values.\n * \n * If either value is `NaN`, returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic actual inline fun maxOf(a: Float, b: Float): Float {\n    return JsMath.max(a, b)\n}\n\n/**\n * Returns the greater of two values.\n * \n * If either value is `NaN`, returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic actual inline fun maxOf(a: Double, b: Double): Double {\n    return JsMath.max(a, b)\n}\n\n/**\n * Returns the greater of three values.\n * \n * If there are multiple equal maximal values, returns the first of them.\n */\n@SinceKotlin(\"1.1\")\npublic actual fun <T : Comparable<T>> maxOf(a: T, b: T, c: T): T {\n    return maxOf(a, maxOf(b, c))\n}\n\n/**\n * Returns the greater of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic actual inline fun maxOf(a: Byte, b: Byte, c: Byte): Byte {\n    return JsMath.max(a.toInt(), b.toInt(), c.toInt()).unsafeCast<Byte>()\n}\n\n/**\n * Returns the greater of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic actual inline fun maxOf(a: Short, b: Short, c: Short): Short {\n    return JsMath.max(a.toInt(), b.toInt(), c.toInt()).unsafeCast<Short>()\n}\n\n/**\n * Returns the greater of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic actual inline fun maxOf(a: Int, b: Int, c: Int): Int {\n    return JsMath.max(a, b, c)\n}\n\n/**\n * Returns the greater of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic actual inline fun maxOf(a: Long, b: Long, c: Long): Long {\n    return maxOf(a, maxOf(b, c))\n}\n\n/**\n * Returns the greater of three values.\n * \n * If any value is `NaN`, returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic actual inline fun maxOf(a: Float, b: Float, c: Float): Float {\n    return JsMath.max(a, b, c)\n}\n\n/**\n * Returns the greater of three values.\n * \n * If any value is `NaN`, returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic actual inline fun maxOf(a: Double, b: Double, c: Double): Double {\n    return JsMath.max(a, b, c)\n}\n\n/**\n * Returns the greater of the given values.\n * \n * If there are multiple equal maximal values, returns the first of them.\n */\n@SinceKotlin(\"1.4\")\npublic actual fun <T : Comparable<T>> maxOf(a: T, vararg other: T): T {\n    var max = a\n    for (e in other) max = maxOf(max, e)\n    return max\n}\n\n/**\n * Returns the greater of the given values.\n */\n@SinceKotlin(\"1.4\")\npublic actual fun maxOf(a: Byte, vararg other: Byte): Byte {\n    var max = a\n    for (e in other) max = maxOf(max, e)\n    return max\n}\n\n/**\n * Returns the greater of the given values.\n */\n@SinceKotlin(\"1.4\")\npublic actual fun maxOf(a: Short, vararg other: Short): Short {\n    var max = a\n    for (e in other) max = maxOf(max, e)\n    return max\n}\n\n/**\n * Returns the greater of the given values.\n */\n@SinceKotlin(\"1.4\")\npublic actual fun maxOf(a: Int, vararg other: Int): Int {\n    var max = a\n    for (e in other) max = maxOf(max, e)\n    return max\n}\n\n/**\n * Returns the greater of the given values.\n */\n@SinceKotlin(\"1.4\")\npublic actual fun maxOf(a: Long, vararg other: Long): Long {\n    var max = a\n    for (e in other) max = maxOf(max, e)\n    return max\n}\n\n/**\n * Returns the greater of the given values.\n * \n * If any value is `NaN`, returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic actual fun maxOf(a: Float, vararg other: Float): Float {\n    var max = a\n    for (e in other) max = maxOf(max, e)\n    return max\n}\n\n/**\n * Returns the greater of the given values.\n * \n * If any value is `NaN`, returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic actual fun maxOf(a: Double, vararg other: Double): Double {\n    var max = a\n    for (e in other) max = maxOf(max, e)\n    return max\n}\n\n/**\n * Returns the smaller of two values.\n * \n * If values are equal, returns the first one.\n */\n@SinceKotlin(\"1.1\")\npublic actual fun <T : Comparable<T>> minOf(a: T, b: T): T {\n    return if (a <= b) a else b\n}\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic actual inline fun minOf(a: Byte, b: Byte): Byte {\n    return minOf(a.toInt(), b.toInt()).unsafeCast<Byte>()\n}\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic actual inline fun minOf(a: Short, b: Short): Short {\n    return minOf(a.toInt(), b.toInt()).unsafeCast<Short>()\n}\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic actual inline fun minOf(a: Int, b: Int): Int {\n    return JsMath.min(a, b)\n}\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.1\")\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun minOf(a: Long, b: Long): Long {\n    return if (a <= b) a else b\n}\n\n/**\n * Returns the smaller of two values.\n * \n * If either value is `NaN`, returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic actual inline fun minOf(a: Float, b: Float): Float {\n    return JsMath.min(a, b)\n}\n\n/**\n * Returns the smaller of two values.\n * \n * If either value is `NaN`, returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic actual inline fun minOf(a: Double, b: Double): Double {\n    return JsMath.min(a, b)\n}\n\n/**\n * Returns the smaller of three values.\n * \n * If there are multiple equal minimal values, returns the first of them.\n */\n@SinceKotlin(\"1.1\")\npublic actual fun <T : Comparable<T>> minOf(a: T, b: T, c: T): T {\n    return minOf(a, minOf(b, c))\n}\n\n/**\n * Returns the smaller of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic actual inline fun minOf(a: Byte, b: Byte, c: Byte): Byte {\n    return JsMath.min(a.toInt(), b.toInt(), c.toInt()).unsafeCast<Byte>()\n}\n\n/**\n * Returns the smaller of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic actual inline fun minOf(a: Short, b: Short, c: Short): Short {\n    return JsMath.min(a.toInt(), b.toInt(), c.toInt()).unsafeCast<Short>()\n}\n\n/**\n * Returns the smaller of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic actual inline fun minOf(a: Int, b: Int, c: Int): Int {\n    return JsMath.min(a, b, c)\n}\n\n/**\n * Returns the smaller of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic actual inline fun minOf(a: Long, b: Long, c: Long): Long {\n    return minOf(a, minOf(b, c))\n}\n\n/**\n * Returns the smaller of three values.\n * \n * If any value is `NaN`, returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic actual inline fun minOf(a: Float, b: Float, c: Float): Float {\n    return JsMath.min(a, b, c)\n}\n\n/**\n * Returns the smaller of three values.\n * \n * If any value is `NaN`, returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic actual inline fun minOf(a: Double, b: Double, c: Double): Double {\n    return JsMath.min(a, b, c)\n}\n\n/**\n * Returns the smaller of the given values.\n * \n * If there are multiple equal minimal values, returns the first of them.\n */\n@SinceKotlin(\"1.4\")\npublic actual fun <T : Comparable<T>> minOf(a: T, vararg other: T): T {\n    var min = a\n    for (e in other) min = minOf(min, e)\n    return min\n}\n\n/**\n * Returns the smaller of the given values.\n */\n@SinceKotlin(\"1.4\")\npublic actual fun minOf(a: Byte, vararg other: Byte): Byte {\n    var min = a\n    for (e in other) min = minOf(min, e)\n    return min\n}\n\n/**\n * Returns the smaller of the given values.\n */\n@SinceKotlin(\"1.4\")\npublic actual fun minOf(a: Short, vararg other: Short): Short {\n    var min = a\n    for (e in other) min = minOf(min, e)\n    return min\n}\n\n/**\n * Returns the smaller of the given values.\n */\n@SinceKotlin(\"1.4\")\npublic actual fun minOf(a: Int, vararg other: Int): Int {\n    var min = a\n    for (e in other) min = minOf(min, e)\n    return min\n}\n\n/**\n * Returns the smaller of the given values.\n */\n@SinceKotlin(\"1.4\")\npublic actual fun minOf(a: Long, vararg other: Long): Long {\n    var min = a\n    for (e in other) min = minOf(min, e)\n    return min\n}\n\n/**\n * Returns the smaller of the given values.\n * \n * If any value is `NaN`, returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic actual fun minOf(a: Float, vararg other: Float): Float {\n    var min = a\n    for (e in other) min = minOf(min, e)\n    return min\n}\n\n/**\n * Returns the smaller of the given values.\n * \n * If any value is `NaN`, returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic actual fun minOf(a: Double, vararg other: Double): Double {\n    var min = a\n    for (e in other) min = minOf(min, e)\n    return min\n}\n\n",null,null,null,null,"/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.coroutines.intrinsics\n\nimport kotlin.coroutines.*\nimport kotlin.internal.InlineOnly\n\n/**\n * Starts an unintercepted coroutine without a receiver and with result type [T] and executes it until its first suspension.\n * Returns the result of the coroutine or throws its exception if it does not suspend or [COROUTINE_SUSPENDED] if it suspends.\n * In the latter case, the [completion] continuation is invoked when the coroutine completes with a result or an exception.\n *\n * The coroutine is started directly in the invoker's thread without going through the [ContinuationInterceptor] that might\n * be present in the completion's [CoroutineContext]. It is the invoker's responsibility to ensure that a proper invocation\n * context is established.\n *\n * This function is designed to be used from inside of [suspendCoroutineUninterceptedOrReturn] to resume the execution of the suspended\n * coroutine using a reference to the suspending function.\n */\n@SinceKotlin(\"1.3\")\n@InlineOnly\npublic actual inline fun <T> (suspend () -> T).startCoroutineUninterceptedOrReturn(\n    completion: Continuation<T>\n): Any? = this.asDynamic()(completion, false)\n\n/**\n * Starts an unintercepted coroutine with receiver type [R] and result type [T] and executes it until its first suspension.\n * Returns the result of the coroutine or throws its exception if it does not suspend or [COROUTINE_SUSPENDED] if it suspends.\n * In the latter case, the [completion] continuation is invoked when the coroutine completes with a result or an exception.\n *\n * The coroutine is started directly in the invoker's thread without going through the [ContinuationInterceptor] that might\n * be present in the completion's [CoroutineContext]. It is the invoker's responsibility to ensure that a proper invocation\n * context is established.\n *\n * This function is designed to be used from inside of [suspendCoroutineUninterceptedOrReturn] to resume the execution of the suspended\n * coroutine using a reference to the suspending function.\n */\n@SinceKotlin(\"1.3\")\n@InlineOnly\npublic actual inline fun <R, T> (suspend R.() -> T).startCoroutineUninterceptedOrReturn(\n    receiver: R,\n    completion: Continuation<T>\n): Any? = this.asDynamic()(receiver, completion, false)\n\n@InlineOnly\ninternal actual inline fun <R, P, T> (suspend R.(P) -> T).startCoroutineUninterceptedOrReturn(\n    receiver: R,\n    param: P,\n    completion: Continuation<T>\n): Any? = this.asDynamic()(receiver, param, completion, false)\n\n/**\n * Creates unintercepted coroutine without receiver and with result type [T].\n * This function creates a new, fresh instance of suspendable computation every time it is invoked.\n *\n * To start executing the created coroutine, invoke `resume(Unit)` on the returned [Continuation] instance.\n * The [completion] continuation is invoked when coroutine completes with result or exception.\n *\n * This function returns unintercepted continuation.\n * Invocation of `resume(Unit)` starts coroutine immediately in the invoker's call stack without going through the\n * [ContinuationInterceptor] that might be present in the completion's [CoroutineContext].\n * It is the invoker's responsibility to ensure that a proper invocation context is established.\n * Note that [completion] of this function may get invoked in an arbitrary context.\n *\n * [Continuation.intercepted] can be used to acquire the intercepted continuation.\n * Invocation of `resume(Unit)` on intercepted continuation guarantees that execution of\n * both the coroutine and [completion] happens in the invocation context established by\n * [ContinuationInterceptor].\n *\n * Repeated invocation of any resume function on the resulting continuation corrupts the\n * state machine of the coroutine and may result in arbitrary behaviour or exception.\n */\n@SinceKotlin(\"1.3\")\npublic actual fun <T> (suspend () -> T).createCoroutineUnintercepted(\n    completion: Continuation<T>\n): Continuation<Unit> =\n    // Kotlin/JS suspend lambdas have an extra parameter `suspended`\n    if (this.asDynamic().length == 2) {\n        // When `suspended` is true the continuation is created, but not executed\n        this.asDynamic()(completion, true)\n    } else {\n        createCoroutineFromSuspendFunction(completion) {\n            this.asDynamic()(completion)\n        }\n    }\n\n/**\n * Creates unintercepted coroutine with receiver type [R] and result type [T].\n * This function creates a new, fresh instance of suspendable computation every time it is invoked.\n *\n * To start executing the created coroutine, invoke `resume(Unit)` on the returned [Continuation] instance.\n * The [completion] continuation is invoked when coroutine completes with result or exception.\n *\n * This function returns unintercepted continuation.\n * Invocation of `resume(Unit)` starts coroutine immediately in the invoker's call stack without going through the\n * [ContinuationInterceptor] that might be present in the completion's [CoroutineContext].\n * It is the invoker's responsibility to ensure that a proper invocation context is established.\n * Note that [completion] of this function may get invoked in an arbitrary context.\n *\n * [Continuation.intercepted] can be used to acquire the intercepted continuation.\n * Invocation of `resume(Unit)` on intercepted continuation guarantees that execution of\n * both the coroutine and [completion] happens in the invocation context established by\n * [ContinuationInterceptor].\n *\n * Repeated invocation of any resume function on the resulting continuation corrupts the\n * state machine of the coroutine and may result in arbitrary behaviour or exception.\n */\n@SinceKotlin(\"1.3\")\npublic actual fun <R, T> (suspend R.() -> T).createCoroutineUnintercepted(\n    receiver: R,\n    completion: Continuation<T>\n): Continuation<Unit> =\n    // Kotlin/JS suspend lambdas have an extra parameter `suspended`\n    if (this.asDynamic().length == 3) {\n        // When `suspended` is true the continuation is created, but not executed\n        this.asDynamic()(receiver, completion, true)\n    } else {\n        createCoroutineFromSuspendFunction(completion) {\n            this.asDynamic()(receiver, completion)\n        }\n    }\n\n/**\n * Intercepts this continuation with [ContinuationInterceptor].\n *\n * This function shall be used on the immediate result of [createCoroutineUnintercepted] or [suspendCoroutineUninterceptedOrReturn],\n * in which case it checks for [ContinuationInterceptor] in the continuation's [context][Continuation.context],\n * invokes [ContinuationInterceptor.interceptContinuation], caches and returns the result.\n *\n * If this function is invoked on other [Continuation] instances it returns `this` continuation unchanged.\n */\n@SinceKotlin(\"1.3\")\npublic actual fun <T> Continuation<T>.intercepted(): Continuation<T> =\n    (this as? CoroutineImpl)?.intercepted() ?: this\n\n\nprivate inline fun <T> createCoroutineFromSuspendFunction(\n    completion: Continuation<T>,\n    crossinline block: () -> Any?\n): Continuation<Unit> {\n    @Suppress(\"UNCHECKED_CAST\")\n    return object : CoroutineImpl(completion as Continuation<Any?>) {\n        override fun doResume(): Any? {\n            exception?.let { throw it }\n            return block()\n        }\n    }\n}\n",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"CollectionsKt\")\n@file:OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n\npackage kotlin.collections\n\nimport kotlin.contracts.*\nimport kotlin.random.Random\n\ninternal object EmptyIterator : ListIterator<Nothing> {\n    override fun hasNext(): Boolean = false\n    override fun hasPrevious(): Boolean = false\n    override fun nextIndex(): Int = 0\n    override fun previousIndex(): Int = -1\n    override fun next(): Nothing = throw NoSuchElementException()\n    override fun previous(): Nothing = throw NoSuchElementException()\n}\n\ninternal object EmptyList : List<Nothing>, Serializable, RandomAccess {\n    private const val serialVersionUID: Long = -7390468764508069838L\n\n    override fun equals(other: Any?): Boolean = other is List<*> && other.isEmpty()\n    override fun hashCode(): Int = 1\n    override fun toString(): String = \"[]\"\n\n    override val size: Int get() = 0\n    override fun isEmpty(): Boolean = true\n    override fun contains(element: Nothing): Boolean = false\n    override fun containsAll(elements: Collection<Nothing>): Boolean = elements.isEmpty()\n\n    override fun get(index: Int): Nothing = throw IndexOutOfBoundsException(\"Empty list doesn't contain element at index $index.\")\n    override fun indexOf(element: Nothing): Int = -1\n    override fun lastIndexOf(element: Nothing): Int = -1\n\n    override fun iterator(): Iterator<Nothing> = EmptyIterator\n    override fun listIterator(): ListIterator<Nothing> = EmptyIterator\n    override fun listIterator(index: Int): ListIterator<Nothing> {\n        if (index != 0) throw IndexOutOfBoundsException(\"Index: $index\")\n        return EmptyIterator\n    }\n\n    override fun subList(fromIndex: Int, toIndex: Int): List<Nothing> {\n        if (fromIndex == 0 && toIndex == 0) return this\n        throw IndexOutOfBoundsException(\"fromIndex: $fromIndex, toIndex: $toIndex\")\n    }\n\n    private fun readResolve(): Any = EmptyList\n}\n\ninternal fun <T> Array<out T>.asCollection(): Collection<T> = ArrayAsCollection(this, isVarargs = false)\n\nprivate class ArrayAsCollection<T>(val values: Array<out T>, val isVarargs: Boolean) : Collection<T> {\n    override val size: Int get() = values.size\n    override fun isEmpty(): Boolean = values.isEmpty()\n    override fun contains(element: T): Boolean = values.contains(element)\n    override fun containsAll(elements: Collection<T>): Boolean = elements.all { contains(it) }\n    override fun iterator(): Iterator<T> = values.iterator()\n    // override hidden toArray implementation to prevent copying of values array\n    public fun toArray(): Array<out Any?> = values.copyToArrayOfAny(isVarargs)\n}\n\n/**\n * Returns an empty read-only list.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.emptyReadOnlyList\n */\npublic fun <T> emptyList(): List<T> = EmptyList\n\n/**\n * Returns a new read-only list of given elements.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.readOnlyList\n */\npublic fun <T> listOf(vararg elements: T): List<T> = if (elements.size > 0) elements.asList() else emptyList()\n\n/**\n * Returns an empty read-only list.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.emptyReadOnlyList\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> listOf(): List<T> = emptyList()\n\n/**\n * Returns an empty new [MutableList].\n * @sample samples.collections.Collections.Lists.emptyMutableList\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> mutableListOf(): MutableList<T> = ArrayList()\n\n/**\n * Returns an empty new [ArrayList].\n * @sample samples.collections.Collections.Lists.emptyArrayList\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> arrayListOf(): ArrayList<T> = ArrayList()\n\n/**\n * Returns a new [MutableList] with the given elements.\n * @sample samples.collections.Collections.Lists.mutableList\n */\npublic fun <T> mutableListOf(vararg elements: T): MutableList<T> =\n    if (elements.size == 0) ArrayList() else ArrayList(ArrayAsCollection(elements, isVarargs = true))\n\n/**\n * Returns a new [ArrayList] with the given elements.\n * @sample samples.collections.Collections.Lists.arrayList\n */\npublic fun <T> arrayListOf(vararg elements: T): ArrayList<T> =\n    if (elements.size == 0) ArrayList() else ArrayList(ArrayAsCollection(elements, isVarargs = true))\n\n/**\n * Returns a new read-only list either of single given element, if it is not null, or empty list if the element is null. The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.listOfNotNull\n */\npublic fun <T : Any> listOfNotNull(element: T?): List<T> = if (element != null) listOf(element) else emptyList()\n\n/**\n * Returns a new read-only list only of those given elements, that are not null.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.listOfNotNull\n */\npublic fun <T : Any> listOfNotNull(vararg elements: T?): List<T> = elements.filterNotNull()\n\n/**\n * Creates a new read-only list with the specified [size], where each element is calculated by calling the specified\n * [init] function.\n *\n * The function [init] is called for each list element sequentially starting from the first one.\n * It should return the value for a list element given its index.\n *\n * @sample samples.collections.Collections.Lists.readOnlyListFromInitializer\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> List(size: Int, init: (index: Int) -> T): List<T> = MutableList(size, init)\n\n/**\n * Creates a new mutable list with the specified [size], where each element is calculated by calling the specified\n * [init] function.\n *\n * The function [init] is called for each list element sequentially starting from the first one.\n * It should return the value for a list element given its index.\n *\n * @sample samples.collections.Collections.Lists.mutableListFromInitializer\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> MutableList(size: Int, init: (index: Int) -> T): MutableList<T> {\n    val list = ArrayList<T>(size)\n    repeat(size) { index -> list.add(init(index)) }\n    return list\n}\n\n/**\n * Builds a new read-only [List] by populating a [MutableList] using the given [builderAction]\n * and returning a read-only list with the same elements.\n *\n * The list passed as a receiver to the [builderAction] is valid only inside that function.\n * Using it outside of the function produces an unspecified behavior.\n *\n * @sample samples.collections.Builders.Lists.buildListSample\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <E> buildList(@BuilderInference builderAction: MutableList<E>.() -> Unit): List<E> {\n    contract { callsInPlace(builderAction, InvocationKind.EXACTLY_ONCE) }\n    return buildListInternal(builderAction)\n}\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\ninternal expect inline fun <E> buildListInternal(builderAction: MutableList<E>.() -> Unit): List<E>\n\n/**\n * Builds a new read-only [List] by populating a [MutableList] using the given [builderAction]\n * and returning a read-only list with the same elements.\n *\n * The list passed as a receiver to the [builderAction] is valid only inside that function.\n * Using it outside of the function produces an unspecified behavior.\n *\n * [capacity] is used to hint the expected number of elements added in the [builderAction].\n *\n * @throws IllegalArgumentException if the given [capacity] is negative.\n *\n * @sample samples.collections.Builders.Lists.buildListSampleWithCapacity\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <E> buildList(capacity: Int, @BuilderInference builderAction: MutableList<E>.() -> Unit): List<E> {\n    contract { callsInPlace(builderAction, InvocationKind.EXACTLY_ONCE) }\n    return buildListInternal(capacity, builderAction)\n}\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\ninternal expect inline fun <E> buildListInternal(capacity: Int, builderAction: MutableList<E>.() -> Unit): List<E>\n\n/**\n * Returns an [IntRange] of the valid indices for this collection.\n * @sample samples.collections.Collections.Collections.indicesOfCollection\n */\npublic val Collection<*>.indices: IntRange\n    get() = 0..size - 1\n\n/**\n * Returns the index of the last item in the list or -1 if the list is empty.\n *\n * @sample samples.collections.Collections.Lists.lastIndexOfList\n */\npublic val <T> List<T>.lastIndex: Int\n    get() = this.size - 1\n\n/**\n * Returns `true` if the collection is not empty.\n * @sample samples.collections.Collections.Collections.collectionIsNotEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.isNotEmpty(): Boolean = !isEmpty()\n\n/**\n * Returns `true` if this nullable collection is either null or empty.\n * @sample samples.collections.Collections.Collections.collectionIsNullOrEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>?.isNullOrEmpty(): Boolean {\n    contract {\n        returns(false) implies (this@isNullOrEmpty != null)\n    }\n\n    return this == null || this.isEmpty()\n}\n\n/**\n * Returns this Collection if it's not `null` and the empty list otherwise.\n * @sample samples.collections.Collections.Collections.collectionOrEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>?.orEmpty(): Collection<T> = this ?: emptyList()\n\n/**\n * Returns this List if it's not `null` and the empty list otherwise.\n * @sample samples.collections.Collections.Lists.listOrEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>?.orEmpty(): List<T> = this ?: emptyList()\n\n/**\n * Returns this collection if it's not empty\n * or the result of calling [defaultValue] function if the collection is empty.\n *\n * @sample samples.collections.Collections.Collections.collectionIfEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <C, R> C.ifEmpty(defaultValue: () -> R): R where C : Collection<*>, C : R =\n    if (isEmpty()) defaultValue() else this\n\n\n/**\n * Checks if all elements in the specified collection are contained in this collection.\n *\n * Allows to overcome type-safety restriction of `containsAll` that requires to pass a collection of type `Collection<E>`.\n * @sample samples.collections.Collections.Collections.collectionContainsAll\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes T> Collection<T>.containsAll(elements: Collection<T>): Boolean = this.containsAll(elements)\n\n\n/**\n * Returns a new list with the elements of this list randomly shuffled\n * using the specified [random] instance as the source of randomness.\n */\n@SinceKotlin(\"1.3\")\npublic fun <T> Iterable<T>.shuffled(random: Random): List<T> = toMutableList().apply { shuffle(random) }\n\n\ninternal fun <T> List<T>.optimizeReadOnlyList() = when (size) {\n    0 -> emptyList()\n    1 -> listOf(this[0])\n    else -> this\n}\n\n/**\n * Searches this list or its range for the provided [element] using the binary search algorithm.\n * The list is expected to be sorted into ascending order according to the Comparable natural ordering of its elements,\n * otherwise the result is undefined.\n *\n * If the list contains multiple elements equal to the specified [element], there is no guarantee which one will be found.\n *\n * `null` value is considered to be less than any non-null value.\n *\n * @return the index of the element, if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted.\n * @sample samples.collections.Collections.Lists.binarySearchOnComparable\n * @sample samples.collections.Collections.Lists.binarySearchWithBoundaries\n */\npublic fun <T : Comparable<T>> List<T?>.binarySearch(element: T?, fromIndex: Int = 0, toIndex: Int = size): Int {\n    rangeCheck(size, fromIndex, toIndex)\n\n    var low = fromIndex\n    var high = toIndex - 1\n\n    while (low <= high) {\n        val mid = (low + high).ushr(1) // safe from overflows\n        val midVal = get(mid)\n        val cmp = compareValues(midVal, element)\n\n        if (cmp < 0)\n            low = mid + 1\n        else if (cmp > 0)\n            high = mid - 1\n        else\n            return mid // key found\n    }\n    return -(low + 1)  // key not found\n}\n\n/**\n * Searches this list or its range for the provided [element] using the binary search algorithm.\n * The list is expected to be sorted into ascending order according to the specified [comparator],\n * otherwise the result is undefined.\n *\n * If the list contains multiple elements equal to the specified [element], there is no guarantee which one will be found.\n *\n * `null` value is considered to be less than any non-null value.\n *\n * @return the index of the element, if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted according to the specified [comparator].\n * @sample samples.collections.Collections.Lists.binarySearchWithComparator\n */\npublic fun <T> List<T>.binarySearch(element: T, comparator: Comparator<in T>, fromIndex: Int = 0, toIndex: Int = size): Int {\n    rangeCheck(size, fromIndex, toIndex)\n\n    var low = fromIndex\n    var high = toIndex - 1\n\n    while (low <= high) {\n        val mid = (low + high).ushr(1) // safe from overflows\n        val midVal = get(mid)\n        val cmp = comparator.compare(midVal, element)\n\n        if (cmp < 0)\n            low = mid + 1\n        else if (cmp > 0)\n            high = mid - 1\n        else\n            return mid // key found\n    }\n    return -(low + 1)  // key not found\n}\n\n/**\n * Searches this list or its range for an element having the key returned by the specified [selector] function\n * equal to the provided [key] value using the binary search algorithm.\n * The list is expected to be sorted into ascending order according to the Comparable natural ordering of keys of its elements.\n * otherwise the result is undefined.\n *\n * If the list contains multiple elements with the specified [key], there is no guarantee which one will be found.\n *\n * `null` value is considered to be less than any non-null value.\n *\n * @return the index of the element with the specified [key], if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted.\n * @sample samples.collections.Collections.Lists.binarySearchByKey\n */\npublic inline fun <T, K : Comparable<K>> List<T>.binarySearchBy(\n    key: K?,\n    fromIndex: Int = 0,\n    toIndex: Int = size,\n    crossinline selector: (T) -> K?\n): Int =\n    binarySearch(fromIndex, toIndex) { compareValues(selector(it), key) }\n\n// do not introduce this overload --- too rare\n//public fun <T, K> List<T>.binarySearchBy(key: K, comparator: Comparator<K>, fromIndex: Int = 0, toIndex: Int = size(), selector: (T) -> K): Int =\n//        binarySearch(fromIndex, toIndex) { comparator.compare(selector(it), key) }\n\n\n/**\n * Searches this list or its range for an element for which the given [comparison] function returns zero using the binary search algorithm.\n *\n * The list is expected to be sorted so that the signs of the [comparison] function's return values ascend on the list elements,\n * i.e. negative values come before zero and zeroes come before positive values.\n * Otherwise, the result is undefined.\n *\n * If the list contains multiple elements for which [comparison] returns zero, there is no guarantee which one will be found.\n *\n * @param comparison function that returns zero when called on the list element being searched.\n * On the elements coming before the target element, the function must return negative values;\n * on the elements coming after the target element, the function must return positive values.\n *\n * @return the index of the found element, if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted.\n * @sample samples.collections.Collections.Lists.binarySearchWithComparisonFunction\n */\npublic fun <T> List<T>.binarySearch(fromIndex: Int = 0, toIndex: Int = size, comparison: (T) -> Int): Int {\n    rangeCheck(size, fromIndex, toIndex)\n\n    var low = fromIndex\n    var high = toIndex - 1\n\n    while (low <= high) {\n        val mid = (low + high).ushr(1) // safe from overflows\n        val midVal = get(mid)\n        val cmp = comparison(midVal)\n\n        if (cmp < 0)\n            low = mid + 1\n        else if (cmp > 0)\n            high = mid - 1\n        else\n            return mid // key found\n    }\n    return -(low + 1)  // key not found\n}\n\n/**\n * Checks that `from` and `to` are in\n * the range of [0..size] and throws an appropriate exception, if they aren't.\n */\nprivate fun rangeCheck(size: Int, fromIndex: Int, toIndex: Int) {\n    when {\n        fromIndex > toIndex -> throw IllegalArgumentException(\"fromIndex ($fromIndex) is greater than toIndex ($toIndex).\")\n        fromIndex < 0 -> throw IndexOutOfBoundsException(\"fromIndex ($fromIndex) is less than zero.\")\n        toIndex > size -> throw IndexOutOfBoundsException(\"toIndex ($toIndex) is greater than size ($size).\")\n    }\n}\n\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal expect fun checkIndexOverflow(index: Int): Int\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal expect fun checkCountOverflow(count: Int): Int\n\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal fun throwIndexOverflow() { throw ArithmeticException(\"Index overflow has happened.\") }\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal fun throwCountOverflow() { throw ArithmeticException(\"Count overflow has happened.\") }\n\n",null,null,null,null,"/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.js\n\n/**\n * Function corresponding to JavaScript's `typeof` operator\n */\n@kotlin.internal.InlineOnly\n@Suppress(\"UNUSED_PARAMETER\")\npublic inline fun jsTypeOf(a: Any?): String = js(\"typeof a\")\n",null,null,null,null,null,null,null,null,null,null,null,null,null,"/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:Suppress(\"UNUSED_PARAMETER\", \"NOTHING_TO_INLINE\")\n\npackage kotlin\n\n/**\n * Returns an empty array of the specified type [T].\n */\npublic inline fun <T> emptyArray(): Array<T> = js(\"[]\")\n\n@library\npublic fun <T> arrayOf(vararg elements: T): Array<T> = definedExternally\n\n@library\npublic fun doubleArrayOf(vararg elements: Double): DoubleArray = definedExternally\n\n@library\npublic fun floatArrayOf(vararg elements: Float): FloatArray = definedExternally\n\n@library\npublic fun longArrayOf(vararg elements: Long): LongArray = definedExternally\n\n@library\npublic fun intArrayOf(vararg elements: Int): IntArray = definedExternally\n\n@library\npublic fun charArrayOf(vararg elements: Char): CharArray = definedExternally\n\n@library\npublic fun shortArrayOf(vararg elements: Short): ShortArray = definedExternally\n\n@library\npublic fun byteArrayOf(vararg elements: Byte): ByteArray = definedExternally\n\n@library\npublic fun booleanArrayOf(vararg elements: Boolean): BooleanArray = definedExternally\n\n/**\n * Creates a new instance of the [Lazy] that uses the specified initialization function [initializer].\n */\npublic actual fun <T> lazy(initializer: () -> T): Lazy<T> = UnsafeLazyImpl(initializer)\n\n/**\n * Creates a new instance of the [Lazy] that uses the specified initialization function [initializer].\n *\n * The [mode] parameter is ignored. */\npublic actual fun <T> lazy(mode: LazyThreadSafetyMode, initializer: () -> T): Lazy<T> = UnsafeLazyImpl(initializer)\n\n/**\n * Creates a new instance of the [Lazy] that uses the specified initialization function [initializer].\n *\n * The [lock] parameter is ignored.\n */\npublic actual fun <T> lazy(lock: Any?, initializer: () -> T): Lazy<T> = UnsafeLazyImpl(initializer)\n\n\ninternal fun fillFrom(src: dynamic, dst: dynamic): dynamic {\n    val srcLen: Int = src.length\n    val dstLen: Int = dst.length\n    var index: Int = 0\n    while (index < srcLen && index < dstLen) dst[index] = src[index++]\n    return dst\n}\n\n\ninternal fun arrayCopyResize(source: dynamic, newSize: Int, defaultValue: Any?): dynamic {\n    val result = source.slice(0, newSize)\n    copyArrayType(source, result)\n    var index: Int = source.length\n    if (newSize > index) {\n        result.length = newSize\n        while (index < newSize) result[index++] = defaultValue\n    }\n    return result\n}\n\ninternal fun <T> arrayPlusCollection(array: dynamic, collection: Collection<T>): dynamic {\n    val result = array.slice()\n    result.length += collection.size\n    copyArrayType(array, result)\n    var index: Int = array.length\n    for (element in collection) result[index++] = element\n    return result\n}\n\ninternal fun <T> fillFromCollection(dst: dynamic, startIndex: Int, collection: Collection<T>): dynamic {\n    var index = startIndex\n    for (element in collection) dst[index++] = element\n    return dst\n}\n\ninternal inline fun copyArrayType(from: dynamic, to: dynamic) {\n    if (from.`$type$` !== undefined) {\n        to.`$type$` = from.`$type$`\n    }\n}\n\ninternal inline fun jsIsType(obj: dynamic, jsClass: dynamic) = js(\"Kotlin\").isType(obj, jsClass)",null,null,null,null,null,null,null],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;oBAcA,qC;gBCDA,K;;uBC2iWA,gD;eClhWA,oB;;;;;;;mCCkGA,gD;;;;;;;sBC1CQ,mC;;;;;;;;;;;iCCyBiB,qB;;WAiCwC,e;;WAAQ,gB;oBCpDhD,qB;iBA+CI,4B;uBACF,iC;6BAMM,+B;;;sCHjIjC,mD;;;;;;2BIuXA,qC;;;;;;;;;eCymBA,I;;iBC/+BA,e;yBV+CA,+C;;kBWu0BA,mC;;;;;;;;YCtRmC,mB;;;;6BZziBnC,sD;;;;;;6BawC2B,6B;oBA2KG,+B;6BAEA,uC;6BAGE,6B;6BAEA,6B;;;;;;oBChRF,+B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ECyBe,iE;IAIzC,sBAAW,MAAX,C;IAUI,IAAI,aAAJ,C;MAAmB,0BAAc,0BAAc,qBAAd,CAAd,C;IAGvB,yBAIsD,2BAAgB,IAAhB,C;G;;;SAJtD,Y;MAAA,6B;K;;;;SASuD,Y;MAAQ,mB;K;;;;SAEhC,Y;MAAQ,OAAM,yD;K;;kDAE7C,iB;EAI0C,C;mDAE1C,0B;EAWoE,C;6DAEpE,Y;IAAsD,OAAE,yBAAF,mB;G;6DAEtD,iB;IAKoB,Q;IAHhB,IAAI,4CAAJ,C;MACI,wBAAY,KAAM,MAAlB,EAAyB,KAAM,QAA/B,C;;MAEA,uBAAY,sEAAZ,C;;EACR,C;mDAEA,kB;IAII,YAAY,gCAA0B,QAAP,MAAO,CAA1B,C;IACZ,IAAI,UAAU,2BAAd,C;MAA2C,M;IAC3C,yBAAY,KAAZ,C;EACJ,C;oDAEA,iB;IAAoD,6BAAgB,KAAhB,C;G;oEAEpD,qB;IACI,yBAAyB,YAAzB,EAAkC,SAAlC,C;EACJ,C;2CAEA,Y;IACgC,Q;IAAA,yBAAR,YAAQ,C;IAAR,iB;MAAyB,OAAa,0C;KAA1D,oBAAoB,I;IACpB,OAAO,MAAI,aAAJ,eAA4B,0C;EACvC,C;8CAEA,kC;IAUI,qBAAM,KAAN,EAAa,QAAb,EAAuB,IAAvB,C;EACJ,C;;;;;;ECtHJ,iC;G;;;;;;EAgBA,qC;G;;;;;;EAWA,uB;G;;;;;;EAsBA,iC;G;;;;;;EAWA,iC;G;;;;;;ECiP0C,2D;IAAA,wB;MAClC,kBAAkB,gCAAkC,YAAN,KAAM,CAAlC,EAA8D,CAA9D,C;MAMlB,WAAY,qB;MACZ,cAAM,WAAN,C;MAPA,OAQA,WAAY,Y;IAChB,C;G;ECtTJ,yD;IAAA,wC;IAAA,yB;IAAA,kC;G;;;;;;;;0CAAA,Y;;;;;YAeI,IAAI,oBhBusPG,YAAQ,CgBvsPf,C;cAAA,OAAyB,W;;cAAqC,gB;8BAAA,CAApB,aAAS,oBAAT,CAAoB,a;kBAAA,qC;uBAAA,mB;cAAA,Q;;;;;;YAA9D,OAA8D,a;;;;;;;;;;;;;;;;G;EAflE,0D;mBAAA,mD;QAAA,S;aAAA,Q;;aAAA,uB;G;EAiBA,2D;IAAA,wC;IAAA,yB;IAAA,kC;G;;;;;;;;4CAAA,Y;;;;;YAeI,IAAI,8BAAJ,C;cAAA,OAAe,W;;cAA0C,gB;8BAAA,CAAzB,alB1BkC,iCkB0BlC,CAAyB,a;kBAAA,qC;uBAAA,mB;cAAA,Q;;;;;;YAAzD,OAAyD,a;;;;;;;;;;;;;;;;G;EAf7D,4D;mBAAA,qD;QAAA,S;aAAA,Q;;aAAA,uB;G;EAiBA,mD;IAAA,wC;IAAA,yB;IAAA,kC;IAAA,wB;IAAA,wB;G;;;;;;;;yCAAA,Y;;;;;YhBoraI,mB;YAAA,gB;;;;;YAAA,wBgB1qaiD,ehB0qajD,Q;cAAA,gB;;;YAAgB,cgB1qaiC,ehB0qajD,iB;YgB1qamE,gB;4BhB0qatC,OgB1qasC,W;gBAAA,qC;qBAAA,mB;YAAA,Q;;YhB0qanE,gB;;;YAAA,iB;YAAA,gB;;;YgB1qaiD,gC;;;;;;;;;;;;;;G;EAVrD,oD;mBAAA,6C;QAAA,S;aAAA,Q;;aAAA,uB;G;EAYA,0D;IAAA,wC;IAAA,yB;IAAA,kC;IAAA,wB;IAAA,kC;G;;;;;;;;2CAAA,Y;;;;;YCiwDoB,iD;YAAhB,gB;;;;;YAAA,KAAgB,yBAAhB,C;cAAA,gB;;;YAAgB,oC;YDvvD8C,gB;4BCuvDjC,ODvvDiC,W;gBAAA,qC;qBAAA,mB;YAAA,Q;;YCuvD9D,gB;;;YDvvDiD,gC;;;;;;;;;;;;;;G;EAVrD,2D;mBAAA,oD;QAAA,S;aAAA,Q;;aAAA,uB;G;EAYyB,6B;IAAC,4B;IACtB,2BAAgC,SAAO,gBAAU,OAAjB,C;G;EAE2B,8C;IAAA,uB;MAG3C,WAAM,yBAAU,O;MjB3DuB,YAAa,QAAS,IAAT,C;MAIvD,Q;MAAA,OAAA,KAAM,OAAN,GAAa,CAAb,I;MAAb,aAAU,CAAV,iB;QiBuDsC,mC;QAC9B,eAAe,4BjBvDH,CiBuDG,C;QACf,QAAS,Q;QACU,gBAAnB,gD;QEMR,SFLY,UAAkB,oCEK9B,SFL8B,C;QjB1D1B,MAAM,CAAN,ImBgEG,S;;MFVH,YjBpDG,K;MiB2DH,eAAe,oDAAwB,KAAxB,C;MhB+oaH,U;MAAhB,4BgB7oaI,KhB6oaJ,kB;QAAgB,cgB7oaZ,KhB6oaJ,Q;QAA6B,OgB7oaT,oB;;MAGhB,IAAI,IAAK,YAAT,C;QAEI,QAAS,a;;QAET,IAAK,8BAA+B,QAA/B,C;;MAEb,W;IAAA,C;G;6BArBA,wB;IAA+B,OD+OO,mCC/OqB,2BD+OrB,CAAtC,c;G;ECxN2C,yD;IAA3C,oB;IAAsF,wB;IAA1C,oB;G;0DACxC,Y;IACU,gBAAN,Y;IhBgoaQ,Q;IAAhB,wBAAgB,SAAhB,gB;MAAgB,cAAA,SAAhB,M;MAA6B,OgBhoaF,OAAO,U;;EAC9B,C;sDAEA,iB;IAAyC,iB;EAAa,C;wDACtD,Y;IAAkC,oCAA0B,YAA1B,M;G;;;;;;EAGN,qD;IAAhC,oB;IAA+F,kB;IAA9D,kC;IAC7B,6C;IAEA,mBAAwB,OAAiC,IAAjC,C;G;;;SAFxB,Y;;;MAAA,4B;K;SAAA,kB;MAAA,8B;K;;;;SAII,Y;MAAQ,OAAA,gBAAU,uB;K;SAClB,iB;MAAa,0CAAkB,K;IAAM,C;;2CAEzC,iB;IAOY,Q;IANR,IAAI,aAAJ,C;MACI,YAAY,mBAAa,gCAAuB,KAAvB,C;MACzB,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mBvKR,C;;MnBwKF,SmBxKoB,wCnBwKV,SmBxKU,C;;IAAhC,OnBsKA,M;G;EmBpKJ,uC;IAKmC,sB;MAAA,SAAe,I;IAAgC,mCAAwB,MAAxB,C;G;EAElF,sC;IAIwG,gBAAjC,4BAA2B,IAA3B,C;IJSnE,SIT4G,sB;IAAzC,OJU5D,S;G;EIJ6B,yC;IAEpC,sBAAW,IAAX,C;IACO,0BAAc,MAAd,C;G;;;SACuB,Y;MAAQ,W;K;;mDACtC,Y;IAAiC,Q;IAAA,2G;G;EACjC,kD;IAAA,wC;IAAA,yB;IAAA,kB;G;;;;;;;;yCAAA,Y;;;;;YAAkC,Q;YAAA,gB;4BAAA,sC;gBAAA,qC;qBAAA,mB;YAAA,Q;;;;YAAA,qF;;;;;;;;;;;;;;G;4CAAlC,qC;mBAAA,2C;QAAA,S;aAAA,Q;;aAAA,uB;G;;;SACuC,Y;MAAQ,W;K;;oEAC/C,yB;IACI,2CAA8B,MAA9B,EAAsC,KAAtC,C;G;qDAEJ,iB;IACI,mCAAe,KAAf,C;G;oEACJ,qB;IACI,mCAAe,2BAAuB,SAAvB,CAAf,C;G;;;;;;;;;;;;;2GC/CR,+B;IAA2E,qB;G;ECnC3E,4C;IACI,8B;MAAA,iBAAgD,I;IrBuN1B,gB;IADT,gBAAgB,2B;IACzB,sB;MAAQ,SAAU,gF;MAAV,SqBrNM,sBAAJ,GAA4B,8BAA0B,EAA1B,iBAA5B,GAA+E,E;;MrBsNjF,SqBrNE,2BrBqNQ,SqBrNR,C;;IAFR,OrBqNN,M;G;EqBhNJ,sC;IrBiN0B,gB;IADT,gBAAgB,2B;IACzB,sB;MAAQ,SAAU,gF;;MACV,SqBhNE,2BAAuB,kBrBgNf,SqBhNe,SAAvB,C;;IAF6D,OrBgN3E,M;G;EqB3MJ,qC;QAKuB,I;IAHnB,IAAI,4CAAJ,C;MAAA,OrB4EQ,WAAO,cqB3EI,kBAAkB,KAAM,MAAxB,EAA+B,KAA/B,CrB2EJ,CAAP,C;;MqBzEJ,gB;MAHJ,OrBmEQ,WqBhEW,sErBgEX,C;;G;EqB9DiC,2D;IACzC,oB;IACA,oC;G;;;;;;mDAFJ,Y;IACI,kB;G;mDADJ,Y;IAEI,0B;G;qDAFJ,kC;IAAA,qCACI,wCADJ,EAEI,gEAFJ,C;G;iDAAA,Y;IAAA,OACI,kE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I3CzKhB,oBEgDQ,WyCyHoB,IzCzHpB,CFhDR,C;U2C0KgB,M;eAEJ,oBAAgB,YAAhB,C;UAAgC,a;aAChC,uC;UACS,+DAAL,IAAK,EAAoC,eAApC,EAA6C,WAA7C,C;UACL,M;;U1C7E6B,MAAM,2BAA8B,C0C+EvD,4BAAyB,WAAzB,W1C/EuD,YAA9B,C;;;I0CkFnD,C;G;gDApCA,iC;IAAoD,O7B2IX,6C6B3I+C,qD7B2I/C,CAAtC,c;G;wE6BrGH,sC;IAGI,gB;IAFA,iBAAU,MAAV,C;IACA,oBAAoB,MAAO,c;IAC3B,2GAA8D,OAA9D,kB;MACO,oC;M3CjLX,6BEgDQ,WAAO,qBAAP,CFhDR,C;M2CmLQ,M;K3CnLR,6BEgDQ,WAAO,cyCqIS,azCrIT,CAAP,CFhDR,C;E2CsLA,C;EAkBW,0E;IAAA,mB;MAAE,4C;IAAa,C;G;sDAhB1B,gB;IAOI,IAAI,uBAAJ,C;MACU,YAAN,Y;;QR5LC,WAAU,W;QQ6LP,IAAI,oCAAJ,C;UAAgC,OAAmB,I;QR7L3D,IAAI,CQ8LI,IR9LR,C;UAA8B,K;UAAP,gC;SACvB,sBQ2LwB,IR3LxB,C;QACO,I;;;;MQ+LQ,cAAN,Y;MAAM,mC;;QRvLV,aAAU,a;QQwLP,IAAI,sCAAJ,C;UAAgC,OAAmB,M;QRxL3D,IAAI,CQyLI,IRzLR,C;UAAuB,kCAAO,K;UAAP,oC;SACvB,IAAI,CQyLG,4CRzLF,EAAL,C;UAAkB,kCAAO,K;UAAP,oC;SAClB,wBQqLkC,IRrLlC,C;QACA,kCAAO,I;;;MQoLH,IAAI,gCAAJ,C;QAII,OAAO,c;;IAEf,OAAO,I;EACX,C;wDAEA,iB;IASqD,IAAM,I;IARvD,aAAa,WAAU,KAAV,C;IAOU,YAAN,Y;IAAM,+B;;MRlNvB,IAAI,CQkN2C,eRlNhC,WQkNgC,SRlN/C,C;QAAuB,8BAAO,K;QAAP,gC;OACvB,sBQiNqC,MRjNrC,C;MACA,8BAAO,I;;;IQgNP,4C;IACA,qBAAyB,UAAzB,GAAqC,MAArC,GAAiD,cAAM,OAAN,YRrPlB,MQqPkB,6B;IACjD,iBAAU,cAAV,C;IACA,IAAI,UAAJ,C;MAAgB,4BAAqB,KAArB,C;IAChB,O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AA,gB;;;cAAA,gB;;;;;YAAgB,oC;YACZ,IAAI,sBAAS,uBAAT,EAAS,+BAAT,OAAJ,C;;;cACI,iB;kCAAO,O;;;cADX,gB;;;;;;;YADJ,gB;;;;;YAIA,iB;gCAAO,I;;;;;;YLqCP,qCAAe,gBAAf,C;;;;;;;;;;;;;;;;;;;;G;EK/CR,0E;mBAAA,mE;QAAA,S;aAAA,Q;;aAAA,uB;G;EAaA,sD;IAAA,wC;IAAA,yB;IAAA,yB;IAAA,4B;IAAA,kC;G;;;;;;;;uCAAA,Y;;;;;+BL2B4B,I;;kCKxBL,+B;YACD,gB;4BAAT,mBAAS,c;gBAAA,qC;qBAAA,mB;YAAA,Q;;YAAd,IAAI,CAAU,aAAd,C;cACI,MAAM,2BAAuB,0BAAvB,C;;;YACV,gB;gCAAO,mBAAS,O;;;;;;;;YLwBlB,kC;cACE,mBAAQ,G;cACR,MAAM,G;;cAJV,S;;;YAMI,qCAAe,gBAAf,C;;;;;;;;;;;;;;;;;;;;G;EKlCR,uD;mBAAA,gD;QAAA,S;aAAA,Q;;aAAA,uB;G;EASA,4D;IAAA,wC;IAAA,yB;IAAA,yB;IAAA,4B;IAAA,kC;G;;;;;;;;6CAAA,Y;;;;;+BLkB4B,I;;kCKfL,+B;YACD,gB;4BAAT,mBAAS,c;gBAAA,qC;qBAAA,mB;YAAA,Q;;YAAd,IAAI,CAAU,aAAd,C;;;cACI,gB;kCAAO,I;;;cADX,gB;;;;;;;;;YAEA,gB;gCAAO,mBAAS,O;;;;;;;;YLelB,kC;cACE,mBAAQ,G;cACR,MAAM,G;;cAJV,S;;;YAMI,qCAAe,gBAAf,C;;;;;;;;;;;;;;;;;;;;G;EKzBR,6D;mBAAA,sD;QAAA,S;aAAA,Q;;aAAA,uB;G;EASA,mE;IAAA,wC;IAAA,0B;IAAA,yB;IAAA,yB;IAAA,wB;IAAA,kC;IAAA,8B;EASA,C;;;;;;;;yCATA,Y;;;;;mCAEgB,C;+BLOY,I;;YAqBV,iD;YAAV,gB;;;YAAU,gB;4BAAA,6B;gBAAA,qC;qBAAA,mB;YAAA,Q;;YAAV,KAAU,aAAV,C;cAAA,gB;;;cAAA,gB;;;;;YAAU,gC;YK1BV,IAAI,2BL0BmB,GK1BnB,CAAJ,C;;;cACI,gB;kCAAO,kB;;;cADX,gB;;;;;;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AAA,Q;;2BAAA,a;YACR,IAAI,CAAM,eAAN,6BAAJ,C;cACI,gB;8BAAA,gCAAK,YAAL,O;kBAAA,qC;uBAAA,mB;cAAA,Q;;cADJ,gB;;;;;YAEI,eEtRP,WFsRe,YEtRf,C;YFoRG,gB;;;YAFJ,gB;;;YAOJ,W;;;;;;;;;;;;;;EAAA,C;EATwD,kE;IAAA,yD;qBAAA,yG;UAAA,S;eAAA,Q;;eAAA,uB;IASxD,C;G;EAXJ,kD;IACiD,uB;MAAA,UAA4B,yBAAY,W;IACrF,OAAY,UAAZ,yBAAY,EAAQ,OAAR,kBAAgC,mBAAhC,EAA4C,sCAA5C,C;G;EAWhB,+C;IAEI,+BAAa,oBAAb,e;G;EAEJ,oD;IAAA,wC;IAAA,yB;IAAA,yB;IAAA,kC;G;;;;;;;;qCAAA,Y;;;;;+BLhQ4B,I;;YKmQF,gB;4BAAX,+BAAW,c;gBAAA,qC;qBAAA,mB;YAAA,Q;;;;YAAlB,gB;gCAAkB,a;;;;;;;;YLhQpB,kC;cACE,mBAAQ,G;cACR,MAAM,G;;cAJV,S;;;YAMI,qCAAe,gBAAf,C;;;;;;;;;;;;;;;;;;;;G;EKyPR,qD;mBAAA,8C;QAAA,S;aAAA,Q;;aAAA,uB;G;EAMA,sD;IAAA,wC;IAAA,yB;IAAA,yB;IAAA,yB;IAAA,wB;IAAA,kC;EAKA,C;;;;;;;;uCALA,Y;;;;;mCAEgB,C;+BLxQY,I;;YAqBV,iD;YAAV,gB;;;YAAU,gB;4BAAA,6B;gBAAA,qC;qBAAA,mB;YAAA,Q;;YAAV,KAAU,aAAV,C;cAAA,gB;;;cAAA,gB;;;;;YAAU,gC;YKoPA,+C;YLpPV,gB;;;;;;;;;;;YAlBF,kC;cACE,mBAAQ,G;cACR,MAAM,G;;cAJV,S;;;YAMI,qCAAe,gBAAf,C;;;;YAaJ,oB;YKsPA,OAAO,kB;;;;;;;;;;;;;;;;EACX,C;EALA,uD;mBAAA,gD;QAAA,S;aAAA,Q;;aAAA,uB;EAKA,C;EAEA,sE;IAAA,wC;IAAA,0B;IAAA,yB;IAAA,4B;IAAA,uB;IAAA,kC;IAAA,oC;G;;;;;;;;yCAAA,Y;;;;;+BL7Q4B,I;;kCKgRL,+B;YACD,gB;4BAAT,mBAAS,c;gBAAA,qC;qBAAA,mB;YAAA,Q;;YAAd,I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;iDAF0D,Y;;;;;YACjD,gB;4BAAA,4B;gBAAA,qC;qBAAA,mB;YAAA,Q;;;;YAAL,gB;4BAAA,gCAAK,aAAL,O;gBAAA,qC;qBAAA,mB;YAAA,Q;;YAAA,oB;;;;;;;;;;;;;;EACJ,C;EAF0D,wC;IAAA,yD;qBAAA,+E;UAAA,S;eAAA,Q;;eAAA,uB;IAE1D,C;G;EAbA,6B;IAWqD,oCAAK,0BAAL,C;G;EAOD,2F;IAAA,wC;IAAA,6B;IAAA,yB;IAAA,sC;IAAA,wB;IAAA,kC;EAIpD,C;;;;;;;;iDAJoD,Y;;;;;YhD8tDhC,mD;YAAhB,gB;;;;;YAAA,KAAgB,yBAAhB,C;cAAA,gB;;;YAAgB,oC;YgD5tDZ,gB;4BAAA,gChD4tDyB,OgD5tDzB,O;gBAAA,qC;qBAAA,mB;YAAA,Q;;YhD4tDJ,gB;;;YgD7tDA,W;;;;;;;;;;;;;;EAGJ,C;EAJoD,wC;IAAA,yD;qBAAA,+E;UAAA,S;eAAA,Q;;eAAA,uB;IAIpD,C;G;EAPA,6B;IAG+C,oCAAK,0BAAL,C;G;EASK,2F;IAAA,wC;IAAA,6B;IAAA,yB;IAAA,sC;IAAA,6B;IAAA,oC;EAIpD,C;;;;;;;;iDAJoD,Y;;;;;;YCpEhD,gB;;;;;YAAA,KAAgB,8BAAhB,C;cAAA,gB;;;YAAgB,yC;YDsEZ,gB;4BAAA,kCCtE4B,ODsE5B,O;gBAAA,qC;qBAAA,mB;YAAA,Q;;YCtEJ,gB;;;YDqEA,W;;;;;;;;;;;;;;EAGJ,C;EAJoD,wC;IAAA,yD;qBAAA,+E;UAAA,S;eAAA,Q;;eAAA,uB;IAIpD,C;G;EAPA,6B;IAG+C,oCAAK,0BAAL,C;G;EASK,2F;IAAA,wC;IAAA,6B;IAAA,yB;IAAA,sC;IAAA,wB;IAAA,kC;EAIpD,C;;;;;;;;iDAJoD,Y;;;;;Y/B6pChC,mD;YAAhB,gB;;;;;YAAA,KAAgB,yBAAhB,C;cAAA,gB;;;YAAgB,oC;Y+B3pCZ,gB;4BAAA,gC/B2pCyB,O+B3pCzB,O;gBAAA,qC;qBAAA,mB;YAAA,Q;;Y/B2pCJ,gB;;;Y+B5pCA,W;;;;;;;;;;;;;;EAGJ,C;EAJoD,wC;IAAA,yD;qBAAA,+E;UAAA,S;eAAA,Q;;eAAA,uB;IAIpD,C;G;EAPA,6B;IAG+C,oCAAK,0BAAL,C;G;EAeW,8F;IAAA,wC;IAAA,6B;IAAA,yB;IAAA,gD;IAAA,wB;IAAA,0B;IAAA,kC;EAI1D,C;;;;;;;;+CAJ0D,Y;;;;;YACtC,6C;YAAhB,qB;YAAA,gB;;;;;YAAA,iD;cAAA,gB;;;YAAgB,cAAhB,kC;YACI,gB;4BAAA,gCAAK,OAAL,O;gBAAA,qC;qBAAA,mB;YAAA,Q;;YADJ,gB;;;YAAA,mB;YAAA,gB;;;YAGJ,W;;;;;;;;;;;;;;EAAA,C;EAJ0D,2C;IAAA,yD;qBAAA,kF;UAAA,S;eAAA,Q;;eAAA,uB;IAI1D,C;G;EAbA,0B;IASqD,oCAAK,uBAAL,C;G;EASL,6F;IAAA,wC;IAAA,6B;IAAA,yB;IAAA,0C;IAAA,kC;EAMhD,C;;;;;;;;iDANgD,Y;;;;;YAK5C,gB;4BAAA,gCAAK,wBAAL,O;gBAAA,qC;qBAAA,mB;YAAA,Q;;;;YAJA,OAIA,a;;;;;;;;;;;;;;EACJ,C;EANgD,0C;IAAA,yD;qBAAA,iF;UAAA,S;eAAA,Q;;eAAA,uB;IAMhD,C;G;EATA,yB;IAG2C,oCAAK,sBAAL,C;G;EAQ3C,qB;IAGsC,8B;G;EAEtC,qB;IAAA,yB;G;wCACI,mC;IAAkE,W;G;;;;;;;EADtE,iC;IAAA,gC;MAAA,e;KAAA,yB;G;EASiD,2F;IAAA,wC;IAAA,6B;IAAA,yB;IAAA,sC;IAAA,6B;IAAA,wB;IAAA,oC;EAIjD,C;;;;;;;;iDAJiD,Y;;;;;;YjEqka7C,mB;YAAA,gB;;;;;YAAA,wBAAgB,oBAAhB,Q;cAAA,gB;;;YAAgB,cAAA,oBAAhB,iB;YiEnkaI,gB;4BAAA,kCjEmkayB,OiEnkazB,O;gBAAA,qC;qBAAA,mB;YAAA,Q;;YjEmkaJ,gB;;;YAAA,iB;YAAA,gB;;;YiEpkaA,W;;;;;;;;;;;;;;EAGJ,C;EAJiD,wC;IAAA,yD;qBAAA,+E;UAAA,S;eAAA,Q;;eAAA,uB;IAIjD,C;G;EATA,6B;IAK4C,oCAAK,0BAAL,C;G;EAWG,2F;IAAA,wC;IAAA,6B;IAAA,yB;IAAA,sC;IAAA,6B;IAAA,wB;IAAA,oC;EAI/C,C;;;;;;;;iDAJ+C,Y;;;;;;YjE+ka3C,mB;YAAA,gB;;;;;YAAA,wBAAgB,oBAAhB,Q;cAAA,gB;;;YAAgB,cAAA,oBAAhB,iB;YiE7kaI,gB;4BAAA,kCjE6kayB,OiE7kazB,O;gBAAA,qC;qBAAA,mB;YAAA,Q;;YjE6kaJ,gB;;;YAAA,iB;YAAA,gB;;;YiE9kaA,W;;;;;;;;;;;;;;EAGJ,C;EAJ+C,wC;IAAA,yD;qBAAA,+E;UAAA,S;eAAA,Q;;eAAA,uB;IAI/C,C;G;EATA,6B;IAK0C,oCAAK,0BAAL,C;G;EAWO,2F;IAAA,wC;IAAA,6B;IAAA,yB;IAAA,sC;IAAA,6B;IAAA,wB;IAAA,oC;EAIjD,C;;;;;;;;iDAJiD,Y;;;;;;YjE2ka7C,mB;YAAA,gB;;;;;YAAA,wBAAgB,oBAAhB,Q;cAAA,gB;;;YAAgB,cAAA,oBAAhB,iB;YiEzkaI,gB;4BAAA,kCjEykayB,OiEzkazB,O;gBAAA,qC;qBAAA,mB;YAAA,Q;;YjEykaJ,gB;;;YAAA,iB;YAAA,gB;;;YiE1kaA,W;;;;;;;;;;;;;;EAGJ,C;EAJiD,wC;IAAA,yD;qBAAA,+E;UAAA,S;eAAA,Q;;eAAA,uB;IAIjD,C;G;EATA,6B;IAK4C,oCAAK,0BAAL,C;G;EASG,2F;IAAA,wC;IAAA,6B;IAAA,yB;IAAA,sC;IAAA,wB;IAAA,kC;EAI/C,C;;;;;;;;iDAJ+C,Y;;;;;YhD+nD3B,mD;YAAhB,gB;;;;;YAAA,KAAgB,yBAAhB,C;cAAA,gB;;;YAAgB,oC;YgD7nDZ,gB;4BAAA,gChD6nDyB,OgD7nDzB,O;gBAAA,qC;qBAAA,mB;YAAA,Q;;YhD6nDJ,gB;;;YgD9nDA,W;;;;;;;;;;;;;;EAGJ,C;EAJ+C,wC;IAAA,yD;qBAAA,+E;UAAA,S;eAAA,Q;;eAAA,uB;IAI/C,C;G;EAPA,6B;IAG0C,oCAAK,0BAAL,C;G;EASO,2F;IAAA,wC;IAAA,6B;IAAA,yB;IAAA,sC;IAAA,wB;IAAA,kC;EAIjD,C;;;;;;;;iDAJiD,Y;;;;;YhDsnD7B,mD;YAAhB,gB;;;;;YAAA,KAAgB,yBAAhB,C;cAAA,gB;;;YAAgB,oC;YgDpnDZ,gB;4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C;EAFc,sD;IAAA,qD;qBAAA,mF;UAAA,S;eAAA,Q;;eAAA,uB;IAEd,C;G;EAHsB,0G;IAAA,wC;IAAA,6B;IAAA,yB;IAAA,0C;IAAA,kC;EAI1B,C;;;;;;;;8DAJ0B,Y;;;;;YXnBlC,gB;4BWoBY,wBXpBZ,6CWoB0B,yDXpB1B,Q;gBAAA,qC;qBAAA,mB;YAAA,Q;;;;YWoBY,OAAM,a;;;;;;;;;;;;;;EAGV,C;EAJ0B,uD;IAAA,yD;qBAAA,8F;UAAA,S;eAAA,Q;;eAAA,uB;IAI1B,C;G;EAcyC,mE;IAAA,qB;MAErC,IAAI,kBAAW,SAAf,C;QAAyB,kBAAW,gBAAO,uBAAmB,KAAnB,CAAP,C;MACxC,W;IAAA,C;G;EAmB6D,qJ;IAAA,wC;IAAA,yB;IAAA,4C;IAAA,0B;IAAA,kD;IAAA,0C;EAKjD,C;;;;;;;;4EALiD,Y;;;;;YAIxC,Q;YAHmB,gB;4BAAP,yBAAO,sB;gBAAA,qC;qBAAA,mB;YAAA,Q;;;;YAAkB,gBAAlB,a;Y3ByW6B,U;YAAtE,U;YAAA,IAAI,qDAAJ,C;c2BzWqE,4B;c3ByWjC,SAAU,2B;c2BxWzB,MAAM,kBAAK,uBAAmB,KAAnB,C;;c3BwWhC,SAAsE,uF;Y2BzWrD,uB;YvBpHmC,kB;YuBuH9B,gB;4BAAA,6BAAU,wBAAV,EAA4B,UvBvHd,KuBuHG,IvBvHP,GAAoB,2EAApB,GAAmC,UuBuHjB,UvBvHiB,6DuBuH7C,O;gBAAA,qC;qBAAA,mB;YAAA,Q;;YAAA,oB;YAAL,gB;4BAAA,uC;gBAAA,qC;qBAAA,mB;YAAA,Q;;YAHA,OAGA,a;;;;;;;;;;;;;;EACJ,C;EALiD,qH;IAAA,kD;qBAAA,+I;UAAA,S;eAAA,Q;;eAAA,uB;IAKjD,C;G;EANS,yK;IAAA,wC;IAAA,yB;IAAA,wD;IAAA,sC;IAAA,4C;IAAA,0B;IAAA,kD;IAAA,0B;EAOb,C;;;;;;;;uEAPa,Y;;;;;YACT,gB;4BAAA,wBAAwB,+BAAxB,EAAsC,IAAtC,EAA4C,sBAA5C,EAAiD,uIAAjD,O;gBAAA,qC;qBAAA,mB;YAAA,Q;;;;YAAA,oB;;;;;;;;;;;;;;EAMJ,C;EAPa,sI;IAAA,qD;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AR,OAAQ,CAAjB,C;G;EAkDiB,4C;IAAA,8B;MACb,OAAqB,cAArB,gBAAQ,WAAR,CAAqB,C;IACzB,C;G;EAlDJ,wC;IAgDI,mCAAiB,0BAAjB,C;G;EAQgB,2F;IAAA,wC;IAAA,yB;IAAA,0B;IAAA,0B;EAA+B,C;;;;;;;;uEAA/B,Y;;;;;YAAW,gB;4BAAA,4BAAK,8CAAS,IAAd,O;gBAAA,qC;qBAAA,mB;YAAA,Q;;;;YAAA,oB;;;;;;;;;;;;;;EAAoB,C;EAA/B,wD;IAAA,qD;qBAAA,qF;UAAA,S;eAAA,Q;;eAAA,uB;IAA+B,C;G;EADtB,oH;IAAA,wC;IAAA,6B;IAAA,yB;IAAA,0D;IAAA,kC;EAErB,C;;;;;;;;gEAFqB,Y;;;;;YnB5IzB,gB;4BAAA,6EmB6IgB,2DnB7IhB,Q;gBAAA,qC;qBAAA,mB;YAAA,Q;;;;YmB6IQ,oB;;;;;;;;;;;;;;EACJ,C;EAFqB,iE;IAAA,yD;qBAAA,wG;UAAA,S;eAAA,Q;;eAAA,uB;IAErB,C;G;EAoBqC,sH;IAAA,wC;IAAA,yB;IAAA,oD;IAAA,kD;EAGzB,C;;;;;;;;yEAHyB,Y;;;;;YACrB,wC;YAAqB,YAAL,I;YAAK,YAAM,8B;Y/B3NY,kB;Y+B2N5B,gB;4BAAA,gB/B3NY,eAAJ,GAAoB,2EAApB,GAAmC,4E+B2N3C,O;gBAAA,qC;qBAAA,mB;YAAA,Q;;;;YAAX,OACA,iCAAY,IADZ,M;;;;;;;;;;;;;;EAEJ,C;EAHyB,4F;IAAA,4C;qBAAA,gH;UAAA,S;eAAA,Q;;eAAA,uB;IAGzB,C;G;EAEqB,+H;IAAA,wC;IAAA,yB;IAAA,kD;IAAA,oD;IAAA,uC;IAAA,0B;EASzB,C;;;;;;;;yEATyB,Y;;;;;YnC2QO,Q;YAA5C,IAAI,emC1QY,gBnC0QZ,8BAAJ,C;cmCzQiC,iCnCyQW,QmC1Q5B,gBnC0Q4B,gE;;YAgB5C,IAAI,cmC1RY,gBnC0RZ,8BAAJ,C;;cmCxR+B,sD;cnCwRK,SmC1RpB,gBnC0R2B,kB;cmCvRnB,e;gBAAU,MAAV,E;eAEA,IAAI,wCAAJ,C;gBAA4C,YAAM,gC;gB/BrOf,kB;gB+BqOD,gB;gCAAX,kBAAW,Y/BrOf,U+BqOoB,I/BrOxB,GAAoB,2EAApB,GAAmC,4E+BqOhB,O;oBAAA,qC;yBAAA,mB;gBAAA,Q;;gBAAlC,gB;;;;cnCqRxB,gB;;;;;;;YmCrRwB,gB;;;YACA,mCAAY,I;YnCoRpC,gB;;;YmC1RgB,uB;;;;;;;;;;;;;;EAQJ,C;EATyB,4F;IAAA,qD;qBAAA,yH;UAAA,S;eAAA,Q;;eAAA,uB;IASzB,C;G;EAjBS,wH;IAAA,4B;MAET,IAAI,2BAAJ,C;QACI,4BAAU,uBAAV,EAAyB,8EAAzB,C;OAKG,yBAAP,cAAO,oBAAkB,8EAAlB,C;MAUX,W;IAAA,C;G;EAvCG,4J;IAAA,wC;IAAA,6B;IAAA,yB;IAAA,0D;IAAA,0E;IAAA,0B;IAAA,6B;IAAA,iC;IAAA,kC;IAAA,oC;EAyCX,C;;;;;;;;yDAzCW,Y;;;;;gCAEM,8CAAQ,gEAAR,C;uCAIS,I;YACtB,gB;;;;;YAAA,IAAO,sBAAP,KAAqB,IAArB,C;cAAA,gB;;;;YAGI,IAAI,8BAAJ,C;cAC+C,YAAM,sB;c/B7MF,gB;c+B6M/C,6BAAgB,yC/B7Me,U+B6MO,I/B7MX,GAAoB,qEAApB,GAAmC,4E+B6M9C,C;cpFzL5B,IAAI,EoF0LgB,mDpF1LhB,CAAJ,C;gBACI,coFyLuC,yC;gBpFxLvC,MAAM,8BAAyB,OAAQ,WAAjC,C;eoFyLE,IAAI,sCAAJ,C;gBACyB,cAAM,sB;gB/BhNgB,kB;gB+BgNhC,gB;gCAAX,qBAAW,Y/BhNgB,Y+BgNX,I/BhNO,GAAoB,2EAApB,GAAmC,8E+BgN/C,O;oBAAA,qC;yBAAA,mB;gBAAA,Q;;gBADf,gB;;;;cAHJ,gB;;;;;YAKQ,yBAAY,I;YAFhB,gB;;;YAHJ,gB;;;YDhBD,gB;4BAAsC,cC2BxB,0HD3BwB,CAAtC,M;gBAAA,qC;qBAAA,mB;YAAA,Q;;YCaH,gB;;;YAkCJ,W;;;;;;;;;;;;;;EAAA,C;EAzCW,2F;IAAA,uE;qBAAA,gJ;UAAA,S;eAAA,Q;;eAAA,uB;IAyCX,C;G;EA1CJ,4D;IACI,kBAAW,yDAAX,C;G;EAwEgB,iF;IAAA,wC;IAAA,yB;IAAA,0B;IAAA,0B;EAA+B,C;;;;;;;;6DAA/B,Y;;;;;YAAW,gB;4BAAA,4BAAK,8CAAS,IAAd,O;gBAAA,qC;qBAAA,mB;YAAA,Q;;;;YAAA,oB;;;;;;;;;;;;;;EAAoB,C;EAA/B,8C;IAAA,qD;qBAAA,2E;UAAA,S;eAAA,Q;;eAAA,uB;IAA+B,C;G;EADQ,gG;IAAA,wC;IAAA,6B;IAAA,yB;IAAA,sC;IAAA,kC;EAEnD,C;;;;;;;;sDAFmD,Y;;;;;YnBjNvD,gB;4BAAA,mEmBkNgB,iDnBlNhB,Q;gBAAA,qC;qBAAA,mB;YAAA,Q;;;;YmBkNQ,oB;;;;;;;;;;;;;;EACJ,C;EAFmD,6C;IAAA,yD;qBAAA,oF;UAAA,S;eAAA,Q;;eAAA,uB;IAEnD,C;G;EAKiC,kH;IAAA,wC;IAAA,yB;IAAA,kD;IAAA,4C;IAAA,4B;EAQzB,C;;;;;;;;+DARyB,Y;;;;;YnC0NO,Q;YAA5C,IAAI,emCzNY,iBnCyNZ,8BAAJ,C;cmCxNiC,iCnCwNW,QmCzN5B,iBnCyN4B,gE;;YAgB5C,IAAI,cmCzOY,iBnCyOZ,8BAAJ,C;cmCvO+B,8C;cAAA,oD;cnCuOK,SmCzOpB,iBnCyO2B,kB;cmCtOnB,e;gBAAU,MAAV,E;eACA,cAAO,gBAAO,6BAAP,C;cACP,sBAAY,I;;YALpB,wB;;;;;;;;;;;;;;;;EAOJ,C;EARyB,8E;IAAA,sD;qBAAA,4G;UAAA,S;eAAA,Q;;eAAA,uB;IAQzB,C;G;EAGiB,kH;IAAA,wC;IAAA,yB;IAAA,kD;IAAA,oD;IAAA,wB;EAIjB,C;;;;;;;;+DAJiB,Y;;;;;YACD,gD;YAAA,4B;cAAa,M;;cAAb,gB;;;;;;;YAAZ,YAAY,e;YACZ,iCAAY,I;Y/B7R+B,gB;Y+B8RhC,gB;4BAAX,6BAAW,YAAgB,K/B9RA,K+B8RX,I/B9RO,GAAoB,qEAApB,GAAmC,U+B8R/B,K/B9R+B,6D+B8R/C,O;gBAAA,qC;qBAAA,mB;YAAA,Q;;YAFX,OAEW,a;;;;;;;;;;;;;;EACf,C;EAJiB,kF;IAAA,kD;qBAAA,4G;UAAA,S;eAAA,Q;;eAAA,uB;IAIjB,C;G;EAhBS,uG;IAAA,4B;MACF,yBAAP,cAAO,oBAAkB,gEAAlB,C;MAWA,yBAAP,cAAO,YAAU,oEAAV,C;MAKX,W;IAAA,C;G;EAxBU,+H;IAAA,wC;IAAA,6B;IAAA,yB;IAAA,sC;IAAA,wD;IAAA,0B;IAAA,6B;IAAA,0B;IAAA,kC;IAAA,oC;EA0BlB,C;;;;;;;;+CA1BkB,Y;;;;;gCACD,sCAAmB,EAAnB,EAAsC,4CAAtC,C;uCAGS,I;gCACT,wCAAkB,+BAAlB,C;YACb,gB;;;;;YAAA,IAAO,sBAAP,KAAqB,IAArB,C;cAAA,gB;;;YDlFG,gB;4BAAsC,cCmFxB,yGDnFwB,CAAtC,M;gBAAA,qC;qBAAA,mB;YAAA,Q;;YCkFH,gB;;;YAoBJ,W;;;;;;;;;;;;;;EAAA,C;EA1BkB,8D;IAAA,uE;qBAAA,mH;UAAA,S;eAAA,Q;;eAAA,uB;IA0BlB,C;G;EArDJ,yC;IpFzNI,IAAI,EoFmPI,0BAAe,CpFnPnB,CAAJ,C;MACI,coFkPwB,kC;MpFjPxB,MAAM,8BAAyB,OAAQ,WAAjC,C;KoFkPV,OAAO,WAAW,sCAAX,C;EA2BX,C;EAQiC,0I;IAAA,wC;IAAA,6B;IAAA,yB;IAAA,oE;IAAA,sD;IAAA,kC;EAM7B,C;;;;;;;;0DAN6B,Y;;;;;YACzB,gB;4BAAA,MAAM,qCAAN,O;gBAAA,qC;qBAAA,mB;YAAA,Q;;;;YACA,gB;;;YACY,gB;4BAAR,4BAAQ,YAAK,IAAL,O;gBAAA,qC;qBAAA,mB;YAAA,Q;;YACR,gB;4BAAA,MAAM,8BAAN,O;gBAAA,qC;qBAAA,mB;YAAA,Q;;YAFJ,gB;;;;;;;;;;;;;;;EAIJ,C;EAN6B,uF;IAAA,yD;qBAAA,8H;UAAA,S;eAAA,Q;;eAAA,uB;IAM7B,C;G;EAZJ,uE;IAGiE,kC;MAAA,qBAA2B,W;IpFpRxF,IAAI,EoFqRI,0BAAe,CpFrRnB,CAAJ,C;MACI,coFoRwB,wE;MpFnRxB,MAAM,8BAAyB,OAAQ,WAAjC,C;KAFV,IAAI,EoFsRI,iCAAsB,CpFtR1B,CAAJ,C;MACI,gBoFqR+B,uF;MpFpR/B,MAAM,8BAAyB,SAAQ,WAAjC,C;KoFqRV,OAAO,2BAAmB,CAAnB,EAAsB,yDAAtB,C;EAOX,C;EAEA,qC;IA0B2D,yBAAc,cAAP,MAAO,CAAd,C;G;EnBzS3D,iD;IAmBY,oC;G;EAnBZ,+CAoBQ,+B;IAAsC,2BAAO,KAAP,e;G;EApB9C;;;G;EoBtCA,yC;IAUQ,kBADE,SACF,a;MADJ,OACuB,S;;MADvB,OAEY,oCAAqC,kBAArC,EAAyE,oBAAzE,C;G;EAGhB,0D;IAQ6E,Q;IAAzE,2CAAqC,kBAArC,EAAyE,gEAAzE,C;G;EAEJ,wD;IAOI,2CAAqC,WAArC,EAAkE,oBAAlE,C;G;EAG6C,uC;IAAE,S;EAAG,C;;EAGM,iD;IAAc,mBAAO,KAAP,C;EAAW,C;;EAErF,yE;IAWI,kDAA+B,SAAK,YAAL,KAAqB,WAApD,IAAmE,SAAK,cAAL,KAAuB,aAA1F,C;MADS,OACkG,S;;MADlG,OAED,qBAAiB,SAAjB,EAAuB,WAAvB,EAAoC,aAApC,C;G;EAGqB,gE;IAC7B,0B;IACA,8B;IACA,kC;G;EAKqB,iJ;IAAA,wC;IAAA,yB;IAAA,0D;IAAA,sD;IAAA,kD;IAAA,0B;EAOjB,C;;;;;;;;iEAPiB,Y;;;;;YACb,UAAU,6CAAY,gBAAZ,C;YAEV,IAAI,qCAAgB,IAAhB,IAAwB,CAAC,+CAAc,gCAAd,EAA2B,GAA3B,CAA7B,C;cACI,mCAAc,G;cACJ,gB;8BAAV,4BAAU,YAAK,gBAAL,O;kBAAA,qC;uBAAA,mB;cAAA,Q;;cAFd,gB;;;;;;;YAFA,W;;YAMJ,W;;;;;;;;;;;;;;EAAA,C;EAPiB,8G;IAAA,qD;qBAAA,2I;UAAA,S;eAAA,Q;;eAAA,uB;IAOjB,C;G;EAVJ,0E;IAAA,wC;IAAA,yB;IAAA,kB;IAAA,kC;EAWA,C;;;;;;;;oDAXA,Y;;;;;YAEI,sBAAwB,IAAxB,C;YpBJJ,gB;4BoBKI,qBpBLJ,6CoBKqB,8EpBLrB,Q;gBAAA,qC;qBAAA,mB;YAAA,Q;;;;;;;;;;;;;;;;;;EoBaA,C;+CAXA,kD;mBAAA,mE;QAAA,S;aAAA,Q;;aAAA,uB;EAWA,C;;;;;;EvBeJ,mD;IAMW,kC;G;EACH,0E;IAAA,wC;IAAA,yB;IAAA,kB;IAAA,kC;EAEA,C;;;;;;;;oDAFA,Y;;;;;YACc,gB;4BAAA,yBAAV,oBAAU,O;gBAAA,qC;qBAAA,mB;YAAA,Q;;;;;;;;;;;;;;;;;;EACd,C;EATR,uDAOQ,kD;mBAAA,mE;QAAA,S;aAAA,Q;;aAAA,uB;EAEA,C;EATR;;;G;EG/CA,iD;IAmBY,oC;G;EAnBZ,+CAoBQ,+B;IAAsC,2BAAO,KAAP,e;G;EApB9C;;;G;4GqBlCA,yB;IAAA,6B;IAAA,iF;IAAA,0D;IAAA,sC;IAAA,iD;IAqBY,kG;MAAA,wC;MAAA,yB;MAAA,kD;MAAA,0B;MAAA,0B;IAGR,C;;;;;;;;2DAHQ,Y;;;;;cAEW,gB;8BAAA,+CAAU,gBAAV,O;kBAAA,qC;uBAAA,mB;cAAA,Q;;;;cAAf,W;;;;;;;;;;;;;;IACJ,C;IAHQ,+D;MAAA,qD;uBAAA,4F;YAAA,S;iBAAA,Q;;iBAAA,uB;MAGR,C;K;IAxBJ,uBAoBkB,yB;MrBclB,kC;MAAA,2D;MAAA,+C;QAmBY,oC;O;MAnBZ,6CAoBQ,+B;QAAsC,2BAAO,KAAP,e;O;MApB9C;;;O;MqBdkB,oH;QAAA,wC;QAAA,6B;QAAA,yB;QAAA,kD;QAAA,4C;QAAA,kC;MAKlB,C;;;;;;;;sDALkB,Y;;;;;gBrBiCd,gB;gCAAA,oEqBhCQ,2ErBgCR,Q;oBAAA,qC;yBAAA,mB;gBAAA,Q;;;;gBqBjCgB,OAChB,a;;;;;;;;;;;;;;MAIJ,C;aALkB,iD;QAAA,yD;yBAAA,wG;cAAA,S;mBAAA,Q;;mBAAA,uB;QAKlB,C;O;KALkB,C;IApBlB,uC;MAoBa,YAAK,sCAAL,C;K;GApBb,C;wHA2BA,yB;IAAA,6B;IAAA,iF;IAAA,0D;IAAA,sC;IxBsDA,kC;IAAA,yC;IAAA,iD;MAMW,kC;K;IACH,uE;MAAA,wC;MAAA,yB;MAAA,kB;MAAA,kC;IAEA,C;;;;;;;;mDAFA,Y;;;;;cACc,gB;8BAAA,yBAAV,oBAAU,O;kBAAA,qC;uBAAA,mB;cAAA,Q;;;;;;;;;;;;;;;;;;IACd,C;IATR,qDAOQ,kD;qBAAA,gE;UAAA,S;eAAA,Q;;eAAA,uB;IAEA,C;IATR;;;K;IwBjDY,wG;MAAA,wC;MAAA,yB;MAAA,kD;MAAA,0B;MAAA,0B;IAGR,C;;;;;;;;iEAHQ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,0B;EAGR,C;;;;;;;;+DAHQ,Y;;;;;YAEW,gB;4BAAA,+CAAU,gBAAV,O;gBAAA,qC;qBAAA,mB;YAAA,Q;;;;YAAf,W;;;;;;;;;;;;;;EACJ,C;EAHQ,qE;IAAA,qD;qBAAA,kG;UAAA,S;eAAA,Q;;eAAA,uB;IAGR,C;G;EAJoB,gI;IAAA,wC;IAAA,6B;IAAA,yB;IAAA,kD;IAAA,wD;IAAA,kC;EAKxB,C;;;;;;;;wDALwB,Y;;;;;YrBsBpB,gB;4BAAA,0EqBrBQ,iFrBqBR,Q;gBAAA,qC;qBAAA,mB;YAAA,Q;;;;YqBtBsB,OACtB,a;;;;;;;;;;;;;;EAIJ,C;EALwB,6E;IAAA,yD;qBAAA,oH;UAAA,S;eAAA,Q;;eAAA,uB;IAKxB,C;G;EIR0G,uG;IAAA,wC;IAAA,6B;IAAA,yB;IAAA,kD;IAAA,kC;IAAA,0B;EAE1G,C;;;;;;;;8CAF0G,Y;;;;;YACjF,gB;4BAAA,6BAAU,gBAAV,O;gBAAA,qC;qBAAA,mB;YAAA,Q;;;;YAAL,gB;4BAAA,gCAAK,aAAL,O;gBAAA,qC;qBAAA,mB;YAAA,Q;;YAAjB,W;;;;;;;;;;;;;;EACH,C;EAF0G,2C;IAAA,kE;qBAAA,2F;UAAA,S;eAAA,Q;;eAAA,uB;IAE1G,C;G;EzBIA,iD;IAmBY,oC;G;EAnBZ,+CAoBQ,+B;IAAsC,2BAAO,KAAP,e;G;EApB9C;;;G;EH+CA,mD;IAMW,kC;G;EACH,0E;IAAA,wC;IAAA,yB;IAAA,kB;IAAA,kC;EAEA,C;;;;;;;;oDAFA,Y;;;;;YACc,gB;4BAAA,yBAAV,oBAAU,O;gBAAA,qC;qBAAA,mB;YAAA,Q;;;;;;;;;;;;;;;;;;EACd,C;EATR,uDAOQ,kD;mBAAA,mE;QAAA,S;aAAA,Q;;aAAA,uB;EAEA,C;EATR;;;G;;;EMnEA,6C;IAWI,OAAe,6CkBMK,uBIHkF,atBHlG,SsBGkG,CJGlF,YlBNL,E;G;EAEnB,yD;IAsBI,2B;MAAA,cAAmB,mB;IAGnB,OAAe,4CkBrBK,uBIHkF,atBwBlG,SsBxBkG,CJGlF,YlBqBL,GAAa,WAAb,C;G;EAUP,iF;IAAA,wC;IAAA,yB;IAAA,0B;IAAA,0B;EAA0B,C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A,yD;qBAAA,sH;UAAA,S;eAAA,Q;;eAAA,uB;IAKxB,C;G;ErBFA,kD;IAmBY,oC;G;EAnBZ,gDAoBQ,+B;IAAsC,2BAAO,KAAP,e;G;EApB9C;;;G;EH+CA,oD;IAMW,kC;G;EACH,0E;IAAA,wC;IAAA,yB;IAAA,kB;IAAA,kC;EAEA,C;;;;;;;;oDAFA,Y;;;;;YACc,gB;4BAAA,yBAAV,oBAAU,O;gBAAA,qC;qBAAA,mB;YAAA,Q;;;;;;;;;;;;;;;;;;EACd,C;EATR,wDAOQ,kD;mBAAA,mE;QAAA,S;aAAA,Q;;aAAA,uB;EAEA,C;EATR;;;G;wG4BnFA,yB;IAAA,6B;IAAA,iF;IAAA,0D;IAAA,sC;I5BmFA,kC;IAAA,yC;IAAA,iD;MAMW,kC;K;IACH,uE;MAAA,wC;MAAA,yB;MAAA,kB;MAAA,kC;IAEA,C;;;;;;;;mDAFA,Y;;;;;cACc,gB;8BAAA,yBAAV,oBAAU,O;kBAAA,qC;uBAAA,mB;cAAA,Q;;;;;;;;;;;;;;;;;;IACd,C;IATR,qDAOQ,kD;qBAAA,gE;UAAA,S;eAAA,Q;;eAAA,uB;IAEA,C;IATR;;;K;IwBjDY,wG;MAAA,wC;MAAA,yB;MAAA,kD;MAAA,0B;MAAA,0B;IAGR,C;;;;;;;;iEAHQ,Y;;;;;cAEW,gB;8BAAA,+CAAU,gBAAV,O;kBAAA,qC;uBAAA,mB;cAAA,Q;;;;cAAf,W;;;;;;;;;;;;;;IACJ,C;IAHQ,qE;MAAA,qD;uBAAA,kG;YAAA,S;iBAAA,Q;;iBAAA,uB;MAGR,C;K;IARJ,6BAIwB,yB;MrBGxB,kC;MAAA,2D;MAAA,+C;QAmBY,oC;O;MAnBZ,6CAoBQ,+B;QAAsC,2BAAO,KAAP,e;O;MApB9C;;;O;MqBHwB,gI;QAAA,wC;QAAA,6B;QAAA,yB;QAAA,kD;QAAA,wD;QAAA,kC;MAKxB,C;;;;;;;;4DALwB,Y;;;;;gBrBsBpB,gB;gCAAA,0EqBrBQ,iFrBqBR,Q;oBAAA,qC;yBAAA,mB;gBAAA,Q;;;;gBqBtBsB,OACtB,a;;;;;;;;;;;;;;MAIJ,C;aALwB,uD;QAAA,yD;yBAAA,oH;cAAA,S;mBAAA,Q;;mBAAA,uB;QAKxB,C;O;KALwB,C;II9BiF,wG;MAAA,wC;MAAA,6B;MAAA,yB;MAAA,kD;MAAA,kC;MAAA,0B;IAEzG,C;;;;;;;;iDAFyG,Y;;;;;cACjG,gB;8BAAA,6BAAU,gBAAV,O;kBAAA,qC;uBAAA,mB;cAAA,Q;;;;cAAJ,IAAI,aAAJ,C;gBAAuC,gB;gCAAA,gCAAK,gBAAL,O;oBAAA,qC;yBAAA,mB;gBAAA,Q;;gBAAvC,gB;;;;;cAAsB,W;;cAC1B,W;;;;;;;;;;;;;;IAAA,C;IAFyG,4C;MAAA,kE;uBAAA,4F;YAAA,S;iBAAA,Q;;iBAAA,uB;MAEzG,C;K;IALA,uC;MAG+F,oCJ8BvE,uBI9BiF,wBJ8BjF,YI9BuE,C;K;GAH/F,C;8GAOA,yB;IAAA,6B;IAAA,iF;IAAA,0D;IAAA,sC;I5B4EA,kC;IAAA,yC;IAAA,iD;MAMW,kC;K;IACH,uE;MAAA,wC;MAAA,yB;MAAA,kB;MAAA,kC;IAEA,C;;;;;;;;mDAFA,Y;;;;;cACc,gB;8BAAA,yBAAV,oBAAU,O;kBAAA,qC;uBAAA,mB;cAAA,Q;;;;;;;;;;;;;;;;;;IACd,C;IATR,qDAOQ,kD;qBAAA,gE;UAAA,S;eAAA,Q;;eAAA,uB;IAEA,C;IATR;;;K;IwBjDY,wG;MAAA,wC;MAAA,yB;MAAA,kD;MAAA,0B;MAAA,0B;IAGR,C;;;;;;;;iEAHQ,Y;;;;;cAEW,gB;8BAAA,+CAAU,gBAAV,O;kBAAA,qC;uBAAA,mB;cAAA,Q;;;;cAAf,W;;;;;;;;;;;;;;IACJ,C;IAHQ,qE;MAAA,qD;uBAAA,kG;YAAA,S;iBAAA,Q;;iBAAA,uB;MAGR,C;K;IARJ,6BAIwB,yB;MrBGxB,kC;MAAA,2D;MAAA,+C;QAmBY,oC;O;MAnBZ,6CAoBQ,+B;QAAsC,2BAAO,KAAP,e;O;MApB9C;;;O;MqBHwB,gI;QAAA,wC;QAAA,6B;QAAA,yB;QAAA,kD;QAAA,wD;QAAA,kC;MAKxB,C;;;;;;;;4DALwB,Y;;;;;gBrBsBpB,gB;gCAAA,0EqBrBQ,iFrBqBR,Q;oBAAA,qC;yBAAA,mB;gBAAA,Q;;;;gBqBtBsB,OACtB,a;;;;;;;;;;;;;;MAIJ,C;aALwB,uD;QAAA,yD;yBAAA,oH;cAAA,S;mBAAA,Q;;mBAAA,uB;QAKxB,C;O;KALwB,C;IIvBoF,2G;MAAA,wC;MAAA,6B;MAAA,yB;MAAA,kD;MAAA,kC;MAAA,0B;IAE5G,C;;;;;;;;oDAF4G,Y;;;;;cACnG,gB;8BAAA,6BAAU,gBAAV,O;kBAAA,qC;uBAAA,mB;cAAA,Q;;;;cAAL,IAAI,CAAC,aAAL,C;gBAAwC,gB;gCAAA,gCAAK,gBAAL,O;oBAAA,qC;yBAAA,mB;gBAAA,Q;;gBAAxC,gB;;;;;cAAuB,W;;cAC3B,W;;;;;;;;;;;;;;IAAA,C;IAF4G,+C;MAAA,kE;uBAAA,+F;YAAA,S;iBAAA,Q;;iBAAA,uB;MAE5G,C;K;IALA,uC;MAGkG,oCJuB1E,uBIvBoF,2BJuBpF,YIvB0E,C;K;GAHlG,C;0HAOA,yB;IAAA,iF;IAAA,0D;IAAA,sC;IAAA,yC;IAAA,8B;IAdA,6B;I5BmFA,kC;IAAA,iD;MAMW,kC;K;IACH,uE;MAAA,wC;MAAA,yB;MAAA,kB;MAAA,kC;IAEA,C;;;;;;;;mDAFA,Y;;;;;cACc,gB;8BAAA,yBAAV,oBAAU,O;kBAAA,qC;uBAAA,mB;cAAA,Q;;;;;;;;;;;;;;;;;;IACd,C;IATR,qDAOQ,kD;qBAAA,gE;UAAA,S;eAAA,Q;;eAAA,uB;IAEA,C;IATR;;;K;IwBjDY,wG;MAAA,wC;MAAA,yB;MAAA,kD;MAAA,0B;MAAA,0B;IAGR,C;;;;;;;;iEAHQ,Y;;;;;cAEW,gB;8BAAA,+CAAU,gBAAV,O;kBAAA,qC;uBAAA,mB;cAAA,Q;;;;cAAf,W;;;;;;;;;;;;;;IACJ,C;IAHQ,qE;MAAA,qD;uBAAA,kG;YAAA,S;iBAAA,Q;;iBAAA,uB;MAGR,C;K;IARJ,6BAIwB,yB;MrBGxB,kC;MAAA,2D;MAAA,+C;QAmBY,oC;O;MAnBZ,6CAoBQ,+B;QAAsC,2BAAO,KAAP,e;O;MApB9C;;;O;MqBHwB,gI;QAAA,wC;QAAA,6B;QAAA,yB;QAAA,kD;QAAA,wD;QAAA,kC;MAKxB,C;;;;;;;;4DALwB,Y;;;;;gBrBsBpB,gB;gCAAA,0EqBrBQ,iFrBqBR,Q;oBAAA,qC;yBAAA,mB;gBAAA,Q;;;;gBqBtBsB,OACtB,a;;;;;;;;;;;;;;MAIJ,C;aALwB,uD;QAAA,yD;yBAAA,oH;cAAA,S;mBAAA,Q;;mBAAA,uB;QAKxB,C;O;KALwB,C;II9BiF,wG;MAAA,wC;MAAA,6B;MAAA,yB;MAAA,kD;MAAA,kC;MAAA,0B;IAEzG,C;;;;;;;;iDAFyG,Y;;;;;cACjG,gB;8BAAA,6BAAU,gBAAV,O;kBAAA,qC;uBAAA,mB;cAAA,Q;;;;cAAJ,IAAI,aAAJ,C;gBAAuC,gB;gCAAA,gCAAK,gBAAL,O;oBAAA,qC;yBAAA,mB;gBAAA,Q;;gBAAvC,gB;;;;;cAAsB,W;;cAC1B,W;;;;;;;;;;;;;;IAAA,C;IAFyG,4C;MAAA,kE;uBAAA,4F;YAAA,S;iBAAA,Q;;iBAAA,uB;MAEzG,C;K;IAa2E,yF;MAAA,wC;MAAA,yB;MAAA,sB;MAAA,oB;IAAU,C;;;;;;;;2DAAV,Y;;;;;cAAE,oC;;;;;;;;;;;;;;;;IAAQ,C;IAAV,yD;MAAA,kD;uBAAA,mF;YAAA,S;iBAAA,Q;;iBAAA,uB;MAAU,C;K;IAJrF,sC;MAIoE,Q;MAAA,yDJe5C,uBI9BiF,cAe9B,iCAf8B,CJ8BjF,YIf4C,4B;K;GAJpE,C;EASyE,4F;IAAA,wC;IAAA,6B;IAAA,yB;IAAA,kC;IAAA,0B;EAEzE,C;;;;;;;;wDAFyE,Y;;;;;YACrE,IAAI,wBAAJ,C;cAAoC,gB;8BAAA,gCAAK,gBAAL,O;kBAAA,qC;uBAAA,mB;cAAA,Q;;cAApC,gB;;;;;;;YAAmB,W;;YACvB,W;;;;;;;;;;;;;;EAAA,C;EAFyE,iF;mBAAA,gF;QAAA,S;aAAA,Q;;aAAA,uB;EAEzE,C;EALA,oC;IAGwD,sCJUhC,yBIViD,sBJUjD,YIVgC,C;G;kGAIxD,yB;IAAA,6B;IAAA,iF;IAAA,0D;IAAA,sC;I5BwDA,kC;IAAA,yC;IAAA,iD;MAMW,kC;K;IACH,uE;MAAA,wC;MAAA,yB;MAAA,kB;MAAA,kC;IAEA,C;;;;;;;;mDAFA,Y;;;;;cACc,gB;8BAAA,yBAAV,oBAAU,O;kBAAA,qC;uBAAA,mB;cAAA,Q;;;;;;;;;;;;;;;;;;IACd,C;IATR,qDAOQ,kD;qBAAA,gE;UAAA,S;eAAA,Q;;eAAA,uB;IAEA,C;IATR;;;K;IwBjDY,wG;MAAA,wC;MAAA,yB;MAAA,kD;MAAA,0B;MAAA,0B;IAGR,C;;;;;;;;iEAHQ,Y;;;;;cAEW,gB;8BAAA,+CAAU,gBAAV,O;kBAAA,qC;uBAAA,mB;cAAA,Q;;;;cAAf,W;;;;;;;;;;;;;;IACJ,C;IAHQ,qE;MAAA,qD;uBAAA,kG;YAAA,S;iBAAA,Q;;iBAAA,uB;MAGR,C;K;IARJ,6BAIwB,yB;MrBGxB,kC;MAAA,2D;MAAA,+C;QAmBY,oC;O;MAnBZ,6CAoBQ,+B;QAAsC,2BAAO,KAAP,e;O;MApB9C;;;O;MqBHwB,gI;QAAA,wC;QAAA,6B;QAAA,yB;QAAA,kD;QAAA,wD;QAAA,kC;MAKxB,C;;;;;;;;4DALwB,Y;;;;;gBrBsBpB,gB;gCAAA,0EqBrBQ,iFrBqBR,Q;oBAAA,qC;yBAAA,mB;gBAAA,Q;;;;gBqBtBsB,OACtB,a;;;;;;;;;;;;;;MAIJ,C;aALwB,uD;QAAA,yD;yBAAA,oH;cAAA,S;mBAAA,Q;;mBAAA,uB;QAKxB,C;O;KALwB,C;IIHkF,qG;MAAA,wC;MAAA,6B;MAAA,yB;MAAA,kD;MAAA,kC;MAAA,0B;IAE1G,C;;;;;;;;8CAF0G,Y;;;;;cACjF,gB;8BAAA,6BAAU,gBAAV,O;kBAAA,qC;uBAAA,mB;cAAA,Q;;;;cAAL,gB;8BAAA,gCAAK,aAAL,O;kBAAA,qC;uBAAA,mB;cAAA,Q;;cAAjB,W;;;;;;;;;;;;;;IACH,C;IAF0G,yC;MAAA,kE;uBAAA,yF;YAAA,S;iBAAA,Q;;iBAAA,uB;MAE1G,C;K;IALA,uC;MAGgG,oCJGxE,uBIHkF,qBJGlF,YIHwE,C;K;GAHhG,C;gHAOA,yB;IAAA,6B;IAAA,iF;IAAA,0D;IAAA,sC;I5BiDA,kC;IAAA,yC;IAAA,iD;MAMW,kC;K;IACH,uE;MAAA,wC;MAAA,yB;MAAA,kB;MAAA,kC;IAEA,C;;;;;;;;mDAFA,Y;;;;;cACc,gB;8BAAA,yBAAV,oBAAU,O;kBAAA,qC;uBAAA,mB;cAAA,Q;;;;;;;;;;;;;;;;;;IACd,C;IATR,qDAOQ,kD;qBAAA,gE;UAAA,S;eAAA,Q;;eAAA,uB;IAEA,C;IATR;;;K;IwBjDY,wG;MAAA,wC;MAAA,yB;MAAA,kD;MAAA,0B;MAAA,0B;IAGR,C;;;;;;;;iEAHQ,Y;;;;;cAEW,gB;8BAAA,+CAAU,gBAAV,O;kBAAA,qC;uBAAA,mB;cAAA,Q;;;;cAAf,W;;;;;;;;;;;;;;IACJ,C;IAHQ,qE;MAAA,qD;uBAAA,kG;YAAA,S;iBAAA,Q;;iBAAA,uB;MAGR,C;K;IARJ,6BAIwB,yB;MrBGxB,kC;MAAA,2D;MAAA,+C;QAmBY,oC;O;MAnBZ,6CAoBQ,+B;QAAsC,2BAAO,KAAP,e;O;MApB9C;;;O;MqBHwB,gI;QAAA,wC;QAAA,6B;QAAA,yB;QAAA,kD;QAAA,wD;QAAA,kC;MAKxB,C;;;;;;;;4DALwB,Y;;;;;gBrBsBpB,gB;gCAAA,0EqBrBQ,iFrBqBR,Q;oBAAA,qC;yBAAA,mB;gBAAA,Q;;;;gBqBtBsB,OACtB,a;;;;;;;;;;;;;;MAIJ,C;aALwB,uD;QAAA,yD;yBAAA,oH;cAAA,S;mBAAA,Q;;mBAAA,uB;QAKxB,C;O;KALwB,C;III+F,4G;MAAA,wC;MAAA,6B;MAAA,yB;MAAA,kD;MAAA,wB;MAAA,kC;MAAA,0B;IAGvH,C;;;;;;;;qDAHuH,Y;;;;;cACjG,gB;8BAAA,6BAAU,gBAAV,O;kBAAA,qC;uBAAA,mB;cAAA,Q;;;;cAAA,+B;cAAA,4B;gBAAoB,M;;gBAApB,gB;;;;;cAAlB,kBAAkB,e;cACD,gB;8BAAA,gCAAK,WAAL,O;kBAAA,qC;uBAAA,mB;cAAA,Q;;cAAjB,W;;;;;;;;;;;;;;IACJ,C;IAHuH,gD;MAAA,kE;uBAAA,gG;YAAA,S;iBAAA,Q;;iBAAA,uB;MAGvH,C;K;IANA,uC;MAG6G,oCJJrF,uBII+F,4BJJ/F,YIIqF,C;K;GAH7G,C;EAaY,8F;IAAA,wC;IAAA,yB;IAAA,0C;IAAA,0B;IAAA,0B;EAER,C;;;;;;;;yDAFQ,Y;;;;;YACiC,UAAhC,M;YAAa,aAAmB,iCAAnB,EAAmB,yCAAnB,O;YZjCtB,IAAI,QAAQ,CAAZ,C;cACI,MAAM,6BAAoB,6BAApB,C;;YYgCD,0BZ9BF,KY8BE,EAA0C,gBAA1C,C;YAAL,gB;4BAAA,yC;gBAAA,qC;qBAAA,mB;YAAA,Q;;;;YAAA,oB;;;;;;;;;;;;;;EACJ,C;EAFQ,2D;IAAA,qD;qBAAA,wF;UAAA,S;eAAA,Q;;eAAA,uB;IAER,C;G;EAJ6D,iG;IAAA,wC;IAAA,6B;IAAA,yB;IAAA,4C;IAAA,kC;EAKjE,C;;;;;;;;oDALiE,Y;;;;;YAC7D,gBAAY,CAAZ,C;YzBSA,gB;4BAAA,uEyBRQ,oDzBQR,Q;gBAAA,qC;qBAAA,mB;YAAA,Q;;;;YyBTA,OACA,a;;;;;;;;;;;;;;EAGJ,C;EALiE,8C;IAAA,yD;qBAAA,qF;UAAA,S;eAAA,Q;;eAAA,uB;IAKjE,C;G;EARA,gC;IAG4D,uCAAK,6BAAL,C;G;EAUoB,qG;IAAA,wC;IAAA,6B;IAAA,yB;IAAA,4C;IAAA,kC;IAAA,0B;EAGhF,C;;;;;;;;+CAHgF,Y;;;;;YAC5E,gB;4BAAA,0BAAO,gBAAP,O;gBAAA,qC;qBAAA,mB;YAAA,Q;;;;YACiB,gB;4BAAA,gCAAK,gBAAL,O;gBAAA,qC;qBAAA,mB;YAAA,Q;;YAAjB,W;;;;;;;;;;;;;;EACJ,C;EAHgF,yC;IAAA,kE;qBAAA,yF;UAAA,S;eAAA,Q;;eAAA,uB;IAGhF,C;G;EANA,mC;IAGsE,sCJtB9C,yBIsBwD,qBJtBxD,YIsB8C,C;G;EAKtE,6C;IAY4H,8BAAY,OAAZ,EAAqB,SAArB,C;G;EAehH,2H;IAAA,wC;IAAA,yB;IAAA,kD;IAAA,sD;IAAA,0B;IAAA,0B;EAGR,C;;;;;;;;2DAHQ,Y;;;;;YACU,gB;4BAAA,6BAAU,gCAAV,EAAuB,gBAAvB,O;gBAAA,qC;qBAAA,mB;YAAA,Q;;;;YAAd,mCAAc,a;YACd,gB;4BAAA,4BAAK,gCAAL,O;gBAAA,qC;qBAAA,mB;YAAA,Q;;YADA,OACA,a;;;;;;;;;;;;;;EACJ,C;EAHQ,wF;IAAA,qD;qBAAA,qH;UAAA,S;eAAA,Q;;eAAA,uB;IAGR,C;G;EANoI,2I;IAAA,wC;IAAA,6B;IAAA,yB;IAAA,8C;IAAA,kD;IAAA,gD;IAAA,+B;IAAA,kC;EAOxI,C;;;;;;;;oDAPwI,Y;;;;;yCAC/G,0B;YACrB,gB;4BAAA,gCAAK,wBAAL,O;gBAAA,qC;qBAAA,mB;YAAA,Q;;;;YzB/BA,gB;4BAAA,yEyBgCQ,qGzBhCR,Q;gBAAA,qC;qBAAA,mB;YAAA,Q;;YyB8BA,OAEA,a;;;;;;;;;;;;;;EAIJ,C;EAPwI,wF;IAAA,yD;qBAAA,+H;UAAA,S;eAAA,Q;;eAAA,uB;IAOxI,C;G;EAjBA,oD;IAUmI,uCAAK,iDAAL,C;G;EAuBvH,6H;IAAA,wC;IAAA,yB;IAAA,sD;IAAA,kD;IAAA,0B;IAAA,0B;IAAA,0B;EAOR,C;;;;;;;;6DAPQ,Y;;;;;gBAIU,I;gBAET,M,EAAA,M;YALS,IAAI,qCAAgB,IAApB,C;cACV,oC;cADU,gB;;;cAGV,gB;8BAAA,6BAAU,iGAAV,EAA4B,gBAA5B,O;kBAAA,qC;uBAAA,mB;cAAA,Q;;;;;;YAAA,iC;YAHU,gB;;;YAAd,oD;YAKK,gH;YAAL,gB;4BAAA,yC;gBAAA,qC;qBAAA,mB;YAAA,Q;;YALA,OAKA,a;;;;;;;;;;;;;;EACJ,C;EAPQ,0F;IAAA,qD;qBAAA,uH;UAAA,S;eAAA,Q;;eAAA,uB;IAOR,C;G;EATqG,4H;IAAA,wC;IAAA,6B;IAAA,yB;IAAA,kD;IAAA,oD;IAAA,kC;EAUzG,C;;;;;;;;sDAVyG,Y;;;;;YACrG,sBAAwB,IAAxB,C;YzBnDA,gB;4BAAA,2EyBoDQ,4FzBpDR,Q;gBAAA,qC;qBAAA,mB;YAAA,Q;;;;YyBmDA,OACA,a;;;;;;;;;;;;;;EAQJ,C;EAVyG,yE;IAAA,yD;qBAAA,gH;UAAA,S;eAAA,Q;;eAAA,uB;IAUzG,C;G;EAtBA,6C;IAYoG,uCAAK,0CAAL,C;G;E5BtBpG,oD;IAMW,kC;G;EACH,0E;IAAA,wC;IAAA,yB;IAAA,kB;IAAA,kC;EAEA,C;;;;;;;;oDAFA,Y;;;;;YACc,gB;4BAAA,yBAAV,oBAAU,O;gBAAA,qC;qBAAA,mB;YAAA,Q;;;;;;;;;;;;;;;;;;EACd,C;EATR,wDAOQ,kD;mBAAA,mE;QAAA,S;aAAA,Q;;aAAA,uB;EAEA,C;EATR;;;G;E8B6K+C,4H;IAAA,wC;IAAA,6B;IAAA,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CJ,C;EAFQ,mC;IAAA,kD;qBAAA,6D;UAAA,S;eAAA,Q;;eAAA,uB;IAER,C;G;EAPJ,wD;IAAA,wC;IAAA,yB;IAAA,qB;IAAA,kC;EAUA,C;;;;;;;;yCAVA,Y;;;;;+BAIY,C;Y7BuDR,gB;4BAAA,kE6BtDQ,0B7BsDR,Q;gBAAA,qC;qBAAA,mB;YAAA,Q;;;;Y6BlDA,OAAO,c;;;;;;;;;;;;;;EACX,C;EAVA,yD;mBAAA,kD;QAAA,S;aAAA,Q;;aAAA,uB;EAUA,C;EAOY,6F;IAAA,wC;IAAA,yB;IAAA,kD;IAAA,kC;IAAA,0B;EAIR,C;;;;;;;;gDAJQ,Y;;;;;YACA,gB;4BAAA,6BAAU,gBAAV,O;gBAAA,qC;qBAAA,mB;YAAA,Q;;;;YAAJ,IAAI,aAAJ,C;cAAA,OACI,uDADJ,M;;cAAA,gB;;;;;YAGJ,W;;;;;;;;;;;;;;EAAA,C;EAJQ,0D;IAAA,qD;qBAAA,uF;UAAA,S;eAAA,Q;;eAAA,uB;IAIR,C;G;EATJ,qE;IAAA,wC;IAAA,yB;IAAA,qB;IAAA,kC;IAAA,kC;EAYA,C;;;;;;;;yCAZA,Y;;;;;+BAIY,C;Y7B2CR,gB;4BAAA,kE6B1CQ,kD7B0CR,Q;gBAAA,qC;qBAAA,mB;YAAA,Q;;;;Y6BpCA,OAAO,c;;;;;;;;;;;;;;EACX,C;EAZA,sE;mBAAA,+D;QAAA,S;aAAA,Q;;aAAA,uB;EAYA,C;E7BgBA,kD;IAmBY,oC;G;EAnBZ,gDAoBQ,+B;IAAsC,2BAAO,KAAP,e;G;EApB9C;;;G;EuByEA,yD;IAEoB,0C;G;EACZ,gE;IAAA,wC;IAAA,yB;IAAA,kB;IAAA,0B;EAMA,C;;;;;;;;8CANA,Y;;;;;YAGS,gB;4BAAA,6BAAU,gBAAV,O;gBAAA,qC;qBAAA,mB;YAAA,Q;;;;YAAL,IAAI,CAAC,aAAL,C;cACI,MAAM,kC;;;;;;;;;;;;;;;;EAEd,C;EATR,oDAGQ,8C;mBAAA,yD;QAAA,S;aAAA,Q;;aAAA,uB;EAMA,C;EATR;;;G;EvBzEA,kD;IAmBY,oC;G;EAnBZ,gDAoBQ,+B;IAAsC,2BAAO,KAAP,e;G;EApB9C;;;G;E8BTY,oG;IAAA,wC;IAAA,yB;IAAA,kD;I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ACR,SAAS,gBAAE,CAAF,E;IACT,SAAS,gBAAE,CAAF,E;IACT,EAAE,CAAF,IAAO,E;IACP,EAAE,CAAF,IAAO,E;IACP,WAAW,C;IACX,WAAW,C;EACf,C;;;;;;E6ElJJ,0D;;MAM2D,sBAAd,YAAzC,qDAAyC,CAAc,EzG2E/C,WyG3EoF,IzG2EpF,CyG3E+C,C;;MAiCrD,gC;QAlCoG,UAmCvF,oBzGkDP,WAAO,cyGlD0B,CzGkD1B,CAAP,CyGlDO,C;;QAHf,O;;G;EA5BJ,sF;IAMI,8B;MAAA,iBAAgD,I;;MAGqB,sBAAd,YAAnD,6DAAmD,CAAc,EzG+D7D,WyG/DkG,IzG+DlG,CyG/D6D,iB;;MAqBnE,gC;QAtBQ,UAuBK,oBzGkDP,WAAO,cyGlD0B,CzGkD1B,CAAP,CyGlDO,C;;QAHf,O;;G;EAhBJ,iE;;MAMsB,sBAAd,sBAAc,EzGsDV,WyGtD+C,IzGsD/C,CyGtDU,C;;MAYhB,gC;QAbQ,eAcK,oBzGkDP,WAAO,cyGlD0B,CzGkD1B,CAAP,CyGlDO,C;;QAHf,O;;G;kBAPJ,yB;IzGqDQ,uD;IAAA,sC;IyGrDR,oC;;QAQQ,O;;QACF,gC;UACE,UAAW,oBzGkDP,gBAAO,cyGlD0B,CzGkD1B,CAAP,CyGlDO,C;;UAHf,O;;IAKJ,C;GAZA,C;EC9BA,4D;;MAuDgB,gB;MADZ,uBAhDY,U;;QAkDR,OhCzCE,UgCyCI,gBhCzCJ,EAA6B,KAA7B,C;;QgC0CJ,gC;UACmB,gBAAoB,C;UAArC,gB5GhBJ,oBEgDQ,WAAO,cFhDW,SEgDX,CAAP,CFhDR,C;U4GiBI,uB;;UAJQ,O;;MAAZ,gB;MAMA,IAAI,UAAU,mBAAd,C;QAEqB,cAAO,4E;QAAxB,gB5G9BJ,oBEgDQ,WFhDkB,OEgDlB,CFhDR,C;;;E4GxBJ,C;EAEA,wE;;MA4CgB,gB;MADZ,uBArCY,U;;QAuCR,OhCtBE,oBgCsBI,gBhCtBJ,EAAuC,KAAvC,C;;QgCuBJ,gC;UACmB,gBAAoB,C;UAArC,gB5GhBJ,oBEgDQ,WAAO,cFhDW,SEgDX,CAAP,CFhDR,C;U4GiBI,uB;;UAJQ,O;;MAAZ,gB;MAMA,IAAI,UAAU,mBAAd,C;QAEqB,cAAO,4E;QAAxB,gB5G9BJ,oBEgDQ,WFhDkB,OEgDlB,CFhDR,C;;;E4GbJ,C;EAEA,2D;;MAiCgB,gB;MADZ,uBA1BY,U;;QACwB,kB;QA2BhC,OhCzCE,UgCyCI,gBhCzCJ,EAA6B,KAA7B,C;;QgC0CJ,gC;UACmB,gBAAoB,C;UAArC,gB5GhBJ,oBEgDQ,WAAO,cFhDW,SEgDX,CAAP,CFhDR,C;U4GiBI,uB;;UAJQ,O;;MAAZ,gB;MAMA,IAAI,UAAU,mBAAd,C;QAEqB,cAAO,4E;QAAxB,gB5G9BJ,oBEgDQ,WFhDkB,OEgDlB,CFhDR,C;;;E4GAJ,C;EAEA,uE;;MAoBgB,gB;MADZ,uBAbY,U;;QACwB,kB;QAchC,OhCtBE,oBgCsBI,gBhCtBJ,EAAuC,KAAvC,C;;QgCuBJ,gC;UACmB,gBAAoB,C;UAArC,gB5GhBJ,oBEgDQ,WAAO,cFhDW,SEgDX,CAAP,CFhDR,C;U4GiBI,uB;;UAJQ,O;;MAAZ,gB;MAMA,IAAI,UAAU,mBAAd,C;QAEqB,cAAO,4E;QAAxB,gB5G9BJ,oBEgDQ,WFhDkB,OEgDlB,CFhDR,C;;;E4GaJ,C;oBAEA,yB;I5GbA,iC;IEgDQ,uD;I0GnCR,oC;MAOgB,UAQgB,M;MAT5B,uBAA6C,U;;QAEzC,aAAM,gBAAN,C;;QACF,gC;UACmB,gBAAoB,C;UAArC,gB5GhBJ,oBEgDQ,WAAO,cFhDW,SEgDX,CAAP,CFhDR,C;U4GiBI,M;;UAJQ,O;;MAAZ,gB;MAMA,IAAI,UAAU,mBAAd,C;QAEqB,cAAO,4E;QAAxB,gB5G9BJ,oBEgDQ,WFhDkB,OEgDlB,CFhDR,C;O4GgCJ,C;GAjBA,C;EAmBA,+D;IASW,6B;;MAoBM,gB;;QACT,OhC/DE,2BAAuC,KAAvC,C;;QgCgEJ,gC;UACE,kCAAuB,CAAvB,C;;UAHS,O;;MAAb,iB;MAiBA,IAAI,WAAW,mBAAf,C;QAAoC,4BAAO,mB;QAAP,8B;OACpC,YAAY,qCAAmB,MAAnB,C;MACZ,IAAI,UAAU,2BAAd,C;QAA2C,4BAAO,mB;QAAP,8B;OACpC,IAAI,4CAAJ,C;QAEC,IA1CoB,IA0CpB,C;UAA4B,MAAM,kBAAkB,KAAM,MAAxB,EAA+B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ACqG,iB;G;EhGDrG,oD;IAAuG,gB;G;EACvG,wC;IAAwE,gB;G;EACxE,kD;IAAoF,MAAM,S;G;sGAA1F,mC;IAAoF,MAAM,S;G;EAE1F,2B;IAA8D,gB;G;;;;;;;;EAW9D,qC;EACA,C;sHPVA,uB;IAKI,c;G;EwGbJ,oC;IAAgE,W;G;ECEhE,wC;IAA4E,Q;G;ECFjC,6B;IACvC,eAAwB,I;G;oCACxB,Y;IACsB,Q;IAAA,oF;G;0CACtB,iB;IAA2B,eAAa,K;EAAM,C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;crH2MpB,C;cACA,C;YACF,C;gBE1ME,C;gBACA,C;cACF,C;iBAIA,WAAO,cAAP,C;kBhByHA,WAAO,cAAP,C;gBAGI,C;uBACO,C;sBACD,C;;;;iBAqBX,WAAO,cAAP,C;uB8BmmCM,WAAO,oBAAP,C;gCAGU,WAAO,6BAAP,C;qBAEZ,WAAO,kBAAP,C;uBAEE,WAAO,oBAAP,C;UAEP,E;UACA,C;SACD,C;WAGJ,WAAO,QAAP,C;cAEG,UAAM,KAAN,C;iBAEG,UAAM,IAAN,C;4BS9SkB,C;mBACT,C;UAIf,WAAO,OAAP,C;kBAIQ,WAAO,eAAP,C;iBAID,WAAO,cAAP,C;gBAID,WAAO,aAAP,C;mBAIG,WAAO,gBAAP,C;oBAIC,WAAO,0BAAP,C;0BSt/BY,oB;a3C0pBnB,WAAO,UAAP,C;SgE3eL,WAAO,MAAP,C;YAGG,WAAO,SAAP,C;kBCpLO,gBAAkC,CAAlC,O;S8DGT,WAAO,MAAP,C;kBAQS,WAAO,eAAP,C;SAQT,WAAO,MAAP,C;uBlDe6B,yB;yBAGW,2B;sCjB9BC,4C;wBAOvB,aAAW,iCAAX,EAClC,EADkC,EAC9B,CAD8B,EAC3B,UAD2B,C;gB6BcN,WAAO,aAAP,C;iBA8EC,WAAO,cAAP,C;mBCoHE,E;WAGd,WAAO,QAAP,C;cClOG,WAAO,WAAP,C;qBAGQ,WAAO,kBAAP,C;gBCAC,C;qBASU,C;8BAOI,C;sBAMR,C;uBAMC,E;oBoC6CJ,WAAO,iBAAP,C;iBrD+HH,WAAO,cAAP,C;qBAEI,WAAO,kBAAP,C;gBAER,WAAO,WAAP,C;cAEF,WAAO,SAAP,C;2BAWU,e;c6B/Gb,WAAO,WAAP,C;gBAEE,WAAO,aAAP,C;mBAEG,WAAO,gBAAP,C;WAER,WAAO,QAAP,C;aAEE,WAAO,UAAP,C;iBAGI,YAAM,MAAN,C;mBAEE,YAAM,QAAN,C;oBC6JC,aAAW,4CAAX,EAAyD,GAAzD,C;WAET,WAAO,QAAP,C;UAED,WAAO,OAAP,C;WAEC,WAAO,QAAP,C;cAEG,WAAO,WAAP,C;iBAEG,aAAW,0CAAX,EAAuD,EAAvD,C;gBGnSG,W;YELR,C;UAEe,K;yBG4Be,K;;;;;"}