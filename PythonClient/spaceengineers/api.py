# Generated by JVMClient, see ClientGenerator.kt
# pylint: disable=C0115,C0116,R0902,C0103,R0903,R0913,W0401,W0622,C0114,R0205,W0614

from .models import *


class FunctionalBlockAdmin:
    def SetEnabled(self, blockId: str, enabled: bool):
        pass


class MedicalRoomAdmin:
    def SetHealingAllowed(self, blockId: str, healingAllowed: bool):
        pass

    def SetRefuelAllowed(self, blockId: str, refuelAllowed: bool):
        pass

    def SetRespawnAllowed(self, blockId: str, respawnAllowed: bool):
        pass

    def SetSpawnWithoutOxygenEnabled(
        self, blockId: str, spawnWithoutOxygenEnabled: bool
    ):
        pass


class SensorBlockAdmin:
    def SetFieldMax(self, blockId: str, fieldMax: Vec3F):
        pass

    def SetFieldMin(self, blockId: str, fieldMin: Vec3F):
        pass


class TerminalBlockAdmin:
    def SetCustomData(self, blockId: str, customData: str):
        pass

    def SetCustomName(self, blockId: str, customName: str):
        pass

    def SetShowInInventory(self, blockId: str, showInInventory: bool):
        pass

    def SetShowInTerminal(self, blockId: str, showInTerminal: bool):
        pass

    def SetShowOnHUD(self, blockId: str, showOnHUD: bool):
        pass


class WarheadAdmin:
    def Detonate(self, blockId: str):
        pass

    def Explode(self, blockId: str):
        pass

    def SetArmed(self, blockId: str, armed: bool):
        pass

    def StartCountDown(self, blockId: str) -> bool:
        pass

    def StopCountdown(self) -> bool:
        pass


class BlocksAdmin:
    FunctionalBlock: FunctionalBlockAdmin
    MedicalRoom: MedicalRoomAdmin
    SensorBlock: SensorBlockAdmin
    TerminalBlock: TerminalBlockAdmin
    Warhead: WarheadAdmin

    def CreateOrUpdateGroup(self, name: str, gridId: str, blockIds: List[str]):
        pass

    def MapButtonToBlock(
        self, buttonBlockId: str, buttonIndex: int, action: str, targetId: str
    ):
        pass

    def MapButtonToGroup(
        self, buttonBlockId: str, buttonIndex: int, action: str, groupName: str
    ):
        pass

    def PlaceAt(
        self,
        blockDefinitionId: DefinitionId,
        position: Vec3F,
        orientationForward: Vec3F,
        orientationUp: Vec3F,
        color: Vec3F,
    ) -> CubeGrid:
        pass

    def PlaceInGrid(
        self,
        blockDefinitionId: DefinitionId,
        gridId: str,
        minPosition: Vec3I,
        orientationForward: Vec3I,
        orientationUp: Vec3I,
        color: Vec3F,
    ) -> str:
        pass

    def Remove(self, blockId: str):
        pass

    def SetCustomName(self, blockId: str, customName: str):
        pass

    def SetIntegrity(self, blockId: str, integrity: float):
        pass


class CharacterAdmin:
    def Create(
        self,
        name: str,
        position: Vec3F,
        orientationForward: Vec3F,
        orientationUp: Vec3F,
    ) -> CharacterObservation:
        pass

    def Die(self):
        pass

    def LocalCharacterId(self) -> str:
        pass

    def MainCharacterId(self) -> str:
        pass

    def Remove(self, id: str):
        pass

    def ShowTerminal(self, blockId: str):
        pass

    def Switch(self, id: str):
        pass

    def Teleport(
        self, position: Vec3F, orientationForward: Vec3F, orientationUp: Vec3F
    ) -> CharacterObservation:
        pass

    def UpdateEnergy(self, energy: float):
        pass

    def UpdateHydrogen(self, hydrogen: float):
        pass

    def UpdateOxygen(self, oxygen: float):
        pass

    def Use(self, blockId: str, functionIndex: int, action: int):
        pass


class ObserverAdmin:
    def BlockById(self, blockId: str) -> Block:
        pass

    def GridById(self, gridId: str) -> CubeGrid:
        pass

    def ObserveCharacters(self) -> List[CharacterObservation]:
        pass


class TestAdmin:
    def AdminOnly(self):
        pass

    def GameOnly(self):
        pass

    def ObserverOnly(self):
        pass


class SpaceEngineersAdmin:
    Blocks: BlocksAdmin
    Character: CharacterAdmin
    Observer: ObserverAdmin
    Tests: TestAdmin

    def DebugInfo(self) -> DebugInfo:
        pass

    def Ping(self) -> str:
        pass

    def SetFrameLimitEnabled(self, enabled: bool):
        pass

    def ShowNotification(self, text: str):
        pass

    def UpdateDefaultInteractDistance(self, distance: float):
        pass


class Blocks:
    def Place(self):
        pass


class Character:
    def BeginUsingTool(self):
        pass

    def EndUsingTool(self):
        pass

    def Jump(self, movement: Vec3F):
        pass

    def MoveAndRotate(
        self, movement: Vec3F, rotation3: Vec2F, roll: float, ticks: int
    ) -> CharacterObservation:
        pass

    def ShowInventory(self):
        pass

    def ShowTerminal(self):
        pass

    def SwitchHelmet(self) -> CharacterObservation:
        pass

    def SwitchParkedStatus(self) -> bool:
        pass

    def SwitchWalk(self) -> bool:
        pass

    def TurnOffDampeners(self) -> CharacterObservation:
        pass

    def TurnOffJetpack(self) -> CharacterObservation:
        pass

    def TurnOnDampeners(self) -> CharacterObservation:
        pass

    def TurnOnJetpack(self) -> CharacterObservation:
        pass

    def TurnOnRelativeDampeners(self) -> CharacterObservation:
        pass

    def Use(self):
        pass


class Debug:
    def CharacterAnimations(self) -> CharacterAnimations:
        pass

    def Particles(self) -> Particles:
        pass

    def Sounds(self) -> SoundBanks:
        pass


class Definitions:
    def AllDefinitions(self) -> List[DefinitionBase]:
        pass

    def BlockDefinitionHierarchy(self) -> dict:
        pass

    def BlockDefinitions(self) -> List[BlockDefinition]:
        pass

    def BlockHierarchy(self) -> dict:
        pass


class Input:
    def StartPlaying(self, snapshots: List[FrameSnapshot]):
        pass

    def StartRecording(self):
        pass

    def StopPlaying(self):
        pass

    def StopRecording(self) -> List[FrameSnapshot]:
        pass


class Items:
    def Activate(self, toolbarLocation: ToolbarLocation):
        pass

    def Equip(self, toolbarLocation: ToolbarLocation):
        pass

    def SetToolbarItem(
        self, definitionId: DefinitionId, toolbarLocation: ToolbarLocation
    ):
        pass

    def Toolbar(self) -> Toolbar:
        pass

    def UnEquipWeapon(self):
        pass


class Observer:
    def DownloadScreenshotBase64(self) -> str:
        pass

    def NavigationGraph(self, gridId: str) -> NavGraph:
        pass

    def Observe(self) -> CharacterObservation:
        pass

    def ObserveBlocks(self) -> Observation:
        pass

    def ObserveCharacters(self) -> List[CharacterObservation]:
        pass

    def ObserveControlledEntity(self) -> ExtendedEntity:
        pass

    def ObserveFloatingObjects(self) -> List[FloatingObject]:
        pass

    def ObserveNewBlocks(self) -> Observation:
        pass

    def SwitchCamera(self):
        pass

    def TakeScreenshot(self, absolutePath: str):
        pass


class FocusedScreen:
    def CloseScreen(self):
        pass

    def CloseScreenNow(self):
        pass

    def Data(self) -> object:
        pass


class GamePlay:
    def Data(self) -> GamePlayData:
        pass

    def ShowMainMenu(self):
        pass

    def ShowToolbarConfig(self):
        pass


class JoinGame:
    def Close(self):
        pass

    def Data(self) -> JoinGameData:
        pass

    def DirectConnect(self):
        pass

    def JoinWorld(self):
        pass

    def Refresh(self):
        pass

    def SelectGame(self, index: int):
        pass

    def SelectTab(self, index: int):
        pass

    def ServerDetails(self):
        pass


class LoadGame:
    def Close(self):
        pass

    def Data(self) -> LoadGameData:
        pass

    def Delete(self):
        pass

    def DoubleClickWorld(self, index: int):
        pass

    def Edit(self):
        pass

    def Filter(self, text: str):
        pass

    def Load(self):
        pass

    def Publish(self):
        pass

    def Save(self):
        pass


class Loading:
    def Data(self) -> LoadingData:
        pass


class MainMenu:
    def Character(self):
        pass

    def Continue(self):
        pass

    def Data(self) -> MainMenuData:
        pass

    def ExitToMainMenu(self):
        pass

    def ExitToWindows(self):
        pass

    def JoinGame(self):
        pass

    def LoadGame(self):
        pass

    def NewGame(self):
        pass

    def Options(self):
        pass

    def Save(self):
        pass

    def SaveAs(self):
        pass


class Medicals:
    def Data(self) -> MedicalsData:
        pass

    def Join(self):
        pass

    def Refresh(self):
        pass

    def Respawn(self):
        pass

    def SelectFaction(self, factionIndex: int):
        pass

    def SelectRespawn(self, roomIndex: int):
        pass

    def ShowMessageOfTheDay(self):
        pass


class MessageBox:
    def Data(self) -> MessageBoxData:
        pass

    def PressNo(self):
        pass

    def PressYes(self):
        pass


class NewGame:
    def Close(self):
        pass


class SaveAs:
    def Data(self) -> SaveAsData:
        pass

    def PressCancel(self):
        pass

    def PressOk(self):
        pass

    def SetName(self, name: str):
        pass


class ServerConnect:
    def Close(self):
        pass

    def Connect(self):
        pass

    def Data(self) -> ServerConnectData:
        pass

    def EnterAddress(self, address: str):
        pass

    def ToggleAddServerToFavorites(self):
        pass


class CommsTab:

    pass


class ControlPanelTab:
    def Data(self) -> TerminalControlPanelData:
        pass

    def EnterBlockGroup(self, text: str):
        pass

    def FilterBlocks(self, text: str):
        pass

    def GroupDelete(self):
        pass

    def GroupSave(self):
        pass


class FactionsTab:

    pass


class GpsTab:

    pass


class InfoTab:
    def ConvertToShip(self):
        pass

    def ConvertToStation(self):
        pass

    def Data(self) -> TerminalInfoData:
        pass

    def EnterGridName(self, name: str):
        pass

    def RenameGrid(self):
        pass

    def SetEnemyAntennaRange(self, value: float):
        pass

    def SetFriendlyAntennaRange(self, value: float):
        pass

    def SetOwnedAntennaRange(self, value: float):
        pass

    def SetShowAntennaRangeEnabled(self, enabled: bool):
        pass

    def SetShowCenterOfMassEnabled(self, enabled: bool):
        pass

    def SetShowGravityRangeEnabled(self, enabled: bool):
        pass

    def SetShowGridPivotEnabled(self, enabled: bool):
        pass

    def SetShowSensorsFieldRangeEnabled(self, enabled: bool):
        pass


class InventorySide:
    def ClickSelectedItem(self):
        pass

    def DoubleClickSelectedItem(self):
        pass

    def Filter(self, text: str):
        pass

    def FilterAll(self):
        pass

    def FilterEnergy(self):
        pass

    def FilterShip(self):
        pass

    def FilterStorage(self):
        pass

    def FilterSystem(self):
        pass

    def SelectItem(self, index: int):
        pass

    def SwapToCharacterOrItem(self):
        pass

    def SwapToGrid(self):
        pass

    def ToggleHideEmpty(self):
        pass


class InventoryTab:
    Left: InventorySide
    Right: InventorySide

    def Data(self) -> TerminalInventoryData:
        pass

    def Deposit(self):
        pass

    def DropSelected(self):
        pass

    def FromBuildPlannerToProductionQueue(self):
        pass

    def SelectedToProductionQueue(self):
        pass

    def TransferInventoryItemToLeft(
        self, sourceInventoryId: int, destinationInventoryId: int, itemId: int
    ):
        pass

    def TransferInventoryItemToRight(
        self, sourceInventoryId: int, destinationInventoryId: int, itemId: int
    ):
        pass

    def Withdraw(self):
        pass


class ProductionTab:
    def AddToProductionQueue(self, index: int):
        pass

    def Data(self) -> TerminalProductionData:
        pass

    def EnterBlueprintSearchBox(self, text: str):
        pass

    def RemoveFromProductionQueue(self, index: int):
        pass

    def SelectAssembler(self, index: int):
        pass

    def SelectBlueprint(self, index: int):
        pass

    def ToggleProductionCooperativeMode(self):
        pass

    def ToggleProductionRepeatMode(self):
        pass


class Terminal:
    Comms: CommsTab
    ControlPanel: ControlPanelTab
    Factions: FactionsTab
    Gps: GpsTab
    Info: InfoTab
    Inventory: InventoryTab
    Production: ProductionTab

    def Close(self):
        pass

    def Data(self) -> TerminalScreenData:
        pass

    def SelectTab(self, index: int):
        pass


class ToolbarConfig:
    def Close(self):
        pass

    def Data(self) -> ToolbarConfigData:
        pass

    def DropGridItemToToolbar(self, gridLocation: int, toolbarLocation: int):
        pass

    def Search(self, text: str):
        pass

    def SelectCategory(self, index: int):
        pass


class Screens:
    FocusedScreen: FocusedScreen
    GamePlay: GamePlay
    JoinGame: JoinGame
    LoadGame: LoadGame
    Loading: Loading
    MainMenu: MainMenu
    Medicals: Medicals
    MessageBox: MessageBox
    NewGame: NewGame
    SaveAs: SaveAs
    ServerConnect: ServerConnect
    Terminal: Terminal
    ToolbarConfig: ToolbarConfig

    def WaitUntilTheGameLoaded(self):
        pass


class Session:
    def Connect(self, address: str):
        pass

    def Disconnect(self):
        pass

    def ExitGame(self):
        pass

    def ExitToMainMenu(self):
        pass

    def Info(self) -> object:
        pass

    def LoadScenario(self, scenarioPath: str):
        pass


class SpaceEngineers:
    Admin: SpaceEngineersAdmin
    Blocks: Blocks
    Character: Character
    Debug: Debug
    Definitions: Definitions
    Input: Input
    Items: Items
    Observer: Observer
    Screens: Screens
    Session: Session

    def Close(self):
        pass
